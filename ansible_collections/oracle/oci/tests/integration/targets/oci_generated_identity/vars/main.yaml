## DYNAMIC GROUP
test_dynamic_group_create_required_compartment_id: "{{ tenancy_ocid }}"
test_dynamic_group_update_using_name_optional_required_compartment_id: "{{ tenancy_ocid }}"
test_dynamic_group_delete_required_compartment_id: "{{ tenancy_ocid }}"
test_dynamic_group_create_optional_required_compartment_id: "{{ tenancy_ocid }}"
test_dynamic_group_list_compartment_id: "{{ tenancy_ocid }}"

## IDP GROUP MAPPING
test_idp_group_mapping_create_dependency_group_compartment_id: "{{ tenancy_ocid }}"
test_idp_group_mapping_create_dependency_identity_provider_compartment_id: "{{ tenancy_ocid }}"
test_idp_group_mapping_create_dependency_identity_provider_metadata_url: null
test_idp_group_mapping_create_dependency_identity_provider_metadata: "{{ lookup('file', test_identity_provider_metadata_xml_2_file) }}"

## GROUPS
test_group_create_required_compartment_id: "{{ tenancy_ocid }}"
test_group_update_using_name_optional_required_compartment_id: "{{ tenancy_ocid }}"
test_group_delete_required_compartment_id: "{{ tenancy_ocid }}"
test_group_create_optional_required_compartment_id: "{{ tenancy_ocid }}"
test_group_list_compartment_id: "{{ tenancy_ocid }}"

## TAG NAMESPACES
# right now we only have the facts module, so instead of creating a tag namespace
# use an existing one for the GET / LIST tests
tag_namespace_resource_id: "{{ test_tag_namespace_ocid }}"

## users
test_user_create_required_compartment_id: "{{ tenancy_ocid }}"
test_user_update_using_name_optional_required_compartment_id: "{{ tenancy_ocid }}"
test_user_delete_required_compartment_id: "{{ tenancy_ocid }}"
test_user_create_optional_required_compartment_id: "{{ tenancy_ocid }}"
test_user_list_compartment_id: "{{ tenancy_ocid }}"

## user group memberships
test_user_group_membership_create_dependency_user_compartment_id: "{{ tenancy_ocid }}"
test_user_group_membership_create_dependency_group_compartment_id: "{{ tenancy_ocid }}"
test_user_group_membership_create_required_compartment_id: "{{ tenancy_ocid }}"
test_user_group_membership_update_using_name_optional_required_compartment_id: "{{ tenancy_ocid }}"
test_user_group_membership_delete_required_compartment_id: "{{ tenancy_ocid }}"
test_user_group_membership_create_optional_required_compartment_id: "{{ tenancy_ocid }}"
test_user_group_membership_list_compartment_id: "{{ tenancy_ocid }}"

# one of group_id or user_id params is required for list but generated test doesn't know
# this so it fails
skip_user_group_membership_list_test: True

## oci_identity_ui_password
test_ui_password_create_dependency_user_compartment_id: "{{ tenancy_ocid }}"
ui_password_create_required_original_custom_assertions:
  - result.ui_password.password != ""

# operation has no concept of idempotence, action is always executed
skip_ui_password_create_required_idempotency_test: True
skip_ui_password_create_optional_required_idempotence_test: True

## auth token
test_auth_token_create_dependency_user_compartment_id: "{{ tenancy_ocid }}"

## customer secret key
test_customer_secret_key_create_dependency_user_compartment_id: "{{ tenancy_ocid }}"
# the only updateable field is display_name, and you can't update that using name so skip this test
skip_customer_secret_key_update_using_name_optional_required_test: True
skip_customer_secret_key_update_using_name_optional_required_idempotence_test: True

## smtp credential
test_smtp_credential_create_dependency_user_compartment_id: "{{ tenancy_ocid }}"

## mfa device
test_mfa_totp_device_create_dependency_user_compartment_id: "{{ tenancy_ocid }}"

## policy
test_policy_create_required_statements: [ 'Allow group Administrators to manage instance-family in compartment {{test_compartment_name}}' ]
test_policy_update_using_name_optional_required_statements: [ 'Allow group Administrators to manage volume-family in compartment {{test_compartment_name}}' ]
test_policy_update_using_name_optional_required_version_date: "2020-01-17"
test_policy_create_optional_required_statements: "{{test_policy_create_required_statements}}"
test_policy_create_optional_required_version_date: "2020-01-17"
test_policy_update_optional_required_version_date: "2020-01-17"
test_policy_update_optional_required_statements: "{{test_policy_update_using_name_optional_required_statements}}"

skip_policy_update_using_name_optional_required_idempotence_test: True
## identity provider
test_identity_provider_create_required_compartment_id: "{{ tenancy_ocid }}"
test_identity_provider_update_using_name_optional_required_compartment_id: "{{ tenancy_ocid }}"
test_identity_provider_delete_required_compartment_id: "{{ tenancy_ocid }}"
test_identity_provider_create_optional_required_compartment_id: "{{ tenancy_ocid }}"
test_identity_provider_list_compartment_id: "{{ tenancy_ocid }}"

# note we do not test metadata url because we don't have a valid one
test_identity_provider_metadata_xml_file: "files/idp_metadata.xml"
test_identity_provider_metadata_xml_2_file: "files/idp_metadata_updated.xml"
test_identity_provider_freeform_attributes:
  type: ADFS

test_identity_provider_create_required_metadata_url: null
test_identity_provider_create_required_metadata: "{{ lookup('file', test_identity_provider_metadata_xml_file) }}"

test_identity_provider_update_using_name_optional_required_metadata_url: null
test_identity_provider_update_using_name_optional_required_metadata: null
test_identity_provider_update_using_name_optional_required_freeform_attributes: "{{ test_identity_provider_freeform_attributes }}"

# identity provider has a bug where it returns 'DELETED' before you are actually
# allowed to create another IdP with the same name
# thus, the second IdP we provision has to have a different 'name' and 'metadata'
test_identity_provider_create_optional_required_name: "{{ 'name_example_2_' + random_suffix_1024 }}"
test_identity_provider_create_optional_required_metadata_url: null
test_identity_provider_create_optional_required_metadata: "{{ lookup('file', test_identity_provider_metadata_xml_2_file) }}"
test_identity_provider_create_optional_required_freeform_attributes: "{{ test_identity_provider_freeform_attributes }}"

test_identity_provider_update_optional_required_metadata_url: null
test_identity_provider_update_optional_required_metadata: null
test_identity_provider_update_optional_required_freeform_attributes: "{{ test_identity_provider_freeform_attributes }}"

## identity provider group
test_identity_provider_group_create_dependency_identity_provider_compartment_id: "{{ tenancy_ocid }}"
test_identity_provider_group_create_dependency_identity_provider_metadata_url: null
test_identity_provider_group_create_dependency_identity_provider_metadata: "{{ lookup('file', test_identity_provider_metadata_xml_file) }}"

# compartments
dependency_parent_compartment_id: "{{ identity_create_delete_parent_compartment_ocid }}"

# api_key
test_api_key_create_dependency_user_compartment_id: "{{tenancy_ocid}}"
test_api_key: "{{ lookup('file', 'files/oci_api_key_public.pem') }}"
test_api_key_create_required_key: "{{ test_api_key }}"
test_api_key_create_optional_required_key: "{{ test_api_key }}"

# `api_key` is populated by the create 'api_key' call
# normally the 'id' property on the response resource would be used as *_resource_id
# but for api_key the unique identifier is `fingerprint` so we need to override
api_key_resource_id: "{{ api_key.fingerprint }}"