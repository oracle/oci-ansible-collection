## LOAD BALANCER
test_load_balancer_create_required_subnet_ids: "{{ subnet_ids }}"
test_load_balancer_create_optional_required_subnet_ids: [ "{{common_subnet_id}}" ]
test_load_balancer_create_optional_required_certificates_passphrase: null
test_load_balancer_create_optional_required_hostnames_name: example_hostname_001
test_load_balancer_create_optional_required_certificates_private_key: "{{ example_private_key }}"
test_load_balancer_create_optional_required_certificates_public_certificate: "{{ example_public_certificate }}"
test_load_balancer_create_optional_required_certificates_ca_certificate: "{{ example_ca_certificate }}"

## BACKEND SET
# we need a load balancer with a certificate with valid certs / keys so we can't use the default one
skip_backend_set_dependencies: True
test_backend_set_create_dependency_load_balancer_subnet_ids: "{{ subnet_ids }}"
test_backend_set_update_optional_required_policy: ROUND_ROBIN
test_backend_set_update_optional_required_backends_ip_address: 10.0.0.10
dependency_certificate_name: example_certificate_bundle
# test_backend_set_get_backend_set_name: "{{ 'example_backend_setupdated' + random_suffix_1024 }}"

## BACKEND
setup_backend_set_name: "{{ 'setup_backend_set' + random_suffix_1024}}"
# we need a load balancer with a backend set so we can't use the default one
skip_backend_create_dependency_load_balancer_test: True
skip_backend_delete_dependency_load_balancer_test: True
dependency_backend_set_name: "{{ setup_backend_set_name }}"
# ip_address and port are used as identifiers so they can't be updated
test_backend_update_optional_required_ip_address: 10.0.0.3 
test_backend_update_optional_required_port: 8080
test_backend_get_backend_name: "{{ test_backend_update_optional_required_ip_address }}:{{ test_backend_update_optional_required_port }}"

## BACKEND HEALTH
test_backend_health_create_dependency_load_balancer_subnet_ids: "{{ subnet_ids }}"
backend_health_resource_name: "{{ dependency_backend_name }}"

## BACKEND SET HEALTH
test_backend_set_health_create_dependency_load_balancer_subnet_ids: "{{ subnet_ids }}"
backend_set_health_resource_name: "{{ dependency_backend_set_name }}"

## HOSTNAME
test_hostname_create_dependency_load_balancer_subnet_ids: "{{ subnet_ids }}"

## LOAD BALANCER HEALTH
test_load_balancer_health_create_dependency_load_balancer_subnet_ids: "{{ subnet_ids }}"
load_balancer_health_resource_id: "{{ dependency_load_balancer_id }}"

## CERTIFICATE
test_certificate_create_dependency_load_balancer_subnet_ids:  "{{ subnet_ids }}"
test_certificate_create_optional_required_private_key: "{{ example_private_key }}"
test_certificate_create_optional_required_public_certificate: "{{ example_public_certificate }}"
test_certificate_create_optional_required_ca_certificate: "{{ example_ca_certificate }}"

## PATH ROUTE SET
test_path_route_set_create_dependency_load_balancer_subnet_ids: "{{ subnet_ids }}"

## LISTENER
test_listener_create_dependency_load_balancer_subnet_ids: "{{ subnet_ids }}"
test_listener_create_required_default_backend_set_name: "{{ dependency_backend_set_name }}"
# right now the dpendency certificate created is invalid because all the keys / certs
# are optional params and thus don't get supplied
# ideally in the future the codegen would generate optional params for dependencies in a way
# that they can be optionally overridden to fix cases like this
# for now we'll skip testing this specific field and cover it in the manual tests
test_listener_create_optional_required_ssl_configuration: null
test_listener_update_optional_required_ssl_configuration: null

test_listener_create_optional_required_default_backend_set_name: "{{ dependency_backend_set_name }}"
test_listener_create_optional_required_rule_set_names:
  - "{{ dependency_rule_set_name }}"
test_listener_create_optional_required_hostname_names:
  - "{{ dependency_hostname_name }}"

test_listener_update_optional_required_default_backend_set_name: "{{ dependency_backend_set_name }}"
test_listener_update_optional_required_hostname_names:
  - "{{ dependency_hostname_name }}"
test_listener_update_optional_required_rule_set_names:
  - "{{ dependency_rule_set_name }}"

## RULE SET
test_rule_set_create_dependency_load_balancer_subnet_ids: "{{ subnet_ids }}"

## HEALTH CHECKER
test_health_checker_create_dependency_load_balancer_subnet_ids: "{{ subnet_ids }}"
health_checker_resource_name: "{{ dependency_backend_set_name }}"

## COMMON
subnet_ids: [ "{{common_subnet_id}}" ]

example_private_key: |
  -----BEGIN PRIVATE KEY-----
  MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQC5xqAzPKLYMavt
  F/2CArEA8WdnSKWrPH2/RBcv6BGoY5gCRVJe8G6BO4QYtOL8Nx6QKiVRG/+gahSN
  59wQVeSaId4TBn9wfhIHVonAJy7HyzK4YjY/bjgh3C43P3xKdOKehe1L6hXairhm
  xfh/B9Peyl40LGEUsDebRJRZ79k53m17ToCZFaVRZmz6J3rib7J1MqINR8/CGRiD
  mk6cBVwapfJmf/nAqJrvKvp8kcMCVKB2ZFpx+xEjZtivr/uRAcboXY6/kFMD+fF9
  yGamD3cOyX0ALgmUyJzQOOv2DHgUwNBk/njrB3V1tOPO/yj8wgOxZtrixQWPvqsj
  gmCgN86XAgMBAAECggEAIVjaINhdktk3t1N7Gf9JrpWmrg+ITXiKSe77CoppwQQ/
  oQi4hHo8G86HI7g0lnl+bvphwHF6LV1dWyungPcqFdDGgDvGXHcE3XRXPbrK1upO
  rHJUsoYiZVGUqi4nLWZV14bK1bmrOpN0Dl6zAHpzOaaxykO9GW2YTbK9vncjUxOf
  rhjU8zakzFuxEl5gP4+7rK7Jtj55yWoeaQvozxtkUMGBlb9OFoY6YeIRlz73sHMj
  s0xbUSDev1EF0V5RmON7qbUvETzw8EjVKS6vf6uoygmyz2nxPHATsBxpGzdRlTdp
  5zPVkqttHViFcKHwWpHrxs/eGFtpVxE4XvpgOtm74QKBgQDqHDpwZbxXGmpzQQ0a
  tSAInSHCte5WDeEi8UcZDxXwbFauzSFzH2UsCQQMk7QNAWC9kSJQ+rWtun+Eel/L
  qfQ+IxKXMZQB1iEERlK+WqqHhmJ2bEJuj9f3YT8zike7HEYbtvMAyYv2lbHbannc
  kbwwW2EY+XVLOinKRgGOVM5PMwKBgQDLJXF7yZkFulMp5roL9kyL5DLa4SNVJbpF
  D+F83KoO4zGH29o4grQjFImQIiExtSlqdX2bJbSig3UZ1f7ozclHX7FQuSjshzRK
  66WEd7f3gQlYuWuiiloOJRJqLOmgwZ6AInk3ZtXwtqE4aqCb92CQCLvsYnIS5HQ/
  pzbZqq8TDQKBgEjtGCsxFdVQTj6u0eUy7NKiGAUuZRr7YdlfrZUZxOzK4sm67qOM
  8RghithcHmc6uabzkewF3RhMEzLyZ+rqe0Hr7PuaHw/fYxOQ0G+pkJt8+ikHmj4U
  ouLVsTld5vBbY194wwPIxMfAY9IEvgc+go/Rt1JvSuFvMdtnqU5sDoRPAoGBAKGF
  J/IQnIadWzpZpVuVfc9MpdK6Z2lwEeaPde3dVal4ow0ulReRdMDft3DOci4fqMpo
  mHIfTLxaYWUlbQSVepAxWb6hOhS2e7GGI5hrx+4WvuO4qggWkPvmJfods7SJvgiL
  YG3Yagp2a0F8Ji9cRX7AMwsES0cSNgvWXBo9R+6RAoGAI/XKpu4ZbXIMUHfTAQJD
  tnZNEHnOGYvlDVsBHwxILsValmf8cUTD3u2uiE/I7PYTIzQXNri/aAxox0CfTqa1
  wRu4gsq9C7uBVrWZ8yFEgtdVpe5zHP2c2YeNucrrkt9roDB+tXlqejuOMMbAXMjF
  lwcREdxkk8nRS6gYToEvIqg=
  -----END PRIVATE KEY-----
example_public_certificate: |
  -----BEGIN CERTIFICATE-----
  MIIDzDCCArSgAwIBAgIJAOG8yZKCzTUeMA0GCSqGSIb3DQEBCwUAMHsxCzAJBgNV
  BAYTAlVTMQswCQYDVQQIDAJXQTEQMA4GA1UEBwwHU2VhdHRsZTENMAsGA1UECgwE
  VGVzdDENMAsGA1UECwwEVGVzdDERMA8GA1UEAwwIdGVzdC5jb20xHDAaBgkqhkiG
  9w0BCQEWDXRlc3RAdGVzdC5jb20wHhcNMjAwNDA2MjMzODEyWhcNMjEwNDA2MjMz
  ODEyWjB7MQswCQYDVQQGEwJVUzELMAkGA1UECAwCV0ExEDAOBgNVBAcMB1NlYXR0
  bGUxDTALBgNVBAoMBFRlc3QxDTALBgNVBAsMBFRlc3QxETAPBgNVBAMMCHRlc3Qu
  Y29tMRwwGgYJKoZIhvcNAQkBFg10ZXN0QHRlc3QuY29tMIIBIjANBgkqhkiG9w0B
  AQEFAAOCAQ8AMIIBCgKCAQEAucagMzyi2DGr7Rf9ggKxAPFnZ0ilqzx9v0QXL+gR
  qGOYAkVSXvBugTuEGLTi/DcekColURv/oGoUjefcEFXkmiHeEwZ/cH4SB1aJwCcu
  x8syuGI2P244IdwuNz98SnTinoXtS+oV2oq4ZsX4fwfT3speNCxhFLA3m0SUWe/Z
  Od5te06AmRWlUWZs+id64m+ydTKiDUfPwhkYg5pOnAVcGqXyZn/5wKia7yr6fJHD
  AlSgdmRacfsRI2bYr6/7kQHG6F2Ov5BTA/nxfchmpg93Dsl9AC4JlMic0Djr9gx4
  FMDQZP546wd1dbTjzv8o/MIDsWba4sUFj76rI4JgoDfOlwIDAQABo1MwUTAdBgNV
  HQ4EFgQUpThPFaFdPtpRqgmT8Sr1xhjHgdYwHwYDVR0jBBgwFoAUpThPFaFdPtpR
  qgmT8Sr1xhjHgdYwDwYDVR0TAQH/BAUwAwEB/zANBgkqhkiG9w0BAQsFAAOCAQEA
  fpkgBsdGB3q0mWM50J37gRST41A9mIMk2v10XT6Bvzm19zkVx+7UapO5DB8pnAxt
  ZOVdnSOdbNRIAZhnk5fVNthz5HVD2pC88l9vXX/GK0bRwXukhONBH86wkAD3TMif
  EbEnmnQPK5pVZgjuEpMF36YcXDYoaaGmbFYTzjLI0s0Qoy8jQIHQbVrfg+aYLE72
  adGq4JnijHpveJQELudLZGxG32s/s7kw3mncoLhwMDPrNf3u+017HSBquq6lK40Z
  J30RtD0XxdyRKetnlH9s+1/ai3oOLF6q21fQkhBPVnkIUoGqwewr+xvnaCrEbIMA
  fcv0xgq9XnUMI7t2okmjvg==
  -----END CERTIFICATE-----
example_ca_certificate: |
  -----BEGIN CERTIFICATE-----
  MIIDzDCCArSgAwIBAgIJAOG8yZKCzTUeMA0GCSqGSIb3DQEBCwUAMHsxCzAJBgNV
  BAYTAlVTMQswCQYDVQQIDAJXQTEQMA4GA1UEBwwHU2VhdHRsZTENMAsGA1UECgwE
  VGVzdDENMAsGA1UECwwEVGVzdDERMA8GA1UEAwwIdGVzdC5jb20xHDAaBgkqhkiG
  9w0BCQEWDXRlc3RAdGVzdC5jb20wHhcNMjAwNDA2MjMzODEyWhcNMjEwNDA2MjMz
  ODEyWjB7MQswCQYDVQQGEwJVUzELMAkGA1UECAwCV0ExEDAOBgNVBAcMB1NlYXR0
  bGUxDTALBgNVBAoMBFRlc3QxDTALBgNVBAsMBFRlc3QxETAPBgNVBAMMCHRlc3Qu
  Y29tMRwwGgYJKoZIhvcNAQkBFg10ZXN0QHRlc3QuY29tMIIBIjANBgkqhkiG9w0B
  AQEFAAOCAQ8AMIIBCgKCAQEAucagMzyi2DGr7Rf9ggKxAPFnZ0ilqzx9v0QXL+gR
  qGOYAkVSXvBugTuEGLTi/DcekColURv/oGoUjefcEFXkmiHeEwZ/cH4SB1aJwCcu
  x8syuGI2P244IdwuNz98SnTinoXtS+oV2oq4ZsX4fwfT3speNCxhFLA3m0SUWe/Z
  Od5te06AmRWlUWZs+id64m+ydTKiDUfPwhkYg5pOnAVcGqXyZn/5wKia7yr6fJHD
  AlSgdmRacfsRI2bYr6/7kQHG6F2Ov5BTA/nxfchmpg93Dsl9AC4JlMic0Djr9gx4
  FMDQZP546wd1dbTjzv8o/MIDsWba4sUFj76rI4JgoDfOlwIDAQABo1MwUTAdBgNV
  HQ4EFgQUpThPFaFdPtpRqgmT8Sr1xhjHgdYwHwYDVR0jBBgwFoAUpThPFaFdPtpR
  qgmT8Sr1xhjHgdYwDwYDVR0TAQH/BAUwAwEB/zANBgkqhkiG9w0BAQsFAAOCAQEA
  fpkgBsdGB3q0mWM50J37gRST41A9mIMk2v10XT6Bvzm19zkVx+7UapO5DB8pnAxt
  ZOVdnSOdbNRIAZhnk5fVNthz5HVD2pC88l9vXX/GK0bRwXukhONBH86wkAD3TMif
  EbEnmnQPK5pVZgjuEpMF36YcXDYoaaGmbFYTzjLI0s0Qoy8jQIHQbVrfg+aYLE72
  adGq4JnijHpveJQELudLZGxG32s/s7kw3mncoLhwMDPrNf3u+017HSBquq6lK40Z
  J30RtD0XxdyRKetnlH9s+1/ai3oOLF6q21fQkhBPVnkIUoGqwewr+xvnaCrEbIMA
  fcv0xgq9XnUMI7t2okmjvg==
  -----END CERTIFICATE-----
