# `oci_user` related tests

# Clean up existing user, if any
# ============================================================
- name: Find any existing users with same name
  oci_identity_user_facts:
      compartment_id: "{{tenancy_ocid}}"
      name: "{{test_user_name}}"
  register: result

- name: Delete all users, if any
  oci_identity_user:
    id: "{{item.id}}"
    state: 'absent'
  with_items: "{{result.users}}"
  when: "result.users | length > 0"
  ignore_errors: yes

- block:
  # ============================================================
  - name: Create new group in OCI without any user association
    oci_identity_group:
      name: "{{identity_user_group_name}}"
      description: 'Group for Testing Ansible Module'
      compartment_id: "{{tenancy_ocid}}"
      state: 'present'
    register: result

  - set_fact:
      test_group_id: "{{result.group.id}}"

  - name: Create User with ui password,freeform and defined tags and a single group association
    oci_identity_user:
      compartment_id: "{{tenancy_ocid}}"
      name: "{{test_user_name}}"
      description: "{{ test_user_description }}"
      freeform_tags: "{{ user_freeform_tags }}"
      defined_tags: "{{ user_defined_tags }}"
      state: 'present'
    register: create_user_result

  - set_fact:
      test_user_id: "{{create_user_result.user.id}}"

  - name: Associate user with a group
    oci_identity_user_group_membership:
      compartment_id: "{{tenancy_ocid}}"
      user_id: "{{test_user_id}}"
      group_id: "{{test_group_id}}"
      state: 'present'
    register: create_user_group_membership_result

  - name: Collect the group memberships information of the user
    oci_identity_user_group_membership_facts:
      compartment_id: "{{tenancy_ocid}}"
      user_id: "{{test_user_id}}"
    register: group_memberships_result

  - set_fact:
      group_memberships: "{{group_memberships_result.user_group_memberships}}"

  - name: Assert that the user was changed and has one group membership
    assert:
      that:
        - create_user_result.changed == True
        - create_user_group_membership_result.changed == True
        - group_memberships[0].group_id == test_group_id
  # ============================================================
  - name: Update freeform tags of the User 
    oci_identity_user:
      id: "{{test_user_id}}"
      freeform_tags: "{{ updated_user_freeform_tags }}"
      state: 'present'
    register: result

  - name: Assert that freeform tag was updated
    assert:
      that:
        - result.changed == True
        - result.user.freeform_tags.user_type == 'employee'
  # ============================================================
  - name: Update defined tags of the User 
    oci_identity_user:
        id: "{{test_user_id}}"
        defined_tags: "{{ updated_user_defined_tags }}"
        state: 'present'
    register: result

  - name: Assert that defined tag was updated
    assert:
      that:
        - result.changed == True
        - result.user.defined_tags.ansible_tag_namespace_integration_test_1.ansible_tag_1 == 'office'
  
  # ============================================================
  - name: List a specific user
    oci_identity_user_facts:
        user_id: "{{test_user_id}}"
    register: result

  - name: Assert that the specified user's facts were returned
    assert:
           that:
              - result.users[0].name == "{{test_user_name}}"
  # ============================================================
  - name: List all existing users
    oci_identity_user_facts:
      compartment_id: "{{tenancy_ocid}}"
    register: result

  - set_fact:
        listed_user_name: "{{item.name}}"
    with_items: "{{result.users}}"
    when: item.name == test_user_name

  - name: Assert that the test user is included in the returned facts
    assert:
          that:
              - listed_user_name == "{{test_user_name}}"
  # ============================================================
  # clean up
  - name: Get all memberships in group
    oci_identity_user_group_membership_facts:
        group_id: "{{test_group_id}}"
        compartment_id: "{{tenancy_ocid}}"
    register: result

  - name: Remove all users from test group
    oci_identity_user_group_membership:
        id: "{{item.id}}"
        state: 'absent'
    with_items: "{{result.user_group_memberships}}"
    register: result

  - name: Delete test user
    oci_identity_user:
      id: "{{test_user_id}}"
      state: 'absent'
    register: result

  - name: Delete group
    oci_identity_group:
        id: "{{test_group_id}}"
        state: 'absent'
    register: result

  rescue:
    - name: Get all memberships in group
      oci_identity_user_group_membership_facts:
          group_id: "{{test_group_id}}"
          compartment_id: "{{tenancy_ocid}}"
      register: result
      ignore_errors: yes

    - name: Remove all users from test group
      oci_identity_user_group_membership:
          id: "{{item.id}}"
          state: 'absent'
      with_items: "{{result.user_group_memberships}}"
      register: result
      ignore_errors: yes

    - name: Delete test user
      oci_identity_user:
        id: "{{test_user_id}}"
        state: 'absent'
      ignore_errors: yes

    - name: Delete group
      oci_identity_group:
          id: "{{test_group_id}}"
          state: 'absent'
      register: result
      ignore_errors: yes
    
    - fail:
        msg: "{{ ansible_failed_result }}"