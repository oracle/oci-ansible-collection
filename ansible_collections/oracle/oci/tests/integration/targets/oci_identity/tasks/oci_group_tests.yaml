# tests for `oci_group`

- name: List all users
  oci_identity_user_facts:
    compartment_id: "{{tenancy_ocid}}"
  register: result

- name: Delete existing test users
  oci_identity_user:
    id: "{{ item.id }}"
    state: absent
  with_items: "{{ result.users }}"
  when: item.name.find(random_suffix_1024) != -1
  ignore_errors: yes

- name: List all OCI groups
  oci_identity_group_facts:
    compartment_id: "{{tenancy_ocid}}"
  register: result

- name: Delete existing test group
  oci_identity_group:
    id: "{{ item.id }}"
    state: absent
  with_items: "{{ result.groups }}"
  when: item.name.find(random_suffix_1024) != -1
  ignore_errors: yes

- block:
  # ============================================================
  - name: Create First User for Group Test Fixture
    oci_identity_user:
      compartment_id: "{{tenancy_ocid}}"
      name: "{{test_user_name}}"
      description: 'Ansible First User'
      state: 'present'
    register: result

  - set_fact:
      test_user_id: "{{result.user.id}}"

  - name: Assert that the first user was created
    assert:
          that:
              - result.changed == True
  # ============================================================

  - name: Create Second User for Group Test Fixture
    oci_identity_user:
      compartment_id: "{{tenancy_ocid}}"
      name: "{{additional_test_user_name}}"
      description: 'Ansible Second User'
      state: 'present'
    register: result
    
  - set_fact:
      additional_test_user_id: "{{result.user.id}}"

  - name: Assert that the second user was created
    assert:
          that:
              - result.changed == True
  # ============================================================
  - name: Create new group in OCI with freeform and defined tags without any user association
    oci_identity_group:
      compartment_id: "{{tenancy_ocid}}"
      name: "{{identity_user_group_name}}"
      description: 'Group for Testing Ansible Module'
      freeform_tags: "{{ group_freeform_tags }}"
      defined_tags: "{{ group_defined_tags }}"
      state: 'present'
    register: result

  - set_fact:
      test_group_id: "{{result.group.id}}"

  - name: Assert that changed is true
    vars:
        res: "{{result.changed}}"
    assert:
          that:
              - result.changed == True
  # ============================================================
  - name: Update group in OCI with freeform tags
    oci_identity_group:
      id: "{{test_group_id}}"
      freeform_tags: "{{ updated_group_freeform_tags }}"
      state: 'present'
    register: result

  - name: Assert that freeform tags was updated
    vars:
        res: "{{result.changed}}"
    assert:
      that:
          - result.changed == True
          - result.group.freeform_tags.member_type == 'developer'
  # ============================================================
  - name: Update group in OCI with description changed
    oci_identity_group:
      group_id: "{{test_group_id}}"
      description: "{{identity_updated_group_description}}"
      state: 'present'
    register: result

  - name: Assert that changed is true
    vars:
        res: "{{result.changed}}"
    assert:
      that:
          - result.changed == True
  # ============================================================
  - name: Update group in OCI with defined tags
    oci_identity_group:
      id: "{{test_group_id}}"
      defined_tags: "{{ updated_group_defined_tags }}"
      state: 'present'
    register: result

  - name: Assert that defined tags was updated
    vars:
        res: "{{result.changed}}"
    assert:
      that:
          - result.changed == True
          - result.group.defined_tags.ansible_tag_namespace_integration_test_1.ansible_tag_1 == 'engineering'
  # ============================================================
  - name: Associate user with a group
    oci_identity_user_group_membership:
      compartment_id: "{{tenancy_ocid}}"
      user_id: "{{test_user_id}}"
      group_id: "{{test_group_id}}"
      state: 'present'
    register: result

  - name: Assert that changed is true
    vars:
        res: "{{result.changed}}"
    assert:
          that:
              - result.changed == True
  # ============================================================
  - name: List a specific OCI group facts
    oci_identity_group_facts:
        group_id: "{{test_group_id}}"
    register: result
    
  - name: Assert that specified group is listed
    assert:
      that:
        - result.groups[0].name == identity_user_group_name
  # ============================================================
  - name: List all OCI group facts
    oci_identity_group_facts:
      compartment_id: "{{tenancy_ocid}}"
    register: result
    
  - set_fact:
        listed_group_name: "{{item.name}}"
    with_items: "{{result.groups}}"
    when: item.name == identity_user_group_name
    
  - name: Assert that valid group is listed
    assert:
      that:
        - listed_group_name == identity_user_group_name
  # ============================================================
  # clean up
  - name: Get all memberships in group
    oci_identity_user_group_membership_facts:
        group_id: "{{test_group_id}}"
        compartment_id: "{{tenancy_ocid}}"
    register: result

  - name: Remove all users from test group
    oci_identity_user_group_membership:
        id: "{{item.id}}"
        state: 'absent'
    with_items: "{{result.user_group_memberships}}"
    register: result

  - name: Delete test user
    oci_identity_user:
      id: "{{test_user_id}}"
      state: 'absent'
    register: result

  - name: Delete additional test user
    oci_identity_user:
      id: "{{additional_test_user_id}}"
      state: 'absent'
    register: result

  - name: Delete group
    oci_identity_group:
        id: "{{test_group_id}}"
        state: 'absent'
    register: result
  
  - name: Assert that changed is true
    assert:
      that:
          - result.changed == True

  rescue:
    - name: Get all memberships in group
      oci_identity_user_group_membership_facts:
          group_id: "{{test_group_id}}"
          compartment_id: "{{tenancy_ocid}}"
      register: result
      ignore_errors: yes

    - name: Remove all users from test group
      oci_identity_user_group_membership:
          id: "{{item.id}}"
          state: 'absent'
      with_items: "{{result.user_group_memberships}}"
      register: result
      ignore_errors: yes

    - name: Delete test user
      oci_identity_user:
        id: "{{test_user_id}}"
        state: 'absent'
      ignore_errors: yes

    - name: Delete additional test user
      oci_identity_user:
        id: "{{additional_test_user_id}}"
        state: 'absent'
      register: result
      ignore_errors: yes

    - name: Delete group
      oci_identity_group:
          id: "{{test_group_id}}"
          state: 'absent'
      register: result
      ignore_errors: yes

    - fail:
        msg: "{{ ansible_failed_result }}"