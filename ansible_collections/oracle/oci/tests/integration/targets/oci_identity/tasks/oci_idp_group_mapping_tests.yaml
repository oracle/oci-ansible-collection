# tests for `oci_identity_idp_group_mapping` and `oci_identity_idp_group_mapping_facts`

# cleanup before execution
# ===========================================================================================
- name: get all the identity providers
  oci_identity_provider_facts:
    compartment_id: "{{ tenancy_ocid }}"
    protocol: "{{ test_identity_provider_protocol }}"
  register: list_for_delete_identity_providers_result

- name: delete the identity providers
  oci_identity_provider:
    identity_provider_id: "{{ item.id }}"
    state: absent
  when: item.name is search(random_suffix_1024)
  loop: "{{ list_for_delete_identity_providers_result.identity_providers }}"
  ignore_errors: yes

# this was an issue with the existing tests but they were manually triggered
# so we rarely hit it
- name: Wait for identity provider deletion to propagate
  pause:
    seconds: 3

# ============================================================
- name: Create new group in OCI
  oci_identity_group:
      compartment_id: "{{tenancy_ocid}}"
      name: "{{identity_user_group_name}}"
      description: 'Group for Testing idp_group_mapping Ansible Module'
      state: 'present'
  register: result

- set_fact:
     test_group_id: "{{result.group.id}}"
- block:
# ============================================================
  - name: Create an identity provider
    oci_identity_provider:
      compartment_id: "{{ tenancy_ocid }}"
      description: "{{ test_identity_provider_description }}"
      freeform_attributes: "{{ test_identity_provider_freeform_attributes }}"
      freeform_tags: "{{ test_identity_provider_freeform_tags }}"
      metadata: "{{ lookup('file', test_identity_provider_metadata_xml_file) }}"
      name: "{{ test_identity_provider_name }}"
      product_type: "{{ test_identity_provider_product_type }}"
      protocol: "{{ test_identity_provider_protocol }}"
    register: create_identity_provider_result

  - name: Assert that the identity provider is created
    assert:
      that:
        - create_identity_provider_result.changed == True
        - create_identity_provider_result.identity_provider.compartment_id == tenancy_ocid

  - set_fact:
      test_identity_provider_id: "{{ create_identity_provider_result.identity_provider.id }}"

# ============================================================

  - name: Create IdP group mapping
    oci_identity_idp_group_mapping:
      identity_provider_id: "{{test_identity_provider_id}}"
      group_id: "{{test_group_id}}"
      idp_group_name: "{{test_idp_group_name}}"

    register: result
  - name: Assert that idp-group-mapping is created
    assert:
      that:
          - result.changed == True
          - result.idp_group_mapping.compartment_id == tenancy_ocid
  - debug: msg="{{result}}"
  - name: Register ID of newly created IdP group mapping
    set_fact:
      test_idp_group_mapping_id: "{{result.idp_group_mapping.id}}"
# ============================================================
  - name: Verify create IdP group mapping idempotence
    oci_identity_idp_group_mapping:
      identity_provider_id: "{{test_identity_provider_id}}"
      group_id: "{{test_group_id}}"
      idp_group_name: "{{test_idp_group_name}}"

    register: result
  - name: Assert that idp-group-mapping is created
    assert:
      that:
          - result.changed == False
          - result.idp_group_mapping.compartment_id == tenancy_ocid
  - debug: msg="{{result}}"
# ============================================================
  - name: Update IdP group mapping
    oci_identity_idp_group_mapping:
      identity_provider_id: "{{test_identity_provider_id}}"
      mapping_id: "{{result.idp_group_mapping.id}}"
      idp_group_name: "{{test_idp_group_name_updated}}"
      group_id: "{{result.idp_group_mapping.group_id}}"

    register: result
  - name: Assert that idp-group-mapping is updated
    assert:
      that:
          - result.changed == True
          - result.idp_group_mapping.compartment_id == tenancy_ocid
          - result.idp_group_mapping.idp_group_name == test_idp_group_name_updated
  - debug: msg="{{result}}"
# ============================================================
  - name: Get IdP group mappings
    oci_identity_idp_group_mapping_facts:
      identity_provider_id: "{{test_identity_provider_id}}"
    register: result
  - name: Assert that idp-group-mappings are returned
    assert:
      that:
          - result.changed == False
          - result.idp_group_mappings | length > 0
          - result.idp_group_mappings[0].compartment_id == tenancy_ocid
  - debug: msg="{{result}}"
# ============================================================
  - name: Get single IdP group mapping
    oci_identity_idp_group_mapping_facts:
      identity_provider_id: "{{test_identity_provider_id}}"
      mapping_id: "{{test_idp_group_mapping_id}}"
    register: result
  - name: Assert that idp-group-mappings are returned
    assert:
      that:
          - result.changed == False
          - result.idp_group_mappings | length > 0
          - result.idp_group_mappings[0].id == test_idp_group_mapping_id
# ============================================================
  - name: Delete IdP group mapping
    oci_identity_idp_group_mapping:
      identity_provider_id: "{{test_identity_provider_id}}"
      mapping_id: "{{test_idp_group_mapping_id}}"
      state: absent
    register: result
  - name: Assert that idp-group-mapping is deleted
    assert:
      that:
          - result.changed == True
          - result.idp_group_mapping.compartment_id == tenancy_ocid
  - debug: msg="{{result}}"
# ============================================================
  - name: Delete IdP
    oci_identity_provider:
      identity_provider_id: "{{test_identity_provider_id}}"
      state: absent
    register: result
  - name: Assert that idp is deleted
    assert:
      that:
          - result.changed == True
          - result.identity_provider.compartment_id == tenancy_ocid
  - debug: msg="{{result}}"
# ============================================================
  rescue:
    - name: Delete IdP group mapping
      oci_identity_idp_group_mapping:
        identity_provider_id: "{{test_identity_provider_id}}"
        mapping_id: "{{test_idp_group_mapping_id}}"
        state: absent
      register: result
      ignore_errors: yes

    - name: Delete IdP
      oci_identity_provider:
        identity_provider_id: "{{test_identity_provider_id}}"
        state: absent
      ignore_errors: yes
    
    - fail:
          msg: "{{ ansible_failed_result }}"
# ============================================================
  always:
    - name: Delete group in OCI with associated users without force
      oci_identity_group:
        id: "{{test_group_id}}"
        state: 'absent'
      register: result
# ============================================================
