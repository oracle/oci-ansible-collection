# =====================Integration Tests for oci_policy & oci_policy_facts==========================================

# Before test run, ensure all test resources are deleted, so
# that we can start with a clean slate.

- oci_identity_policy_facts:
      compartment_id: "{{ test_compartment_ocid }}"
  register: result
- oci_identity_policy:
    id: "{{ item['id'] }}"
    state: absent
  with_items: "{{ result.policies }}"
  when: item.name.find(random_suffix_1024) != -1
  ignore_errors: yes

- name: List all OCI groups
  oci_identity_group_facts:
    compartment_id: "{{tenancy_ocid}}"
  register: result

- name: Delete existing test group
  oci_identity_group:
    id: "{{ item.id }}"
    state: absent
  with_items: "{{ result.groups }}"
  when: item.name.find(random_suffix_1024) != -1
  ignore_errors: yes

# ============================================================

- name: Get a non-home region
  oci_identity_region_subscription_facts:
    tenancy_id: "{{ tenancy_ocid }}"
  register: result

- set_fact:
    non_home_region: "{{ item.region_name }}"
  with_items: "{{ result.region_subscriptions }}"
  when: item.is_home_region == False

# ============================================================
- name: Create group for policy testing
  oci_identity_group:
    compartment_id: "{{tenancy_ocid}}"
    name: "{{identity_user_group_name}}"
    description: 'Group for Testing Ansible Module'
    state: 'present'
  register: result

- set_fact:
     test_group_id: "{{result.group.id}}"

- name: Assert that changed is true
  vars:
      res: "{{result.changed}}"
  assert:
         that:
            - result.changed == True
# ============================================================
- name: Create a policy in non-home region to check for region redirection
  oci_identity_policy:
    name: "{{test_policy_name}}"
    compartment_id: "{{test_compartment_ocid}}"
    description: "{{test_policy_description}}"
    statements: "Allow group {{identity_user_group_name}} to manage users in compartment {{test_compartment_name}}"
    region: "{{ non_home_region }}"
  register: result

- set_fact:
    test_policy_ocid: "{{ result.policy.id }}"

- name: Assert that changed is true
  assert:
    that:
      - result.changed == True
      - result.policy['name'] == "{{test_policy_name}}"
      - result.policy['description'] == "{{test_policy_description}}"
      - result.policy.statements[0] in "Allow group {{identity_user_group_name}} to manage users in compartment {{test_compartment_name}}"

# ==================================================================================================================

- name: Rerun play to check idempotency
  oci_identity_policy:
    name: "{{test_policy_name}}"
    compartment_id: "{{test_compartment_ocid}}"
    description: "{{test_policy_description}}"
    statements: "Allow group {{identity_user_group_name}} to manage users in compartment {{test_compartment_name}}"
    region: "{{ non_home_region }}"
  register: result

- name: Assert that changed is false and previously created policy is returned
  assert:
    that:
      - result.changed == False
      - result.policy.id == test_policy_ocid

# ==================================================================================================================

- name: Create a policy file
  tempfile:
  register: policyfile

- set_fact:
    contents: "Allow group {{identity_user_group_name}} to manage users in compartment {{test_compartment_name}}\n
    Allow group Administrators to manage all-resources in compartment {{test_compartment_name}}"

- name: Put policy statements in the policy file
  copy:
    content: "{{contents}}"
    dest: "{{ policyfile.path }}"

- name: Update a policy
  oci_identity_policy:
    id: "{{ test_policy_ocid }}"
    statements: "{{ lookup('file', policyfile.path).splitlines() }}"
    freeform_tags:
      type: admin
  register: result

- name: Assert that changed is true
  assert:
    that:
      - result.changed == True
      - result.policy['name'] == "{{test_policy_name}}"
      - result.policy.statements[0] in contents
      - result.policy.statements[1] in contents
      - result.policy['description'] == test_policy_description
      - result.policy['freeform_tags']['type'] == "admin"

# ==================================================================================================================

- name: Idempotency check-reattempt updating policy
  oci_identity_policy:
    id: "{{ test_policy_ocid }}"
    statements: "{{ lookup('file', policyfile.path).splitlines() }}"
  register: result

- name: Assert that changed is false
  assert:
    that:
      - result.changed == False
      - result.policy['name'] == "{{test_policy_name}}"
      - result.policy.statements[0] in contents
      - result.policy.statements[1] in contents
      - result.policy['description'] == test_policy_description
      - result.policy['freeform_tags']['type'] == "admin"

# ==================================================================================================================

- name: Get details of all the policies attached to a compartment
  oci_identity_policy_facts:
    compartment_id: "{{test_compartment_ocid}}"
  register: result

- set_fact:
    policy_name: "{{item.name}}"
  with_items: "{{result.policies}}"
  when: item.name == test_policy_name

- name: Assert that test_policy_name is present in the list
  assert:
    that:
      - policy_name == "{{test_policy_name}}"

# ==================================================================================================================

- name: Get details of a policy
  oci_identity_policy_facts:
    id: "{{test_policy_ocid}}"
  register: result

- name: Contents
  debug:
    msg: "Contents is {{contents}} and policy is {{result.policies[0].statements[0]}}"
    

- name: Assert that the details of policy match
  assert:
    that:
      - result.policies[0].description == test_policy_description
      - result.policies[0].statements[0] in contents
      - result.policies[0].statements[1] in contents

# ==================================================================================================================

- name: Delete a policy
  oci_identity_policy:
    id: "{{test_policy_ocid}}"
    state: 'absent'
  register: result

- name: Assert that changed is true
  assert:
    that:
      - result.changed == True
      - result.policy.id == test_policy_ocid

# ==================================================================================================================

- name: Check idempotency of policy delete operation
  oci_identity_policy:
    id: "{{test_policy_ocid}}"
    state: 'absent'
  register: result
- name: Assert that changed is false
  assert:
    that:
      - result.changed == False

# ==================================================================================================================

- name: Delete policy file
  file:
    state: absent
    path: "{{ policyfile.path }}"

# ==================================================================================================================
- name: Delete group
  oci_identity_group:
            id: "{{test_group_id}}"
            state: 'absent'
  register: result

- name: Assert that changed is true
  vars:
      res: "{{result.changed}}"
  assert:
         that:
            - result.changed == True
