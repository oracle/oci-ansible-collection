# Tests for dynamic groups
- name: Cleanup existing test dynamic groups
  oci_identity_dynamic_group_facts:
    compartment_id: "{{ tenancy_ocid }}"
  register: result

- name: Delete retrieved test dynamic groups
  oci_identity_dynamic_group:
    id: "{{ item['id'] }}"
    state: absent
  with_items: "{{ result.dynamic_groups }}"
  when: item.name.find(random_suffix_1024) != -1
  ignore_errors: yes

- name: Create a dynamic group
  oci_identity_dynamic_group:
    compartment_id: "{{ tenancy_ocid }}"
    matching_rule: "{{ dynamic_group_matching_rule }}"
    name: "{{ dynamic_group_name }}"
    description: "{{ dynamic_group_description }}"
    defined_tags: "{{ test_default_defined_tags }}"
    freeform_tags: "{{ test_default_freeform_tags }}"
  register: result

- set_fact:
    test_dg_id: "{{ result.dynamic_group.id }}"

- name: Assert dynamic group is created
  assert:
    that:
      - result.changed == True
      - result.dynamic_group.compartment_id == tenancy_ocid
      - result.dynamic_group.matching_rule == dynamic_group_matching_rule
      - result.dynamic_group.name == dynamic_group_name
      - result.dynamic_group.description == dynamic_group_description
      - result.dynamic_group.freeform_tags == test_default_freeform_tags
      - result.dynamic_group.defined_tags == test_default_defined_tags

# ================================================================================

- name: Attempt to recreate the dynamic group
  oci_identity_dynamic_group:
    compartment_id: "{{ tenancy_ocid }}"
    matching_rule: "{{ dynamic_group_matching_rule }}"
    name: "{{ dynamic_group_name }}"
    description: "{{ dynamic_group_description }}"
    defined_tags: "{{ test_default_defined_tags }}"
    freeform_tags: "{{ test_default_freeform_tags }}"
  register: result

- name: Assert dynamic group creation is idempotent and changed is False
  assert:
    that:
      - result.changed == False
      - result.dynamic_group.id == test_dg_id

# ================================================================================

- name: Update the dynamic group's matching rule and tags
  oci_identity_dynamic_group:
    dynamic_group_id: "{{ test_dg_id }}"
    matching_rule: "{{ updated_dynamic_group_matching_rule }}"
    description: "{{ updated_dynamic_group_description }}"
    defined_tags: "{{ test_default_updated_defined_tags }}"
    freeform_tags: "{{ test_default_updated_freeform_tags }}"
  register: result

- name: Assert dynamic group is updated
  assert:
    that:
      - result.changed == True
      - result.dynamic_group.matching_rule == updated_dynamic_group_matching_rule
      - result.dynamic_group.description == updated_dynamic_group_description
      - result.dynamic_group.lifecycle_state == "ACTIVE"
      - result.dynamic_group.freeform_tags == test_default_updated_freeform_tags
      - result.dynamic_group.defined_tags == test_default_updated_defined_tags

# ================================================================================

- name: Reattempt to update the dynamic group's matching rule and tags
  oci_identity_dynamic_group:
    dynamic_group_id: "{{ test_dg_id }}"
    matching_rule: "{{ updated_dynamic_group_matching_rule }}"
    defined_tags: "{{ test_default_updated_defined_tags }}"
    freeform_tags: "{{ test_default_updated_freeform_tags }}"
  register: result

- name: Assert update dynamic group operation is idempotent
  assert:
    that:
      - result.changed == False
      - result.dynamic_group.id == test_dg_id
      - result.dynamic_group.lifecycle_state == "ACTIVE"
      - result.dynamic_group.freeform_tags == test_default_updated_freeform_tags
      - result.dynamic_group.defined_tags == test_default_updated_defined_tags


# ================================================================================

- name: Get details of a specific dynamic group
  oci_identity_dynamic_group_facts:
    id: "{{ test_dg_id }}"
  register: result

- name: Assert that information of test dynamic group is retrieved
  assert:
    that:
      - result.changed == False
      - result.dynamic_groups[0].id == test_dg_id

# ================================================================================

- name: Get details of all the dynamic groups
  oci_identity_dynamic_group_facts:
    compartment_id: "{{ tenancy_ocid }}"
  register: result

- set_fact:
    retrieved_dg: "{{ item }}"
  when: item.id == test_dg_id
  with_items: "{{ result.dynamic_groups }}"

- name: Assert that test dynamic group is retrieved
  assert:
    that:
      - retrieved_dg.id == test_dg_id

# ================================================================================

- name: Delete a dynamic group
  oci_identity_dynamic_group:
    id: "{{ test_dg_id }}"
    state: absent
  register: result

- name: Assert dynamic group is deleted
  assert:
    that:
      - result.changed == True
      - result.dynamic_group.id == test_dg_id

# ================================================================================

- name: Reattempt deleting the dynamic group
  oci_identity_dynamic_group:
    id: "{{ test_dg_id }}"
    state: absent
  register: result

- name: Assert dynamic group deletion is idempotent and changed is False
  assert:
    that:
      - result.changed == False

# ================================================================================
