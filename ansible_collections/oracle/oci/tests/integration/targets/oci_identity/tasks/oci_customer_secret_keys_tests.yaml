# tests for `oci_customer_secret_key` and `oci_customer_secret_key_facts`
- name: Create a test User
  oci_identity_user:
      name: "{{ test_user_name }}"
      description: "{{ test_user_description }}"
      compartment_id: "{{ tenancy_ocid }}"
      state: 'present'
  register: result
- set_fact:
     customer_secret_key_test_user_ocid: "{{ result.user.id }}"
- name:
  debug:
    msg: "User created for test {{ customer_secret_key_test_user_ocid }}"


- name: Create a Customer Secret Key
  oci_identity_customer_secret_key:
    user_id: "{{ customer_secret_key_test_user_ocid }}"
    name: "{{ customer_secret_key_1_name }}"
  register: result
- name:
  debug:
    msg: "Customer secret key created {{ result }}"
- set_fact:
     customer_secret_key_1_ocid: "{{ result.customer_secret_key.id }}"
- name: Assert that Customer Secret Key was created and is active, and the generated secret key is returned during creation
  assert:
    that:
        - result.changed == True
        - result.customer_secret_key.lifecycle_state == "ACTIVE"
        - (result.customer_secret_key.key is defined) and (result.customer_secret_key.key is not none) and (result.customer_secret_key.key | trim != "")

- name: Create a Customer Secret Key - idempotency check
  oci_identity_customer_secret_key:
    user_id: "{{ customer_secret_key_test_user_ocid }}"
    name: "{{ customer_secret_key_1_name }}"
  register: result
- set_fact:
     idempotent_customer_secret_key_ocid: "{{ result.customer_secret_key.id }}"
- name: Assert that Customer Secret Key was created and is active, and the generated secret key is returned during creation
  assert:
    that:
        - result.changed == False
        - result.customer_secret_key.lifecycle_state == "ACTIVE"
        - idempotent_customer_secret_key_ocid == customer_secret_key_1_ocid

- name: Get Customer Secret Key facts about user
  oci_identity_customer_secret_key_facts:
    user_id: "{{ customer_secret_key_test_user_ocid }}"
  register: result
- name: Print customer secret key returned by facts
  debug:
    msg: "Customer secret key returned by facts {{ result }}"
- name: Assert that Customer Secret Key facts were retrieved
  assert:
    that:
        - result.changed == False
        - result.customer_secret_keys[0].lifecycle_state == "ACTIVE"
        - result.customer_secret_keys[0].id is defined

- name: Update name of Customer Secret Key
  oci_identity_customer_secret_key:
    # Only users who have administrator privileges can update customer
    # secret keys of a different user - so run all update operations
    # as a user in the admin group
    api_user: "{{ test_user_in_admin_group_ocid }}"
    user_id: "{{ customer_secret_key_test_user_ocid }}"
    id: "{{ customer_secret_key_1_ocid }}"
    name: "{{ customer_secret_key_1_updated_name }}"
  register: result
- name: Assert that Customer Secret Key was updated with new name and remains active
  assert:
    that:
        - result.changed == True
        - result.customer_secret_key.lifecycle_state == "ACTIVE"
        - result.customer_secret_key.display_name == customer_secret_key_1_updated_name

- name: Update name of Customer Secret Key, idempotency test
  oci_identity_customer_secret_key:
    api_user: "{{ test_user_in_admin_group_ocid }}"
    user_id: "{{ customer_secret_key_test_user_ocid }}"
    id: "{{ customer_secret_key_1_ocid }}"
    name: "{{ customer_secret_key_1_updated_name }}"
  register: result
- name: Assert that Customer Secret Key was not changed
  assert:
    that:
        - result.changed == False
        - result.customer_secret_key.lifecycle_state == "ACTIVE"
        - result.customer_secret_key.display_name == customer_secret_key_1_updated_name

- name: Delete the Customer Secret Key
  oci_identity_customer_secret_key:
    user_id: "{{ customer_secret_key_test_user_ocid }}"
    id: "{{ customer_secret_key_1_ocid }}"
    state: "absent"
  register: result
- name: Assert that Customer Secret Key was deleted
  assert:
    that:
        - result.changed == True
        - result.customer_secret_key.lifecycle_state == "DELETED"

- name: Delete the User
  oci_identity_user:
    id: "{{ customer_secret_key_test_user_ocid }}"
    state: 'absent'
  register: result
