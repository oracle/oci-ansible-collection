---

- block:

    - name: Create a test admin user
      oci_identity_user:
        compartment_id: "{{ tenancy_ocid }}"
        name: "{{test_admin_user_name}}"
        description: 'Ansible Test Admin User'
        state: 'present'
      register: result
    - set_fact:
        test_admin_user_ocid: "{{result.user['id']}}"
    - debug:
        msg: "Created a test admin user {{result}}"

    - name: List group within root tenancy
      oci_identity_group_facts:
        compartment_id: "{{ tenancy_ocid }}"
      register: group_list_result
    - debug:
        msg: "Group List {{group_list_result.groups}}"
    - set_fact:
        admin_user_group_id: "{{ item['id'] }}"
      with_items: "{{ group_list_result.groups }}"
      when: item['name'] == "{{ admin_user_group_name }}"

    - name: Associate user with a group
      oci_identity_user_group_membership:
        compartment_id: "{{ tenancy_ocid }}"
        user_id: "{{test_admin_user_ocid}}"
        group_id: "{{admin_user_group_id}}"
        state: 'present'
      register: create_user_group_membership_result
    - set_fact:
        user_group_membership_resource_id: "{{ create_user_group_membership_result.user_group_membership.id }}"

    - name: create temporary directory to house API key pair for the test admin user
      tempfile:
        state: directory
        suffix: cert
      register: result
    - set_fact:
        test_admin_user_creds_path: "{{ result.path }}"

    - name: Create a private key for the test admin user
      openssl_privatekey:
        path:  "{{ test_admin_user_api_key_private_key_path }}"
        size: 2048
        cipher: aes128
        passphrase: "{{test_admin_user_api_key_passphrase}}"
    - name: Create a public key from that temp private key
      openssl_publickey:
        path: "{{ test_admin_user_api_key_pub_key_path }}"
        privatekey_path: "{{ test_admin_user_api_key_private_key_path }}"
        privatekey_passphrase: "{{test_admin_user_api_key_passphrase}}"
        force: True
      register: result

    - name: Upload an API Signing Key for the test admin user
      oci_identity_api_key:
        user_id: "{{ test_admin_user_ocid }}"
        key: "{{ lookup('file', test_admin_user_api_key_pub_key_path) }}"
      register: result
    - set_fact:
        test_admin_user_api_signing_key_ocid: "{{ result.api_key.key_id }}"
        test_admin_user_api_signing_key_fingerprint: "{{ result.api_key.fingerprint }}"

    # sometimes using the user just after creating are causing authentication issues.
    # To avoid such issues, pause for a minute and then run the tests.
    - pause:
        minutes: 1

    - name: List oci audit events
      oci_audit_event_facts:
        compartment_id: "{{ test_compartment_ocid }}"
        start_time: "{{ audit_events_start_time }}"
        end_time: "{{ audit_events_end_time }}"
        api_user: "{{test_admin_user_ocid}}"
        api_user_fingerprint: "{{test_admin_user_api_signing_key_fingerprint}}"
        api_user_key_file: "{{test_admin_user_api_key_private_key_path}}"
        api_user_key_pass_phrase: "{{test_admin_user_api_key_passphrase}}"
      register: audit_events_result

    - debug:
        msg: "{{ audit_events_result.audit_events | length }}"

    - name: Get audit configuration facts
      oci_audit_configuration_facts:
        compartment_id: "{{ tenancy_ocid }}"
        api_user: "{{test_admin_user_ocid}}"
        api_user_fingerprint: "{{test_admin_user_api_signing_key_fingerprint}}"
        api_user_key_file: "{{test_admin_user_api_key_private_key_path}}"
        api_user_key_pass_phrase: "{{test_admin_user_api_key_passphrase}}"
      register: configuration_result

    - debug:
        msg: "{{ configuration_result }}"

    - name: Update retention period - check mode
      oci_audit_configuration:
        compartment_id: "{{ tenancy_ocid }}"
        retention_period_days: "{{ updated_retention_period_days }}"
        api_user: "{{test_admin_user_ocid}}"
        api_user_fingerprint: "{{test_admin_user_api_signing_key_fingerprint}}"
        api_user_key_file: "{{test_admin_user_api_key_private_key_path}}"
        api_user_key_pass_phrase: "{{test_admin_user_api_key_passphrase}}"
      register: update_configuration_check_mode_result
      check_mode: yes

    - name: Assert that changed is True
      assert:
        that:
          - update_configuration_check_mode_result.changed == True

#    - name: Update retention period
#      oci_audit_configuration:
#        compartment_id: "{{ tenancy_ocid }}"
#        retention_period_days: "{{ updated_retention_period_days }}"
#        api_user: "{{test_admin_user_ocid}}"
#        api_user_fingerprint: "{{test_admin_user_api_signing_key_fingerprint}}"
#        api_user_key_file: "{{test_admin_user_api_key_private_key_path}}"
#        api_user_key_pass_phrase: "{{test_admin_user_api_key_passphrase}}"
#      register: update_configuration_result
#
#    - name: Assert that the configuration is updated
#      assert:
#        that:
#          - update_configuration_result.changed == True
#          - update_configuration_result.configuration.retention_period_days == updated_retention_period_days
#
#    - name: Update retention period - idempotence
#      oci_audit_configuration:
#        compartment_id: "{{ tenancy_ocid }}"
#        retention_period_days: "{{ updated_retention_period_days }}"
#        api_user: "{{test_admin_user_ocid}}"
#        api_user_fingerprint: "{{test_admin_user_api_signing_key_fingerprint}}"
#        api_user_key_file: "{{test_admin_user_api_key_private_key_path}}"
#        api_user_key_pass_phrase: "{{test_admin_user_api_key_passphrase}}"
#      register: update_configuration_idempotence_result
#
#    - name: Assert that the configuration is not updated
#      assert:
#        that:
#        - update_configuration_idempotence_result.changed == False
#
#    - name: Update retention period to original value
#      oci_audit_configuration:
#        compartment_id: "{{ tenancy_ocid }}"
#        retention_period_days: "{{ original_retention_period_days }}"
#        api_user: "{{test_admin_user_ocid}}"
#        api_user_fingerprint: "{{test_admin_user_api_signing_key_fingerprint}}"
#        api_user_key_file: "{{test_admin_user_api_key_private_key_path}}"
#        api_user_key_pass_phrase: "{{test_admin_user_api_key_passphrase}}"

    - name: Delete user_group_membership
      oci_identity_user_group_membership:
        user_group_membership_id: "{{ user_group_membership_resource_id | oracle.oci.override(test_user_group_membership_delete_rescue_user_group_membership_id, omit) }}"
        state: absent
      register: result
      ignore_errors: yes

    - name: Delete the test admin user
      oci_identity_user:
        user_id: "{{test_admin_user_ocid}}"
        state: 'absent'
      ignore_errors: yes
      register: delete_admin_user_result

    - name: Assert that the test admin user is deleted
      assert:
        that:
          - delete_admin_user_result.changed == True

  rescue:

#    - name: Update retention period
#      oci_audit_configuration:
#        compartment_id: "{{ tenancy_ocid }}"
#        retention_period_days: "{{ original_retention_period_days }}"
#        api_user: "{{test_admin_user_ocid}}"
#        api_user_fingerprint: "{{test_admin_user_api_signing_key_fingerprint}}"
#        api_user_key_file: "{{test_admin_user_api_key_private_key_path}}"
#        api_user_key_pass_phrase: "{{test_admin_user_api_key_passphrase}}"
#      ignore_errors: yes

    - name: Delete user_group_membership
      oci_identity_user_group_membership:
        user_group_membership_id: "{{ user_group_membership_resource_id | oracle.oci.override(test_user_group_membership_delete_rescue_user_group_membership_id, omit) }}"
        state: absent
      register: result
      ignore_errors: yes

    - name: Delete the test admin user
      oci_identity_user:
        user_id: "{{test_admin_user_ocid}}"
        state: 'absent'
      register: delete_admin_user_result
      ignore_errors: yes

    - fail:
        msg: "{{ ansible_failed_result }}"

  tags:
    - non_parallel