# Before test run, ensure all test resources are deleted, so
# that we can start with a clean slate.
# ============================================================
- name: Delete any existing test objects
  oci_object_storage_object:
    namespace: "{{test_namespace_name}}"
    bucket: "{{transient_test_bucket_name}}"
    object: "{{test_object_name}}"
    state: 'absent'
  ignore_errors: yes
# ============================================================
- name: Delete all existing test buckets
  oci_object_storage_bucket:
    namespace_name: "{{test_namespace_name}}"
    compartment_id: "{{test_compartment_ocid}}"
    force: True
    name: "{{item}}"
    state: absent
  ignore_errors: yes
  with_items:
    - "{{test_bucket_name}}"
    - "{{transient_test_bucket_name}}"
# ============================================================
- block:
  - name: Create a transient test bucket in OCI to contain test objects
    oci_object_storage_bucket:
      namespace_name: "{{test_namespace_name}}"
      compartment_id: "{{test_compartment_ocid}}"
      name: "{{transient_test_bucket_name}}"
      public_access_type: 'NoPublicAccess'
      metadata:
        project: 'Test Project'
      state: 'present'
    register: result

  - name: Assert that changed is true
    assert:
      that:
        - result.changed == True
  # ============================================================
  - name: Get the Object Lifecycle Policy before it exists (confirm throws)
    oci_object_storage_object_lifecycle_policy_facts:
      namespace_name: "{{test_namespace_name}}"
      bucket_name: "{{transient_test_bucket_name}}"
    register: result
    ignore_errors: yes

  - name: Assert that getting ObjectLifecyclePolicy throws before it exists
    assert: that="'LifecyclePolicyNotFound' in result.module_stderr"
  # ============================================================
  - name: check mode - Create an Object Lifecycle Policy
    oci_object_storage_object_lifecycle_policy:
      namespace_name: "{{test_namespace_name}}"
      bucket_name: "{{transient_test_bucket_name}}"
      items:
        - name: sampleRule
          action: ARCHIVE
          time_amount: 3
          time_unit: DAYS
          is_enabled: false
          object_name_filter:
              inclusion_prefixes: [ "samplePrefix" ]
              inclusion_patterns: [ "*.txt" ]
              exclusion_patterns: [ "*.pdf" ]
      state: present
    check_mode: yes
    register: result

  - name: Assert that changed is true
    assert:
      that:
        - result.changed == True
  # ============================================================
  - name: Create an Object Lifecycle Policy
    oci_object_storage_object_lifecycle_policy:
      namespace_name: "{{test_namespace_name}}"
      bucket_name: "{{transient_test_bucket_name}}"
      items:
        - name: sampleRule
          action: ARCHIVE
          time_amount: 3
          time_unit: DAYS
          is_enabled: false
          object_name_filter:
              inclusion_prefixes: [ "samplePrefix" ]
              inclusion_patterns: [ "*.txt" ]
              exclusion_patterns: [ "*.pdf" ]
      state: present
    register: result

  - name: Assert that changed is true
    assert:
      that:
        - result.changed == True
  # ============================================================
  - name: Get the Object Lifecycle Policy
    oci_object_storage_object_lifecycle_policy_facts:
      namespace_name: "{{test_namespace_name}}"
      bucket_name: "{{transient_test_bucket_name}}"
    register: result

  - name: Assert that object lifecycle policy is returned
    assert:
      that:
        - result.object_lifecycle_policies | length == 1
        - result.object_lifecycle_policies[0]['items'] | length == 1
        - result.object_lifecycle_policies[0]['items'][0].name == "sampleRule"
  # ============================================================
  - name: Attempt to re-create the same Object Lifecycle Policy (Idempotency test)
    oci_object_storage_object_lifecycle_policy:
      namespace_name: "{{test_namespace_name}}"
      bucket_name: "{{transient_test_bucket_name}}"
      items:
        - name: sampleRule
          action: ARCHIVE
          time_amount: 3
          time_unit: DAYS
          is_enabled: false
          object_name_filter:
              inclusion_prefixes: [ "samplePrefix" ]
              inclusion_patterns: [ "*.txt" ]
              exclusion_patterns: [ "*.pdf" ]
      state: present
    register: result

  - name: Assert that changed is false
    assert:
      that:
        - result.changed == False
  # ============================================================
  - name: check mode - Attempt to re-create the same Object Lifecycle Policy (Idempotency test)
    oci_object_storage_object_lifecycle_policy:
      namespace_name: "{{test_namespace_name}}"
      bucket_name: "{{transient_test_bucket_name}}"
      items:
        - name: sampleRule
          action: ARCHIVE
          time_amount: 3
          time_unit: DAYS
          is_enabled: false
          object_name_filter:
              inclusion_prefixes: [ "samplePrefix" ]
              inclusion_patterns: [ "*.txt" ]
              exclusion_patterns: [ "*.pdf" ]
      state: present
    check_mode: yes
    register: result

  - name: Assert that changed is false
    assert:
      that:
        - result.changed == False
  # ============================================================
  - name: check mode - Overwrite with new object lifecycle policy rules
    oci_object_storage_object_lifecycle_policy:
      namespace_name: "{{test_namespace_name}}"
      bucket_name: "{{transient_test_bucket_name}}"
      items:
        - name: sampleRule
          action: ARCHIVE
          time_amount: 3
          time_unit: DAYS
          is_enabled: false
          object_name_filter:
              inclusion_prefixes: [ "samplePrefix" ]
              inclusion_patterns: [ "*.txt" ]
              exclusion_patterns: [ "*.pdf" ]
        - name: sampleRule2
          action: ARCHIVE
          time_amount: 5
          time_unit: DAYS
          is_enabled: false
          object_name_filter:
              inclusion_prefixes: [ "samplePrefix1" ]
              inclusion_patterns: [ "*.png" ]
      state: present
    check_mode: yes
    register: result

  - name: Assert that changed is true
    assert:
      that:
        - result.changed == True
  # ============================================================
  - name: Overwrite with new object lifecycle policy rules
    oci_object_storage_object_lifecycle_policy:
      namespace_name: "{{test_namespace_name}}"
      bucket_name: "{{transient_test_bucket_name}}"
      items:
        - name: sampleRule
          action: ARCHIVE
          time_amount: 3
          time_unit: DAYS
          is_enabled: false
          object_name_filter:
              inclusion_prefixes: [ "samplePrefix" ]
              inclusion_patterns: [ "*.txt" ]
              exclusion_patterns: [ "*.pdf" ]
        - name: sampleRule2
          action: ARCHIVE
          time_amount: 5
          time_unit: DAYS
          is_enabled: false
          object_name_filter:
              inclusion_prefixes: [ "samplePrefix1" ]
              inclusion_patterns: [ "*.png" ]
      state: present
    register: result

  - name: Assert new rules are contained in the policy
    assert:
      that:
        - result.object_lifecycle_policy['items'] | length == 2
        - result.object_lifecycle_policy['items'][0].name == "sampleRule" or result.object_lifecycle_policy['items'][0].name == "sampleRule2"
        - result.object_lifecycle_policy['items'][1].name == "sampleRule" or result.object_lifecycle_policy['items'][1].name == "sampleRule2"

  - name: Assert that changed is true
    assert:
      that:
        - result.changed == True
  # ============================================================
  - name: Validate that idempotency is not dependent on rule list order
    oci_object_storage_object_lifecycle_policy:
      namespace_name: "{{test_namespace_name}}"
      bucket_name: "{{transient_test_bucket_name}}"
      items:
        - name: sampleRule2
          action: ARCHIVE
          time_amount: 5
          time_unit: DAYS
          is_enabled: false
          object_name_filter:
              inclusion_prefixes: [ "samplePrefix1" ]
              inclusion_patterns: [ "*.png" ]
        - name: sampleRule
          action: ARCHIVE
          time_amount: 3
          time_unit: DAYS
          is_enabled: false
          object_name_filter:
              inclusion_prefixes: [ "samplePrefix" ]
              inclusion_patterns: [ "*.txt" ]
              exclusion_patterns: [ "*.pdf" ]
      state: present
    register: result

  - name: Assert that changed is false
    assert:
      that:
        - result.changed == False
  # ============================================================
  - name: Validate that nested field change (inclusion_patterns) results in update
    oci_object_storage_object_lifecycle_policy:
      namespace_name: "{{test_namespace_name}}"
      bucket_name: "{{transient_test_bucket_name}}"
      items:
        - name: sampleRule2
          action: ARCHIVE
          time_amount: 5
          time_unit: DAYS
          is_enabled: false
          object_name_filter:
              inclusion_prefixes: [ "samplePrefix1" ]
              inclusion_patterns: [ "*.png" ]
        - name: sampleRule
          action: ARCHIVE
          time_amount: 3
          time_unit: DAYS
          is_enabled: false
          object_name_filter:
              inclusion_prefixes: [ "samplePrefix" ]
              inclusion_patterns: [ "*.backup" ]
              exclusion_patterns: [ "*.pdf" ]
      state: present
    register: result

  - name: Assert that changed is true
    assert:
      that:
        - result.changed == True

  - set_fact:
      sample_rule: "{{ item }}"
    with_items: "{{result.object_lifecycle_policy['items']}}"
    when: item.name == "sampleRule"

  - name: Assert that sampleRule has new inclusion pattern
    assert:
      that:
        - sample_rule.object_name_filter.inclusion_patterns[0] == "*.backup"
  # ============================================================
  - name: check mode - Delete the Object Lifecycle Policy
    oci_object_storage_object_lifecycle_policy:
      namespace_name: "{{test_namespace_name}}"
      bucket_name: "{{transient_test_bucket_name}}"
      state: absent
    check_mode: yes
    register: result

  - name: Assert that changed is true
    assert:
      that:
        - result.changed == True
  # ============================================================
  - name: Delete the Object Lifecycle Policy
    oci_object_storage_object_lifecycle_policy:
      namespace_name: "{{test_namespace_name}}"
      bucket_name: "{{transient_test_bucket_name}}"
      state: absent
    register: result

  - name: Assert that changed is true
    assert:
      that:
        - result.changed == True
  # ============================================================
  - name: Validate idempotency for deleting the Object Lifecycle Policy
    oci_object_storage_object_lifecycle_policy:
      namespace_name: "{{test_namespace_name}}"
      bucket_name: "{{transient_test_bucket_name}}"
      state: absent
    register: result

  - name: Assert that changed is false
    assert:
      that:
        - result.changed == False
  # ============================================================
  - name: Cleanup - delete test bucket in OCI
    oci_object_storage_bucket:
      namespace_name: "{{test_namespace_name}}"
      name: "{{transient_test_bucket_name}}"
      state: 'absent'
    register: result

  - name: Assert that changed is true
    assert:
      that:
        - result.changed == True
  # ============================================================

  rescue:
    # ============================================================
    - name: Delete the Object Lifecycle Policy
      oci_object_storage_object_lifecycle_policy:
        namespace_name: "{{test_namespace_name}}"
        bucket_name: "{{transient_test_bucket_name}}"
        state: absent
      register: result
      ignore_errors: yes
    # ============================================================
    - name: Cleanup - delete test bucket in OCI
      oci_object_storage_bucket:
        namespace_name: "{{test_namespace_name}}"
        name: "{{transient_test_bucket_name}}"
        state: 'absent'
      ignore_errors: yes
    # ============================================================
    - fail:
        msg: "{{ ansible_failed_result }}"