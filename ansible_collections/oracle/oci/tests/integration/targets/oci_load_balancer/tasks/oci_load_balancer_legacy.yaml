---

# ===========================================================================================
# Tests for oci_loadbalancer_load_balancer & oci_loadbalancer_load_balancer_facts

- block:

    - name: Create a VCN
      oci_network_vcn:
        compartment_id: "{{ test_compartment_ocid }}"
        display_name: "{{ vcn_name }}"
        cidr_block: "{{ cidr_block }}"
        dns_label: "{{ dns_label }}"
      register: result

    - set_fact:
        test_vcn_id: "{{ result.vcn.id }}"
    #===========================================================================================
    - name: Get Two availability domains for subnets
      oci_identity_availability_domain_facts:
        compartment_id: "{{test_compartment_ocid}}"
      register: oci_ads
    - set_fact:
        test_availability_domain: "{{oci_ads.availability_domains[0].name}}"
        test_availability_domain_ad2: "{{oci_ads.availability_domains[1].name}}"

    - debug: msg="ADs within the ashburn region {{test_availability_domain}} {{test_availability_domain_ad2}}"
    # ===========================================================================================
    - name: Create a subnet in AD1
      oci_network_subnet:
        availability_domain: "{{ test_availability_domain }}"
        cidr_block: "{{ subnet_cidr_block }}"
        compartment_id: "{{ test_compartment_ocid }}"
        vcn_id: '{{ test_vcn_id }}'
      register: result

    - set_fact:
        test_subnet_id_ad1: "{{ result.subnet.id }}"
    # ===========================================================================================
    - name: Create a subnet in AD2
      oci_network_subnet:
        availability_domain: "{{ test_availability_domain_ad2 }}"
        cidr_block: "{{ subnet_cidr_block_ad2 }}"
        compartment_id: "{{ test_compartment_ocid }}"
        vcn_id: '{{ test_vcn_id }}'
      register: result

    - set_fact:
        test_subnet_id_ad2: "{{ result.subnet.id }}"
    # ===========================================================================================
    # A temporary certificate should be generated always as part of this suite to avoid certificate
    # expiring issue as well as any other security issues. After finishing the test suite, the
    # generated certificates are removed.
    #
    # A temporary CA certificate is created to sign the certs, so that
    # when the generated certificate bundle is assigned to a load balancer,
    # the certificate validation performed in the OCI backend succeeds. The
    # OCI LB Service backend doesn't support self-signed certs.

    - name: create temporary directory for certificates
      tempfile:
        state: directory
        suffix: cert
      register: result

    - set_fact:
        cert_path: "{{ result.path }}"
    # ===========================================================================================
    - name: Generate CA Cert Key
      openssl_privatekey:
        path: "{{cert_path}}/ca_key.pem"
        type: RSA
        size: 2048
    # ===========================================================================================
    - name: Generate CA cert
      command: openssl req \
        -x509 -new -days 365 \
        -subj '/C=IN/ST=KA/L=Bangalore/O=Ansible/CN=www.ansible.oracle.com'
        -key "{{cert_path}}/ca_key.pem" \
        -out "{{cert_path}}/ca_cert.pem"
      args:
        creates: "{{cert_path}}/ca_cert.pem"
    # ===========================================================================================
    - name: Generate Server Private Key Without Passphrase
      openssl_privatekey:
        path: "{{cert_path}}/private_key.pem"
        type: RSA
        size: 2048
    # ===========================================================================================
    - name: Generate Private Key With Passphrase
      command: openssl genrsa -aes128 \
        -passout pass:ansible -out "{{cert_path}}/private_key_with_passphrase.pem" 2048
      args:
        creates: "{{cert_path}}/private_key_with_passphrase.pem"
    # ===========================================================================================
    - name: Generate Certificate Signing Request With Normal Private Key
      openssl_csr:
        path: "{{cert_path}}/csr.pem"
        privatekey_path: "{{cert_path}}/private_key.pem"
        country_name: IN
        organization_name: Ansible
        state_or_province_name: KA
        locality_name: Bangalore
        common_name: www.ansible.oracle.com
    # ===========================================================================================
    - name: Generate CA signed Certificate Without Passphrase
      command: openssl x509 -req \
        -days 1825 -CA "{{cert_path}}/ca_cert.pem" -CAkey "{{cert_path}}/ca_key.pem" -CAcreateserial \
        -in "{{cert_path}}/csr.pem" \
        -out "{{cert_path}}/cert.pem"
      args:
        creates: "{{cert_path}}/cert.pem"
    # ===========================================================================================
    - name: Generate Certificate Signing Request With Private Key having Passphrase
      openssl_csr:
        path: "{{cert_path}}/csr_with_passphrase.pem"
        privatekey_path: "{{cert_path}}/private_key_with_passphrase.pem"
        privatekey_passphrase: ansible
        country_name: IN
        organization_name: Ansible
        state_or_province_name: KA
        locality_name: Bangalore
        common_name: www.ansible.oracle.com
    # ===========================================================================================
    - name: Generate CA signed Certificate With Passphrase
      command: openssl x509 -req \
        -days 1825 -CA "{{cert_path}}/ca_cert.pem" -CAkey "{{cert_path}}/ca_key.pem" -CAcreateserial \
        -in "{{cert_path}}/csr_with_passphrase.pem" \
        -out "{{cert_path}}/cert_with_passphrase.pem"
      args:
        creates: "{{cert_path}}/cert_with_passphrase.pem"
    # ===========================================================================================
    - name: Create Public Load Balancer
      oci_loadbalancer_load_balancer:
        compartment_id: "{{ test_compartment_ocid }}"
        name: "{{ lb_name }}"
        # backend_sets: "{{ backend_sets }}"
        shape_name: "{{ shape_name }}"
        # listeners: "{{ listeners }}"
        # hostnames: "{{ lb_hostnames }}"
        subnet_ids:
        - "{{ test_subnet_id_ad1 }}"
        - "{{ test_subnet_id_ad2 }}"
        # certificates: "{{ certificates }}"
        # path_route_sets: "{{ load_balancer_embedded_path_route_set }}"
        state: 'present'
        defined_tags: "{{ creation_defined_tag }}"
        freeform_tags: "{{ creation_freeform_tag }}"
      register: result

    - set_fact:
        public_load_balancer_id: "{{ result.load_balancer.id }}"

    # - name: Get Work Request Id
    #   oci_loadbalancer_work_request_facts:
    #     load_balancer_id: "{{ public_load_balancer_id }}"
    #   register: work_request_result

    # - set_fact:
    #     first_work_request_id: "{{ work_request_result.work_requests[0].id }}"


    - name: Assert that Load Balancer is created
      assert:
        that:
          - result.changed == True
          - result.load_balancer.defined_tags == creation_defined_tag
          - result.load_balancer.freeform_tags == creation_freeform_tag
    # ===========================================================================================
    - name: Try to Create Public Load Balancer with same attributes, Idempotency check
      oci_loadbalancer_load_balancer:
        compartment_id: "{{ test_compartment_ocid }}"
        name: "{{ lb_name }}"
        # backend_sets: "{{ backend_sets }}"
        shape_name: "{{ shape_name }}"
        # listeners: "{{ listeners }}"
        subnet_ids:
        - "{{ test_subnet_id_ad1 }}"
        - "{{ test_subnet_id_ad2 }}"
        # certificates: "{{ certificates }}"
        # path_route_sets: "{{ load_balancer_embedded_path_route_set }}"
        state: 'present'
        defined_tags: "{{ creation_defined_tag }}"
        freeform_tags: "{{ creation_freeform_tag }}"
      register: result


    - name: Assert that no new Load Balancer is created
      assert:
        that:
          - result.changed == False
          - result.load_balancer.id == public_load_balancer_id
    # ===========================================================================================
    - name: Create backend sets
      oci_loadbalancer_backend_set:
        load_balancer_id: "{{ public_load_balancer_id }}"
        name: "{{ item.key }}"
        backends: "{{ item.value.backends }}"
        health_checker: "{{ item.value.health_checker }}"
        policy: "{{ item.value.policy }}"
        state: present
      loop: "{{ backend_sets|dict2items }}"
      register: result
    
    - name: Assert that backend set was created
      assert:
        that:
          - result.changed == True
    # ===========================================================================================

    - name: Create listeners
      oci_loadbalancer_listener:
        load_balancer_id: "{{ public_load_balancer_id }}"
        name: "{{ item.key }}"
        default_backend_set_name: "{{ item.value.default_backend_set_name }}"
        port: "{{ item.value.port }}"
        protocol: "{{ item.value.protocol }}"
      loop: "{{ listeners|dict2items }}"
      register: result
    
    - name: Assert that listener was created
      assert:
        that:
          - result.changed == True
    # # ===========================================================================================

    - name: Create certificates
      oci_loadbalancer_certificate:
        load_balancer_id: "{{ public_load_balancer_id }}"
        certificate_name: "{{ item.key }}"
        ca_certificate: "{{ item.value.ca_certificate }}"
        private_key: "{{ item.value.private_key }}"
        public_certificate: "{{ item.value.public_certificate }}"
      loop: "{{ certificates|dict2items }}"
      register: result
    
    - name: Assert that certificate was created
      assert:
        that:
          - result.changed == True
    # ===========================================================================================

    - name: Create path route sets
      oci_loadbalancer_path_route_set:
        load_balancer_id: "{{ public_load_balancer_id }}"
        name: "{{ item.key }}"
        path_routes: "{{ item.value.path_routes }}"
      loop: "{{ load_balancer_embedded_path_route_set|dict2items }}"
      register: result
    
    - name: Assert that path route set was created
      assert:
        that:
          - result.changed == True
    # ===========================================================================================

    - name: Create hostnames
      oci_loadbalancer_hostname:
        load_balancer_id: "{{ public_load_balancer_id }}"
        name: "{{ item.key }}"
        hostname: "{{ item.value.hostname }}"
      loop: "{{ lb_hostnames|dict2items }}"
      register: result
    
    - name: Assert that hostname was created
      assert:
        that:
          - result.changed == True
    # ===========================================================================================

    - name: List a specific Load Balancer Backend Health
      oci_loadbalancer_backend_health_facts:
        load_balancer_id: '{{public_load_balancer_id}}'
        backend_set_name: '{{backend_set_name}}'
        backend_name: '{{initial_lb_backend_ip_address}}:{{initial_lb_backend_port}}'
        # ip_address: '{{initial_lb_backend_ip_address}}'
        # port: '{{initial_lb_backend_port}}'
      register: result

    - name: Assert that specified Back End Health was listed
      assert:
        that:
          - result.backend_health.status == 'UNKNOWN'
    # ===========================================================================================
    - name: List a specific Load Balancer Backend Set Health
      oci_loadbalancer_backend_set_health_facts:
        load_balancer_id: '{{public_load_balancer_id}}'
        backend_set_name: '{{backend_set_name}}'
      register: result

    - name: Assert that specified Back End Set Health was listed
      assert:
        that:
          - result.backend_set_health.total_backend_count == 1
    # ===========================================================================================
    - name: List a specific Load Balancer Health
      oci_loadbalancer_health_facts:
        load_balancer_id: '{{public_load_balancer_id}}'
      register: result

    - name: Assert that specified Load Balancer Health was listed
      assert:
        that:
        - result.load_balancer_healths[0].unknown_state_backend_set_names[0] == '{{backend_set_name}}'
    # ===========================================================================================
    - name: List all Load Balancer Health Summary in a Compartment
      oci_loadbalancer_health_facts:
        compartment_id: '{{ test_compartment_ocid }}'
      register: result

    - set_fact:
        health_status: "{{ item.status }}"
      with_items: "{{result.load_balancer_healths}}"
      when: item.load_balancer_id == public_load_balancer_id

    - name: Assert that all Load Balancer Health Summary were listed
      assert:
        that:
        - health_status == 'UNKNOWN'
    # ===========================================================================================
    - name: List all Load Balancer Policy in a Compartment
      oci_loadbalancer_policy_facts:
        compartment_id: '{{ test_compartment_ocid }}'
      register: result

    - set_fact:
        listed_load_balancer_policy: "{{item.name}}"
      with_items: "{{result.load_balancer_policies}}"
      when: item.name == load_balancer_policy

    - name: Assert that specified Load Balancer Policy is available in the list
      assert:
        that:
        - listed_load_balancer_policy == '{{load_balancer_policy}}'
    # ===========================================================================================
    - name: List all Load Balancer Protocol in a Compartment
      oci_loadbalancer_protocol_facts:
        compartment_id: '{{ test_compartment_ocid }}'
      register: result

    - set_fact:
        listed_load_balancer_protocol: "{{item.name}}"
      with_items: "{{result.load_balancer_protocols}}"
      when: item.name == load_balancer_protocol

    - name: Assert that specified Load Balancer Protocol is available in the list
      assert:
        that:
        - listed_load_balancer_protocol == '{{load_balancer_protocol}}'
    # ===========================================================================================
    - name: List all Load Balancer Shape in a Compartment
      oci_loadbalancer_shape_facts:
        compartment_id: '{{ test_compartment_ocid }}'
      register: result

    - set_fact:
        listed_load_balancer_shape: "{{item.name}}"
      with_items: "{{result.load_balancer_shapes}}"
      when: item.name == load_balancer_shape

    - name: Assert that specified Load Balancer Shape is available in the list
      assert:
        that:
        - listed_load_balancer_shape == '{{load_balancer_shape}}'
    # ===========================================================================================
    - name: Update Health Checker URL Path in  Public Load Balancer Backend Set
      oci_loadbalancer_health_checker:
        load_balancer_id: "{{ public_load_balancer_id }}"
        backend_set_name: "{{ backend_set_name }}"
        interval_in_millis: 30000
        port: 8080
        protocol: "HTTP"
        response_body_regex: "^(500|40[1348])$"
        retries: 3
        timeout_in_millis: 6000
        return_code: 200
        url_path: "/healthcheckupdated"
      register: result

    - name: Assert that Health Checker has been updated
      assert:
        that:
          - result.changed == True
          - result.health_checker.url_path == '/healthcheckupdated'
    # ===========================================================================================
    # - name: List all Work Requests
    #   oci_loadbalancer_work_request_facts:
    #     load_balancer_id: "{{ public_load_balancer_id }}"
    #   register: result

    # - name: Assert that all Work Requests are listed
    #   assert:
    #     that:
    #       - result.work_requests|length == 2
    # # ===========================================================================================
    # - name: Get a specific Work Request
    #   oci_loadbalancer_work_request_facts:
    #     work_request_id: "{{ first_work_request_id }}"
    #   register: result

    # - name: Assert that a specific Work Request is listed
    #   assert:
    #     that:
    #       - result.work_requests|length == 1
    # ===========================================================================================
    - name: Update Health Checker URL Path in  Public Load Balancer Backend Set
      oci_loadbalancer_health_checker:
        load_balancer_id: "{{ public_load_balancer_id }}"
        backend_set_name: "{{ backend_set_name }}"
        interval_in_millis: 30000
        port: 8080
        protocol: "HTTP"
        response_body_regex: "^(500|40[1348])$"
        retries: 3
        timeout_in_millis: 6000
        return_code: 200
        url_path: "/healthcheckupdated"
      register: result

    - name: Assert that Health Checker has not been changed
      assert:
        that:
          - result.changed == False
    # ===========================================================================================
    - name: List a specific  Health Checker
      oci_loadbalancer_health_checker_facts:
        load_balancer_id: "{{ public_load_balancer_id }}"
        backend_set_name: "{{ backend_set_name }}"
      register: result

    - name: Assert that Specific Health Checker has  been listed
      assert:
        that:
          - result.health_checker.port == 8080
    # ===========================================================================================
    #This test should be modified once backend set gets merged with more backend sets
    # no longer supported to list all health checkers for an LB
    # - name: List all Health Checkers
    #   oci_loadbalancer_health_checker_facts:
    #     load_balancer_id: "{{ public_load_balancer_id }}"
    #   register: result

    # - name: Assert that all Health Checkers has  been listed
    #   assert:
    #     that:
    #       - result.health_checker.port == 8080

    # ===========================================================================================

    - name: Create First Backend
      oci_loadbalancer_backend:
        load_balancer_id: "{{ public_load_balancer_id }}"
        backend_set_name: "{{ backend_set_name }}"
        ip_address: "{{ first_backend_ip_address }}"
        port: "{{ first_backend_port }}"
        backup: False
        drain: False
        offline: False
        weight: 3
        state: 'present'
      register: result


    - name: Assert that First Backend is created
      assert:
        that:
          - result.changed == True
          - result.backend.name == "{{ first_backend_ip_address }}:{{ first_backend_port }}"
    # ===========================================================================================

    - name: Update First Backend
      oci_loadbalancer_backend:
        load_balancer_id: "{{ public_load_balancer_id }}"
        backend_set_name: "{{ backend_set_name }}"
        ip_address: "{{ first_backend_ip_address }}"
        port: "{{ first_backend_port }}"
        backup: True
        state: 'present'
      register: result


    - name: Assert that First Backend is updated
      assert:
        that:
          - result.changed == True
          - result.backend.backup == True
    # ===========================================================================================

    - name: Try to Update First Backend with same parameter value
      oci_loadbalancer_backend:
        load_balancer_id: "{{ public_load_balancer_id }}"
        backend_set_name: "{{ backend_set_name }}"
        ip_address: "{{ first_backend_ip_address }}"
        port: "{{ first_backend_port }}"
        weight: 3
        state: 'present'
      register: result


    - name: Assert that First Backend is not updated
      assert:
        that:
          - result.changed == False
    # ===========================================================================================
    - name: Update First Backend again
      oci_loadbalancer_backend:
        load_balancer_id: "{{ public_load_balancer_id }}"
        backend_set_name: "{{ backend_set_name }}"
        ip_address: "{{ first_backend_ip_address }}"
        port: "{{ first_backend_port }}"
        drain: True
        state: 'present'
      register: result


    - name: Assert that First Backend is updated and value of unspecified fields are not reset
      assert:
        that:
          - result.changed == True
          - result.backend.drain == True
          # user doesn't specify backup, so it should remain what it was
          - result.backend.backup == True
    # ===========================================================================================

    - name: Create Second Backend
      oci_loadbalancer_backend:
        load_balancer_id: "{{ public_load_balancer_id }}"
        backend_set_name: "{{ backend_set_name }}"
        ip_address: "{{ second_backend_ip_address }}"
        port: "{{ second_backend_port }}"
        backup: False
        drain: False
        offline: False
        weight: 3
        state: 'present'
      register: result


    - name: Assert that Second Backend is created
      assert:
        that:
          - result.changed == True
          - result.backend.name == "{{ second_backend_ip_address }}:{{ second_backend_port }}"
    # ===========================================================================================
    - name: List all existing backends under a backend set
      oci_loadbalancer_backend_facts:
        load_balancer_id: "{{ public_load_balancer_id }}"
        backend_set_name: "{{ backend_set_name }}"
      register: result

    - name: Assert that all backends are listed
      assert:
        that:
          - result.backends|length == 3
    # ===========================================================================================
    - name: List a specific backend under a backend set
      oci_loadbalancer_backend_facts:
        load_balancer_id: "{{ public_load_balancer_id }}"
        backend_set_name: "{{ backend_set_name }}"
        backend_name: "{{ first_backend_ip_address }}:{{ first_backend_port }}"
      register: result

    - name: Assert that all backends are listed
      assert:
        that:
          - result.backends[0].name == "{{ first_backend_ip_address }}:{{ first_backend_port }}"
    # ===========================================================================================
    - name: Delete all backends that were added in this test
      oci_loadbalancer_backend:
        load_balancer_id: "{{ public_load_balancer_id }}"
        backend_set_name: "{{ backend_set_name }}"
        ip_address: "{{ item.ip_address }}"
        port: "{{ item.port }}"
        state: "absent"
      with_items:
        - { ip_address: "{{ first_backend_ip_address }}", port: "{{ first_backend_port }}" }
        - { ip_address: "{{ second_backend_ip_address }}", port: "{{ second_backend_port }}" }
      register: result

    - name: Assert that all backends are deleted
      assert:
        that:
          - result.changed == True
    # ===========================================================================================
    - name: Try to Delete a non-existing backend
      oci_loadbalancer_backend:
        load_balancer_id: "{{ public_load_balancer_id }}"
        backend_set_name: "{{ backend_set_name }}"
        ip_address: "{{ first_backend_ip_address }}"
        port: "{{ first_backend_port }}"
        state: "absent"
      register: result

    - name: Assert that no delete operation happened
      assert:
        that:
          - result.changed == False

    # ===========================================================================================
    - name: Create certificate without Passphrase
      oci_loadbalancer_certificate:
        certificate_name: "{{certificate_name_without_passphrase}}"
        load_balancer_id: "{{ public_load_balancer_id }}"
        ca_certificate: "{{ lookup('file', ca_cert_file_path) }}"
        private_key: "{{ lookup('file', private_key_file_path) }}"
        public_certificate: "{{ lookup('file', public_certificate_file_path) }}"
      register: result
    - name: Assert that certificate is created
      assert:
        that:
          - result.changed == True
    # ===========================================================================================
    - name: Try to Create certificate without Passphrase Again with same values
      oci_loadbalancer_certificate:
        certificate_name: "{{certificate_name_without_passphrase}}"
        load_balancer_id: "{{ public_load_balancer_id }}"
        ca_certificate: "{{ lookup('file', ca_cert_file_path) }}"
        private_key: "{{ lookup('file', private_key_file_path) }}"
        public_certificate: "{{ lookup('file', public_certificate_file_path) }}"
      register: result
    - name: Assert that certificate is not created
      assert:
        that:
          - result.changed == False
    # ===========================================================================================
    - name: Try to Create a certificate with same name but a different private key
      oci_loadbalancer_certificate:
        certificate_name: "{{certificate_name_without_passphrase}}"
        load_balancer_id: "{{ public_load_balancer_id }}"
        ca_certificate: "{{ lookup('file', ca_cert_file_path) }}"
        private_key: "{{ lookup('file', private_key_file_path) }}"
        public_certificate: "{{ lookup('file', public_certificate_file_path) }}"
      ignore_errors: yes

    - name: Assert that certificate is not created
      assert:
        that:
          - result.changed == False
    # ===========================================================================================

    - name: Create certificate with Passphrase
      oci_loadbalancer_certificate:
        certificate_name: "{{certificate_name_with_passphrase}}"
        load_balancer_id: "{{ public_load_balancer_id }}"
        passphrase: "{{passphrase}}"
        ca_certificate: "{{ lookup('file', ca_cert_file_path) }}"
        private_key: "{{ lookup('file', private_key_with_passphrase_file_path) }}"
        public_certificate: "{{ lookup('file', cert_with_passphrase_file_path) }}"
      register: result
    - name: Assert that certificate is created
      assert:
        that:
          - result.changed == True
    # ===========================================================================================
    - name: Try to Create certificate with an existing name
      oci_loadbalancer_certificate:
        certificate_name: "{{certificate_name_with_passphrase}}"
        load_balancer_id: "{{ public_load_balancer_id }}"
        passphrase: "ansible"
        ca_certificate: "{{ lookup('file', ca_cert_file_path) }}"
        private_key: "{{ lookup('file', private_key_with_passphrase_file_path) }}"
        public_certificate: "{{ lookup('file', cert_with_passphrase_file_path) }}"
      ignore_errors: yes
      register: result
    - name: Assert that no state has been changed
      assert:
        that:
          - result.changed == False
    # ===========================================================================================
    # can no longer filter by name for certificate
    # - name: List a specific certificate
    #   oci_loadbalancer_certificate_facts:
    #     certificate_name: "{{certificate_name_with_passphrase}}"
    #     load_balancer_id: "{{ public_load_balancer_id }}"
    #   register: result

    # - name: Assert that specific certificate is listed
    #   assert:
    #     that:
    #       - result.certificates[0].certificate_name == "{{certificate_name_with_passphrase}}"
    # ===========================================================================================
    - name: List all certificates
      oci_loadbalancer_certificate_facts:
        load_balancer_id: "{{ public_load_balancer_id }}"
      register: result

    - name: Assert that all certificates are listed
      assert:
        that:
          - result.certificates|length == 3
    # ===========================================================================================
    - name: Delete all certificates
      oci_loadbalancer_certificate:
        load_balancer_id: "{{ public_load_balancer_id }}"
        certificate_name: "{{item}}"
        state: 'absent'
      with_items:
        - "ansible_cert_with_passphrase"
        - "ansible_cert"
      register: result

    - name: Assert that certificates are removed
      assert:
        that:
          - result.changed == True
    # ===========================================================================================
    # Test for hostname
    - name: Create Hostname
      oci_loadbalancer_hostname:
        load_balancer_id: "{{ public_load_balancer_id }}"
        name: "{{additional_hostname_name}}"
        hostname: "{{ additional_hostname }}"
        state: 'present'
      register: result


    - name: Assert that Hostname is created
      assert:
        that:
          - result.changed == True
          - result.hostname.hostname == "{{additional_hostname}}"
    # ===========================================================================================
    - name: Update Hostname
      oci_loadbalancer_hostname:
        load_balancer_id: "{{ public_load_balancer_id }}"
        name: "{{additional_hostname_name}}"
        hostname: "{{ additional_hostname_updated }}"
        state: 'present'
      register: result


    - name: Assert that Hostname is updated
      assert:
        that:
          - result.changed == True
          - result.hostname.hostname == "{{additional_hostname_updated}}"
    # ===========================================================================================
    - name: Try To Update Hostname with same attributes
      oci_loadbalancer_hostname:
        load_balancer_id: "{{ public_load_balancer_id }}"
        name: "{{additional_hostname_name}}"
        hostname: "{{ additional_hostname_updated }}"
        state: 'present'
      register: result


    - name: Assert that Hostname is not updated
      assert:
        that:
          - result.changed == False
    # ===========================================================================================
    - name: List all hostnames
      oci_loadbalancer_hostname_facts:
        load_balancer_id: "{{ public_load_balancer_id }}"
      register: result


    - name: Assert that all Hostnames are listed
      assert:
        that:
          - result.hostnames|length == 2
    # ===========================================================================================
    - name: List a specific hostname
      oci_loadbalancer_hostname_facts:
        load_balancer_id: "{{ public_load_balancer_id }}"
        name: "{{ additional_hostname_name }}"
      register: result


    - name: Assert that specific hostname is listed
      assert:
        that:
          - result.hostnames[0].hostname == additional_hostname_updated
    # ===========================================================================================
    - name: Delete Hostname
      oci_loadbalancer_hostname:
        load_balancer_id: "{{ public_load_balancer_id }}"
        name: "{{additional_hostname_name}}"
        state: 'absent'
      register: result


    - name: Assert that Hostname is deleted
      assert:
        that:
          - result.changed == True
    # ===========================================================================================
    - name: Try to delete non-existent  Hostname
      oci_loadbalancer_hostname:
        load_balancer_id: "{{ public_load_balancer_id }}"
        name: "{{additional_hostname_name}}"
        state: 'absent'
      register: result


    - name: Assert that nothing is deleted
      assert:
        that:
          - result.changed == False
    # ===========================================================================================
    # Test for listerner
    - name: Create Hostname For Listener
      oci_loadbalancer_hostname:
        load_balancer_id: "{{ public_load_balancer_id }}"
        name: "{{additional_hostname_name}}"
        hostname: "{{ additional_hostname }}"
        state: 'present'
      register: result


    - name: Assert that Hostname is created
      assert:
        that:
          - result.changed == True
          - result.hostname.hostname == "{{additional_hostname}}"
    # ===========================================================================================
    - name: Create a Path Route Set For Listener
      oci_loadbalancer_path_route_set:
        load_balancer_id: "{{ public_load_balancer_id }}"
        name: "{{path_route_set_name}}"
        path_routes: "{{path_routes_changed_backend_set}}"
        state: 'present'
      register: result

    - name: Assert that Path Route Set has been created
      assert:
        that:
          - result.changed == True
    # ===========================================================================================
    - name: Create First Listener
      oci_loadbalancer_listener:
        load_balancer_id: "{{ public_load_balancer_id }}"
        name: "{{first_listener_name}}"
        default_backend_set_name: "{{ backend_set_name }}"
        protocol: "{{ listener_protocol }}"
        port: "{{ first_listener_port }}"
        ssl_configuration: "{{listener_ssl_configuration}}"
        state: 'present'
      register: result


    - name: Assert that First Listener is created
      assert:
        that:
          - result.changed == True
          - result.listener.name == "{{first_listener_name}}"
    # ===========================================================================================
    - name: Try to Update  First Listener with no change in attribute values
      oci_loadbalancer_listener:
        load_balancer_id: "{{ public_load_balancer_id }}"
        name: "{{first_listener_name}}"
        default_backend_set_name: "{{ backend_set_name }}"
        protocol: "{{ listener_protocol }}"
        port: "{{ first_listener_port }}"
        state: 'present'
      register: result


    - name: Assert that No change in state
      assert:
        that:
          - result.changed == False
    # ===========================================================================================
    - name: Update First Listener Port
      oci_loadbalancer_listener:
        load_balancer_id: "{{ public_load_balancer_id }}"
        name: "{{first_listener_name}}"
        default_backend_set_name: "{{ backend_set_name }}"
        protocol: "{{ listener_protocol }}"
        port: "{{ first_listener_port_updated }}"
        state: 'present'
      register: result


    - name: Assert that First Listener port is updated
      assert:
        that:
          - result.changed == True
          - result.listener.port == first_listener_port_updated
    # ===========================================================================================
    - name: Create Second Listener
      oci_loadbalancer_listener:
        load_balancer_id: "{{ public_load_balancer_id }}"
        name: "{{second_listener_name}}"
        default_backend_set_name: "{{ backend_set_name }}"
        protocol: "{{ listener_protocol }}"
        port: "{{ second_listener_port }}"
        ssl_configuration: "{{listener_ssl_configuration}}"
        connection_configuration: "{{ connection_configuration }}"
        hostname_names: ['{{ lb_hostname_name }}']
        path_route_set_name: '{{lb_path_route_set_name}}'
        state: 'present'
      register: result

    - name: Assert that Second Listener is created
      assert:
        that:
          - result.changed == True
          - result.listener.name == "{{second_listener_name}}"
          - result.listener.connection_configuration.idle_timeout == 600
    # ===========================================================================================
    - name: Update Second Listener SSL Configuration
      oci_loadbalancer_listener:
        load_balancer_id: "{{ public_load_balancer_id }}"
        name: "{{second_listener_name}}"
        default_backend_set_name: "{{ backend_set_name }}"
        protocol: "{{ listener_protocol }}"
        port: "{{ second_listener_port }}"
        ssl_configuration: "{{listener_ssl_configuration_updated}}"
        state: 'present'
      register: result

    - name: Assert that Second Listener SSL Configuration updated
      assert:
        that:
          - result.changed == True
          - result.listener.ssl_configuration.verify_peer_certificate == False
    # ===========================================================================================
    - name: Update Second Listener Connection Configuration
      oci_loadbalancer_listener:
        load_balancer_id: "{{ public_load_balancer_id }}"
        name: "{{second_listener_name}}"
        default_backend_set_name: "{{ backend_set_name }}"
        protocol: "{{ listener_protocol }}"
        port: "{{ second_listener_port }}"
        connection_configuration: "{{ connection_configuration_updated }}"
        state: 'present'
      register: result

    - name: Assert that Second Listener SSL Configuration updated
      assert:
        that:
          - result.changed == True
          - result.listener.connection_configuration.idle_timeout == 1200

    - name: Assert that update doesn't wipe out other fields
      assert:
        that:
          - result.changed == True
          - result.listener.ssl_configuration != None
          - result.listener.ssl_configuration.verify_peer_certificate == False
    # ===========================================================================================
    - name: Update Second Listener Path Route Set Name
      oci_loadbalancer_listener:
        load_balancer_id: "{{ public_load_balancer_id }}"
        name: "{{second_listener_name}}"
        path_route_set_name: '{{ path_route_set_name }}'
        state: 'present'
      register: result

    - name: Assert that Second Listener Path Route Set Name updated
      assert:
        that:
          - result.changed == True
          - result.listener.path_route_set_name == path_route_set_name
    
    - name: Assert that update doesn't wipe out other fields
      assert:
        that:
          - result.changed == True
          - result.listener.connection_configuration != None
          - result.listener.connection_configuration.idle_timeout == 1200
    # ===========================================================================================
    # - name: Update Second Listener Hostname Names by appending new name
    #   oci_loadbalancer_listener:
    #     load_balancer_id: "{{ public_load_balancer_id }}"
    #     name: "{{second_listener_name}}"
    #     hostname_names: ['{{ additional_hostname_name }}']
    #     purge_hostname_names: False
    #     state: 'present'
    #   register: result

    # - name: Assert that Second Listener Hostname Names updated
    #   assert:
    #     that:
    #       - result.changed == True
    #       - result.listener.hostname_names|length == 2
    # ===========================================================================================
    - name: Update Second Listener Hostname Names by replacing existing names
      oci_loadbalancer_listener:
        load_balancer_id: "{{ public_load_balancer_id }}"
        name: "{{second_listener_name}}"
        hostname_names: ['{{ additional_hostname_name }}']
        state: 'present'
      register: result

    - name: Assert that Second Listener Hostname Names replaced
      assert:
        that:
          - result.changed == True
          - result.listener.hostname_names|length == 1
    # ===========================================================================================
    - name: Update Second Listener Hostname Names by deleting a hostname
      oci_loadbalancer_listener:
        load_balancer_id: "{{ public_load_balancer_id }}"
        name: "{{second_listener_name}}"
        # hostname_names: ['{{ additional_hostname_name }}']
        hostname_names: []
        # delete_hostname_names: True
        state: 'present'
      register: result

    - name: Assert that Second Listener Hostname Names has been removed
      assert:
        that:
          - result.changed == True
          - result.listener.hostname_names|length == 0
    # ===========================================================================================
    # no longer possible to test, explicitly, but there is no way to remove a non existent hostname so thats okay
    # - name: Try to Update Second Listener Hostname Names by deleting a non-existent hostname, Idempotency test
    #   oci_loadbalancer_listener:
    #     load_balancer_id: "{{ public_load_balancer_id }}"
    #     name: "{{second_listener_name}}"
    #     hostname_names: ['{{ additional_hostname_name }}']
    #     delete_hostname_names: True
    #     state: 'present'
    #   register: result

    # - name: Assert that no change has been made
    #   assert:
    #     that:
    #       - result.changed == False
    #       - result.listener.hostname_names|length == 0
    # ===========================================================================================
    # can no longer list specific listener, you need to list then filter to what you want
    # - name: List specific listener
    #   # oci_loadbalancer_listener_facts:
    #   oci_loadbalancer_load_balancer_facts:
    #     load_balancer_id: "{{ public_load_balancer_id }}"
    #     name: "{{first_listener_name}}"
    #   register: result

    # - name: Assert that First Listener is listed
    #   assert:
    #     that:
    #       - result.load_balancers[0].listeners[0].name == "{{first_listener_name}}"
    # ===========================================================================================
    - name: List all listeners
      oci_loadbalancer_load_balancer_facts:
      # oci_loadbalancer_listener_facts:
        load_balancer_id: "{{ public_load_balancer_id }}"
      register: result

    - name: Assert that all listeners are listed
      assert:
        that:
          - result.load_balancers[0].listeners | length == 3
    # ===========================================================================================
    - name: Delete all listeners that were added in this test from the LB
      oci_loadbalancer_listener:
        load_balancer_id: "{{ public_load_balancer_id }}"
        name: "{{item}}"
        state: 'absent'
      with_items:
        - "{{first_listener_name}}"
        - "{{second_listener_name}}"
      register: result


    - name: Assert that Listeners are deleted
      assert:
        that:
          - result.changed == True
    # ===========================================================================================
    - name: Delete Hostname Created for Listener test
      oci_loadbalancer_hostname:
        load_balancer_id: "{{ public_load_balancer_id }}"
        name: "{{additional_hostname_name}}"
        state: 'absent'
      register: result


    - name: Assert that Hostname is deleted
      assert:
        that:
          - result.changed == True
    # ===========================================================================================
    - name: Delete Path Route Set Created for Listener Test
      oci_loadbalancer_path_route_set:
        load_balancer_id: "{{ public_load_balancer_id }}"
        name: "{{ path_route_set_name }}"
        state: 'absent'
      register: result

    - name: Assert that Path Route Set has been deleted
      assert:
        that:
          - result.changed == True
    # ===========================================================================================
    - name: Ensure that only one listener exists after deleting listeners in previous test
      # oci_loadbalancer_listener_facts:
      oci_loadbalancer_load_balancer_facts:
        load_balancer_id: "{{ public_load_balancer_id }}"
      register: result

    - name: Assert that only one listener is listed
      assert:
        that:
          - result.load_balancers[0].listeners | length == 1
    # ===========================================================================================
    - name: Try to Delete non-existent listener Listener
      oci_loadbalancer_listener:
        load_balancer_id: "{{ public_load_balancer_id }}"
        name: "{{first_listener_name}}"
        state: 'absent'
      register: result


    - name: Assert that no state has been changed
      assert:
        that:
          - result.changed == False
    # ===========================================================================================
    - name: Update Load Balancer name
      oci_loadbalancer_load_balancer:
        load_balancer_id: "{{ public_load_balancer_id }}"
        name: "{{ lb_name_updated }}"
        state: 'present'
      register: result

    - debug:
        msg: "{{ result.load_balancer.display_name }}"

    - name: Assert that Load Balancer name is updated
      assert:
        that:
          - result.changed == True
          - result.load_balancer.display_name == lb_name_updated
    # ===========================================================================================
    - name: Update Load Balancer tags
      oci_loadbalancer_load_balancer:
        load_balancer_id: "{{ public_load_balancer_id }}"
        name: "{{ lb_name_updated }}"
        defined_tags: "{{ updation_defined_tag }}"
        freeform_tags: "{{ updation_freeform_tag }}"
        state: 'present'
      register: result

    - debug:
        msg:
          - "{{ result.load_balancer.defined_tags }}"
          - "{{ result.load_balancer.freeform_tags }}"

    - name: Assert that Load Balancer tags are updated
      assert:
        that:
          - result.changed == True
          - result.load_balancer.defined_tags == updation_defined_tag
          - result.load_balancer.freeform_tags == updation_freeform_tag
    # ===========================================================================================
    - name: Update Load Balancer tags - Idempotency check
      oci_loadbalancer_load_balancer:
        load_balancer_id: "{{ public_load_balancer_id }}"
        name: "{{ lb_name_updated }}"
        defined_tags: "{{ updation_defined_tag }}"
        freeform_tags: "{{ updation_freeform_tag }}"
        state: 'present'
      register: result

    - debug:
        msg:
          - "{{ result.load_balancer.defined_tags }}"
          - "{{ result.load_balancer.freeform_tags }}"

    - name: Assert that Load Balancer tags are unchanged with result.changed as False
      assert:
        that:
          - result.changed == False
          - result.load_balancer.defined_tags == updation_defined_tag
          - result.load_balancer.freeform_tags == updation_freeform_tag
    # ===========================================================================================
    - name: List Load Balancers in OCI
      oci_loadbalancer_load_balancer_facts:
        compartment_id: "{{test_compartment_ocid}}"
      register: result

    - set_fact:
        display_name: "{{ item.display_name }}"
      with_items: "{{result.load_balancers}}"
      when: item.id == public_load_balancer_id

    - name: Assert that Load Balancers are listed
      assert:
        that:
          - display_name == lb_name_updated

    - name: List all ACTIVE Load Balancers in OCI
      oci_loadbalancer_load_balancer_facts:
        compartment_id: "{{test_compartment_ocid}}"
        lifecycle_state: "ACTIVE"
      register: result

    - set_fact:
        display_name: "{{ item.display_name }}"
      with_items: "{{result.load_balancers}}"
      when: item.id == public_load_balancer_id

    - name: Assert that the recent ACTIVE load balancer is listed
      assert:
        that:
          - display_name == lb_name_updated

    # ===========================================================================================

    - name: List a specific Load Balancer
      oci_loadbalancer_load_balancer_facts:
        load_balancer_id: "{{ public_load_balancer_id }}"
      register: result

    - name: Assert that Load Balancer is listed
      assert:
        that:
          - result.load_balancers[0].display_name == lb_name_updated
          - result.load_balancers[0].defined_tags == updation_defined_tag
          - result.load_balancers[0].freeform_tags == updation_freeform_tag
    # ===========================================================================================

    # === Testing Backend Sets ===

    - name: Create Backend Set with multiple backends
      oci_loadbalancer_backend_set:
        name: "{{first_backend_set_name}}"
        load_balancer_id: "{{public_load_balancer_id}}"
        backends: 
          - "{{first_backend_set_backend_one[0]}}"
          - "{{first_backend_set_backend_two[0]}}"
        health_checker: "{{first_backend_set_health_checker}}"
        policy: "{{first_backend_set_policy}}"
        session_persistence_configuration: "{{first_backend_set_session_persistence_configuration}}"
        ssl_configuration: "{{first_backend_set_ssl_configuration}}"
        state: 'present'
      register: result

    - name: Assert that Backend Set is created
      assert:
        that:
          - result.changed == True
          - result.backend_set.backends | length == 2

    # ===========================================================================================

    - name: Create Backend Set with multiple backends, in different order (idempotency)
      oci_loadbalancer_backend_set:
        name: "{{first_backend_set_name}}"
        load_balancer_id: "{{public_load_balancer_id}}"
        backends: 
          - "{{first_backend_set_backend_two[0]}}"
          - "{{first_backend_set_backend_one[0]}}"
        health_checker: "{{first_backend_set_health_checker}}"
        policy: "{{first_backend_set_policy}}"
        session_persistence_configuration: "{{first_backend_set_session_persistence_configuration}}"
        ssl_configuration: "{{first_backend_set_ssl_configuration}}"
        state: 'present'
      register: result

    - name: Assert that Backend Set is created
      assert:
        that:
          - result.changed == False
          - result.backend_set.backends | length == 2

    # ===========================================================================================

    - name: Create First Backend Set
      oci_loadbalancer_backend_set:
        name: "{{first_backend_set_name}}"
        load_balancer_id: "{{public_load_balancer_id}}"
        backends: "{{first_backend_set_backend_one}}"
        health_checker: "{{first_backend_set_health_checker}}"
        policy: "{{first_backend_set_policy}}"
        session_persistence_configuration: "{{first_backend_set_session_persistence_configuration}}"
        ssl_configuration: "{{first_backend_set_ssl_configuration}}"
        state: 'present'
      register: result

    - name: Assert that Backend Set is created
      assert:
        that:
          - result.changed == True
          - result.backend_set.backends | length == 1

    # ===========================================================================================

    - name: Update First Backend Set by purging old backends
      oci_loadbalancer_backend_set:
        name: "{{first_backend_set_name}}"
        load_balancer_id: "{{public_load_balancer_id}}"
        backends: "{{first_backend_set_backend_two}}"
        state: 'present'
      register: result

    - name: Assert that Backend Set backends updated
      assert:
        that:
          - result.changed == True
          - result.backend_set.backends[0].port == 8282
    
    - name: Verify that other fields aren't wiped out by update
      assert:
        that:
          - result.changed == True
          - result.backend_set.session_persistence_configuration != None
          - result.backend_set.ssl_configuration != None
          - result.backend_set.policy != None

    # ===========================================================================================
    # - name: Update First Backend Set by replacing with new backend
    #   oci_loadbalancer_backend_set:
    #     name: "{{first_backend_set_name}}"
    #     load_balancer_id: "{{public_load_balancer_id}}"
    #     backends: "{{first_backend_set_backend_one}}"
    #     # purge_backends: False
    #     state: 'present'
    #   register: result

    # - name: Assert that Backend Set backends updated
    #   assert:
    #     that:
    #       - result.changed == True
    #       # - result.backend_set.backends|length == 2
    #       - result.backend_set.backends|length == 1
    # ===========================================================================================
    - name: Update First Backend Set by deleting a backend (replacing with list that doesnt include one of current)
      oci_loadbalancer_backend_set:
        name: "{{first_backend_set_name}}"
        load_balancer_id: "{{public_load_balancer_id}}"
        backends: "{{first_backend_set_backend_one}}"
        # delete_backends: True
        state: 'present'
      register: result

    - name: Assert that Backend Set backend has been deleted
      assert:
        that:
          - result.changed == True
          - result.backend_set.backends|length == 1
    # ===========================================================================================
    # - name: Try to Update First Backend Set by deleting a non-existent backend, Idempotency test
    - name: Try to Update First Backend Set by with same backend, Idempotency test
      oci_loadbalancer_backend_set:
        name: "{{first_backend_set_name}}"
        load_balancer_id: "{{public_load_balancer_id}}"
        backends: "{{first_backend_set_backend_one}}"
        # delete_backends: True
        state: 'present'
      register: result

    - name: Assert that no change has been done
      assert:
        that:
          - result.changed == False
          - result.backend_set.backends|length == 1
    # ===========================================================================================
    - name: Update First Backend Set Health Check
      oci_loadbalancer_backend_set:
        name: "{{first_backend_set_name}}"
        load_balancer_id: "{{public_load_balancer_id}}"
        health_checker: "{{first_backend_set_health_checker_updated}}"
        state: 'present'
      register: result

    - name: Assert that Backend Set Health Check  updated
      assert:
        that:
          - result.changed == True
          - result.backend_set.health_checker.return_code == 500

    # ===========================================================================================

    - name: Update First Backend Set policy
      oci_loadbalancer_backend_set:
        name: "{{first_backend_set_name}}"
        load_balancer_id: "{{public_load_balancer_id}}"
        policy: "{{first_backend_set_policy_updated}}"
        state: 'present'
      register: result

    - name: Assert that Backend Set policy  updated
      assert:
        that:
          - result.changed == True
          - result.backend_set.policy == "{{first_backend_set_policy_updated}}"

    # ===========================================================================================

    - name: Try to Update First Backend Set with same Session Persistence Configuration
      oci_loadbalancer_backend_set:
        name: "{{first_backend_set_name}}"
        load_balancer_id: "{{public_load_balancer_id}}"
        session_persistence_configuration: "{{first_backend_set_session_persistence_configuration}}"
        state: 'present'
      register: result

    - name: Assert that Backend Set Session Persistence Configuration not updated
      assert:
        that:
          - result.changed == False
    # ===========================================================================================

    - name: Update First Backend Set with Session Persistence Configuration
      oci_loadbalancer_backend_set:
        name: "{{first_backend_set_name}}"
        load_balancer_id: "{{public_load_balancer_id}}"
        session_persistence_configuration: "{{first_backend_set_session_persistence_configuration_updated}}"
        state: 'present'
      register: result

    - name: Assert that Backend Set Session Persistence Configuration updated
      assert:
        that:
          - result.changed == True
          - result.backend_set.session_persistence_configuration.cookie_name == 'first_backend_set_cookie_updated'

    # ===========================================================================================

    - name: Try to Update First Backend Set with same SSL Configuration
      oci_loadbalancer_backend_set:
        name: "{{first_backend_set_name}}"
        load_balancer_id: "{{public_load_balancer_id}}"
        ssl_configuration: "{{first_backend_set_ssl_configuration}}"
        state: 'present'
      register: result

    - name: Assert that Backend Set SSL Configuration not updated
      assert:
        that:
          - result.changed == False

    # ===========================================================================================
    - name: Update First Backend Set with same SSL Configuration
      oci_loadbalancer_backend_set:
        name: "{{first_backend_set_name}}"
        load_balancer_id: "{{public_load_balancer_id}}"
        ssl_configuration: "{{first_backend_set_ssl_configuration_updated}}"
        state: 'present'
      register: result

    - name: Assert that Backend Set SSL Configuration updated
      assert:
        that:
          - result.changed == True
          - result.backend_set.ssl_configuration.verify_depth == 3

    # ===========================================================================================
    - name: List all Backend Sets under Load Balancer
      oci_loadbalancer_backend_set_facts:
        load_balancer_id: "{{public_load_balancer_id}}"
      register: result

    - name: Assert that all Backend Sets are listed
      assert:
        that:
          - result.backend_sets|length == 2
    # ===========================================================================================
    - name: List a specific  Backend Set
      oci_loadbalancer_backend_set_facts:
        backend_set_name: "{{first_backend_set_name}}"
        load_balancer_id: "{{public_load_balancer_id}}"
      register: result

    - name: Assert that only the specified Backend Set is listed
      assert:
        that:
        - result.backend_sets[0].name == "{{first_backend_set_name}}"
    # ===========================================================================================
    # Test Path Route Sets
    - name: Create a Path Route Set
      oci_loadbalancer_path_route_set:
        load_balancer_id: "{{ public_load_balancer_id }}"
        name: "{{path_route_set_name}}"
        path_routes: "{{path_routes_exact_match}}"
        state: 'present'
      register: result

    - name: Assert that Path Route Set has been created
      assert:
        that:
          - result.changed == True
    # ===========================================================================================
    - name: Try to Create a Path Route Set, Idempotent test
      oci_loadbalancer_path_route_set:
        load_balancer_id: "{{ public_load_balancer_id }}"
        name: "{{path_route_set_name}}"
        path_routes: "{{path_routes_exact_match}}"
        state: 'present'
      register: result

    - name: Assert that no new Path Route Set has been created
      assert:
        that:
          - result.changed == False
    # ===========================================================================================
    - name: Update the Path Route Set with changed Path Routes match type
      oci_loadbalancer_path_route_set:
        load_balancer_id: "{{ public_load_balancer_id }}"
        name: "{{path_route_set_name}}"
        path_routes: "{{ path_routes_force_longest_prefix_match }}"
        state: 'present'
      register: result

    - name: Assert that Path Routes match type has been changed
      assert:
        that:
          - result.changed == True
          - result.path_route_set.path_routes[0].path_match_type.match_type == 'FORCE_LONGEST_PREFIX_MATCH'
    # ===========================================================================================
    - name: Update the Path Route Set with changed Path Routes path
      oci_loadbalancer_path_route_set:
        load_balancer_id: "{{ public_load_balancer_id }}"
        name: "{{path_route_set_name}}"
        path_routes: "{{ path_routes_changed_path }}"
        state: 'present'
      register: result

    - name: Assert that Path Routes path has been changed
      assert:
        that:
          - result.changed == True
          - result.path_route_set.path_routes[0].path == path_routes_changed_path[0].path
    # ===========================================================================================
    - name: Update the Path Route Set with changed Path Routes backend set
      oci_loadbalancer_path_route_set:
        load_balancer_id: "{{ public_load_balancer_id }}"
        name: "{{ path_route_set_name }}"
        path_routes: "{{ path_routes_changed_backend_set }}"
        state: 'present'
      register: result

    - name: Assert that Path Routes backend set has been changed
      assert:
        that:
          - result.changed == True
          - result.path_route_set.path_routes[0].backend_set_name == backend_set_name
    # ===========================================================================================
    - name: Update the Path Route Set by appending a Path Route
      oci_loadbalancer_path_route_set:
        load_balancer_id: "{{ public_load_balancer_id }}"
        name: "{{ path_route_set_name }}"
        path_routes: 
          - "{{ path_routes_exact_match[0] }}"
          - "{{ path_routes_changed_backend_set[0] }}"
        # purge_path_routes: False
        state: 'present'
      register: result

    - name: Assert that a Path Route added
      assert:
        that:
          - result.changed == True
          - result.path_route_set.path_routes|length == 2
    # ===========================================================================================
    - name: Update the Path Route Set by purging existing Path Routes
      oci_loadbalancer_path_route_set:
        load_balancer_id: "{{ public_load_balancer_id }}"
        name: "{{ path_route_set_name }}"
        path_routes: "{{ path_routes_changed_path }}"
        # purge_path_routes: True
        state: 'present'
      register: result

    - name: Assert that a Path Route added
      assert:
        that:
          - result.changed == True
          - result.path_route_set.path_routes|length == 1
    # ===========================================================================================
    - name: Update the Path Route Set by deleting a Path Route
      oci_loadbalancer_path_route_set:
        load_balancer_id: "{{ public_load_balancer_id }}"
        name: "{{ path_route_set_name }}"
        path_routes: []
        # delete_path_routes: True
        state: 'present'
      register: result

    - name: Assert that a Path Route has been deleted
      assert:
        that:
          - result.changed == True
          - result.path_route_set.path_routes|length == 0
    # ===========================================================================================
    # there is no longer a concept of explicit delete so you cant try to delete a non-existent path route set
    # - name: Try to Update the Path Route Set by deleting a non-existent Path Route, Idempotency test
    #   oci_loadbalancer_path_route_set:
    #     load_balancer_id: "{{ public_load_balancer_id }}"
    #     name: "{{ path_route_set_name }}"
    #     path_routes: "{{ path_routes_changed_path }}"
    #     delete_path_routes: True
    #     state: 'present'
    #   register: result

    # - name: Assert that no change has been made
    #   assert:
    #     that:
    #       - result.changed == False
    #       - result.path_route_set.path_routes|length == 0
    # ===========================================================================================
    - name: List All Path Route Sets
      oci_loadbalancer_path_route_set_facts:
        load_balancer_id: "{{ public_load_balancer_id }}"
      register: result

    - name: Assert that all Path Route Sets are listed
      assert:
        that:
          - result.path_route_sets|length == 2
    # ===========================================================================================
    - name: List a specific Path Route Sets
      oci_loadbalancer_path_route_set_facts:
        load_balancer_id: "{{ public_load_balancer_id }}"
        path_route_set_name: "{{ path_route_set_name }}"
      register: result

    - name: Assert that a specific Path Route Set is listed
      assert:
        that:
          - result.path_route_sets[0].name == path_route_set_name
    # ===========================================================================================
    - name: Delete Path Route Set
      oci_loadbalancer_path_route_set:
        load_balancer_id: "{{ public_load_balancer_id }}"
        name: "{{ path_route_set_name }}"
        state: 'absent'
      register: result

    - name: Assert that Path Route Set has been deleted
      assert:
        that:
          - result.changed == True
    # ===========================================================================================
    - name: Delete First Backend Set
      oci_loadbalancer_backend_set:
        name: "{{first_backend_set_name}}"
        load_balancer_id: "{{public_load_balancer_id}}"
        state: 'absent'
      register: result

    - name: Assert that Backend Set is deleted
      assert:
        that:
          - result.changed == True

    - name: Create Private Load Balancer
      oci_loadbalancer_load_balancer:
        compartment_id: "{{ test_compartment_ocid }}"
        name: "{{ lb_name }}"
        # backend_sets: "{{ backend_sets }}"
        shape_name: "{{ shape_name }}"
        is_private: True
        # listeners: "{{ listeners }}"
        subnet_ids:
        - "{{ test_subnet_id_ad1 }}"
        # certificates: "{{ certificates }}"
        state: 'present'
      register: result

    - set_fact:
        private_load_balancer_id: "{{ result.load_balancer.id }}"

    - name: Assert that Load Balancer is created
      assert:
        that:
          - result.changed == True

    - name: Delete  Public Load Balancer
      oci_loadbalancer_load_balancer:
        load_balancer_id: "{{ public_load_balancer_id }}"
        state: 'absent'
      register: result
    - name: Assert that Public Load Balancer is deleted
      assert:
        that:
        - result.changed == True

    - name: Delete Private Load Balancer
      oci_loadbalancer_load_balancer:
        load_balancer_id: "{{ private_load_balancer_id }}"
        state: 'absent'
      register: result
    - name: Assert that Private Load Balancer is deleted
      assert:
        that:
        - result.changed == True

    - name: Clean artifact path
      file:
        state: absent
        path: "{{cert_path}}"

    - name: Delete subnets
      oci_network_subnet:
        subnet_id: '{{ item }}'
        state: 'absent'
      with_items:
      - "{{ test_subnet_id_ad1 }}"
      - "{{ test_subnet_id_ad2 }}"

    - name: Delete test VCN
      oci_network_vcn:
        vcn_id: "{{ test_vcn_id }}"
        state: 'absent'
      register: result

    - name: Assert that changed is true
      assert:
        that:
        - result.changed == True

  rescue:

    - name: Delete Public Load Balancer
      oci_loadbalancer_load_balancer:
        load_balancer_id: "{{ public_load_balancer_id }}"
        state: 'absent'
      register: result
      ignore_errors: yes

    - name: Delete Private Load Balancer
      oci_loadbalancer_load_balancer:
        load_balancer_id: "{{ private_load_balancer_id }}"
        state: 'absent'
      register: result
      ignore_errors: yes
    # ===========================================================================================
    - name: Clean artifact path
      file:
        state: absent
        path: "{{cert_path}}"
      ignore_errors: yes
    # ===========================================================================================
    - name: Delete subnets
      oci_network_subnet:
        subnet_id: '{{ item }}'
        state: 'absent'
      with_items:
      - "{{ test_subnet_id_ad1 }}"
      - "{{ test_subnet_id_ad2 }}"
      ignore_errors: yes
    # ===========================================================================================
    - name: Delete test VCN
      oci_network_vcn:
        vcn_id: "{{ test_vcn_id }}"
        state: 'absent'
      register: result
      ignore_errors: yes

    - fail:
        msg: "{{ ansible_failed_result }}"
