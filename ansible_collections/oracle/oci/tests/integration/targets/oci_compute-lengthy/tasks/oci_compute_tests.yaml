---
# power action related tests for `oci_instance` and `oci_instance_facts`

## Cleanup before test run
- name: Get facts about all compute instances in compartment
  oci_compute_instance_facts:
    compartment_id: "{{test_compartment_ocid}}"
    availability_domain: "{{test_availability_domain}}"
  register: currinstances

- set_fact:
    todeleteinstance_id: "{{item.id}}"
  when: (item.display_name == test_mod_instance_name or item.display_name == test_instance_name) and (item.lifecycle_state != "TERMINATED")
  with_items: "{{currinstances.instances}}"
  ignore_errors: yes

- debug:
    msg: "Instance to delete: {{todeleteinstance_id}}"
  ignore_errors: yes

- name: Delete the instance
  oci_compute_instance:
    id: "{{todeleteinstance_id}}"
    state: 'absent'
  ignore_errors: yes

# Drop all windows instances
- set_fact:
    todeleteinstance_id: "{{item.id}}"
  when: (item.display_name == test_windows_instance_name) and (item.lifecycle_state != "TERMINATED")
  with_items: "{{currinstances.instances}}"
  ignore_errors: yes

- debug:
    msg: "Instance to delete: {{todeleteinstance_id}}"
  ignore_errors: yes

- name: Delete the windows instance
  oci_compute_instance:
    id: "{{todeleteinstance_id}}"
    state: 'absent'
  ignore_errors: yes

# Start lengthy compute tests
- block:

    - name: Create a temporary directory to house a temporary SSH keypair we will later use to connect to instance
      tempfile:
        state: directory
        suffix: cert
      register: result
    - set_fact:
        temp_certificates_path: "{{ result.path }}"
    - name: Generate a Private Key
      openssl_privatekey:
        path: "{{ temp_certificates_path }}/private_key.pem"
        type: RSA
        size: 2048
    - set_fact:
        my_test_public_key_path: "{{ temp_certificates_path }}/public_key.pem"
    - name: Generate a Public Key
      openssl_publickey:
        path: "{{ my_test_public_key_path }}"
        privatekey_path: "{{ temp_certificates_path }}/private_key.pem"
        format: OpenSSH

    ## Create/Launch
    - name: Create new compute instance
      oci_compute_instance:
        name: "{{test_instance_name}}"
        image_id: "{{image_ocid}}"
        shape: "{{test_instance_shape}}"
        compartment_id: "{{test_compartment_ocid}}"
        availability_domain: "{{test_availability_domain}}"
        metadata:
          foo: bar
          baz: quux
        create_vnic_details:
          hostname_label: "{{test_instance_name}}"
          subnet_id: "{{common_subnet_id}}"
        freeform_tags: "{{ test_default_freeform_tags }}"
      register: result

    # name: Set variable to current instance id
    - set_fact:
        my_instance_ocid: "{{result.instance.id}}"
    - debug:
        msg: "{{ result }}"
    - name: Assert that changed is true
      assert:
        that:
        - result.changed == True
        - result.instance.display_name == "{{test_instance_name}}"
        - result.instance.lifecycle_state == "RUNNING"

    - name: Create a new console connection to the instance
      oci_compute_instance_console_connection:
        compartment_id: "{{test_compartment_ocid}}"
        instance_id: "{{my_instance_ocid}}"
        public_key: "{{ lookup('file', my_test_public_key_path) }}"
        freeform_tags: "{{ test_default_freeform_tags }}"
        defined_tags: "{{ test_default_defined_tags }}"
      register: result
    - set_fact:
        my_instance_console_connection_ocid: "{{result.instance_console_connection.id}}"
    - debug:
        msg: "{{ result }}"
    - name: Assert that changed is true
      assert:
        that:
          - result.changed == True
          - result.instance_console_connection.instance_id == "{{my_instance_ocid}}"
          - result.instance_console_connection.freeform_tags.{{test_default_freeform_tag_key}} == "{{ test_default_freeform_tag_value }}"
          - result.instance_console_connection.defined_tags.{{test_tag_namespace_name}}.{{test_tag_name}} == "{{ test_default_defined_tag_value }}"

    # The public_key field exists in the create model (CreateInstanceConsoleConnectionDetails) but not in get model
    # (InstanceConsoleConnection). This causes the idempotence logic to consider the resource as a mismatch.
    # Even though it is easier to overcome this issue by just adding public_key to exclude attributes, it is not ideal
    # as a different user trying to create ConsoleConnection with different public key would succeed but the user would
    # not be able to create connection since the console connection was created with a different key.
    # This is fine for the following reasons:
    #  1) It is reasonable to assume that InstanceConsoleConnection is created for debugging issues with the instance
    #     and not in general playbooks which are run multiple times.
    #  2) Users can overcome this issue by using key_by in cases where the user is sure that the same public key is used
    #     and idempotence is required.
    - name: Create a new console connection to the instance - idempotence test. Confirm no match when public_key is considered for idempotence.
      oci_compute_instance_console_connection:
        compartment_id: "{{test_compartment_ocid}}"
        instance_id: "{{my_instance_ocid}}"
        public_key: "{{ lookup('file', my_test_public_key_path) }}"
        freeform_tags: "{{ test_default_freeform_tags }}"
        defined_tags: "{{ test_default_defined_tags }}"
      register: result
      ignore_errors: yes

    - debug:
        msg: "{{ result }}"
    - name: Assert that creating console connection failed
      assert:
        that:
          - result is failed

    - name: Create a new console connection to the instance - idempotence test. Confirm match when public_key is not considered for idempotence.
      oci_compute_instance_console_connection:
        compartment_id: "{{test_compartment_ocid}}"
        instance_id: "{{my_instance_ocid}}"
        public_key: "{{ lookup('file', my_test_public_key_path) }}"
        freeform_tags: "{{ test_default_freeform_tags }}"
        defined_tags: "{{ test_default_defined_tags }}"
        key_by:
          - instance_id
      register: result

    - debug:
        msg: "{{ result }}"
    - name: Assert that the console connection is not created
      assert:
        that:
          - result.changed == False
          - result.instance_console_connection.instance_id == "{{my_instance_ocid}}"
          - result.instance_console_connection.freeform_tags.{{test_default_freeform_tag_key}} == "{{ test_default_freeform_tag_value }}"
          - result.instance_console_connection.defined_tags.{{test_tag_namespace_name}}.{{test_tag_name}} == "{{ test_default_defined_tag_value }}"

    - name: List instance console connections of the compartment
      oci_compute_instance_console_connection_facts:
        compartment_id: "{{test_compartment_ocid}}"
      register: result
    - name: Assert that there is atleast one instance console connection in the compartment
      assert:
        that:
          - result.changed == False
          - result.instance_console_connections | length > 0

    - name: Get instance console connections by ocid
      oci_compute_instance_console_connection_facts:
        id: "{{my_instance_console_connection_ocid}}"
      register: result
    - name: Assert that there is atleast one instance console connection for the given instance
      assert:
        that:
          - result.changed == False
          - result.instance_console_connections | length == 1
          - result.instance_console_connections[0].id == my_instance_console_connection_ocid
          - result.instance_console_connections[0].instance_id == my_instance_ocid

    # oci_compute_instance_actions tests
    - name: Stop the instance
      oci_compute_instance_actions:
        id: "{{my_instance_ocid}}"
        action: 'stop'
      register: result
    - name: Assert that the instance was stopped
      assert:
        that:
          - result.changed == True
          - result.instance.lifecycle_state == "STOPPED"

    - name: Stop the instance - idempotency test
      oci_compute_instance_actions:
        id: "{{my_instance_ocid}}"
        action: 'stop'
      register: result

    - name: Assert that the instance was stopped, but changed is False
      assert:
        that:
          - result.changed == False
          - result.instance.lifecycle_state == "STOPPED"

    - name: Get facts of the new instance
      oci_compute_instance_facts:
        id: "{{my_instance_ocid}}"
      register: my_instance_facts
    - name: Assert that facts of new instance is retrieved, and its lifecycle_state is stopped
      assert:
        that:
          - my_instance_facts is defined
          - my_instance_facts.instances[0].lifecycle_state == "STOPPED"

    - name: Start the instance
      oci_compute_instance_actions:
        id: "{{my_instance_ocid}}"
        action: 'start'
      register: result
    - name: Assert that the instance was started
      assert:
        that:
          - result.changed == True
          - result.instance.lifecycle_state == "RUNNING"

    - name: Start the instance - idempotency test
      oci_compute_instance_actions:
        id: "{{my_instance_ocid}}"
        action: 'start'
      register: result
    - name: Assert that the instance was started, but changed is False
      assert:
        that:
          - result.changed == False
          - result.instance.lifecycle_state == "RUNNING"

    # XXX: Soft-reset scenario takes a long time (15 mins) to complete.
    # So commenting out this test for now

    #- name: Soft-reset the instance
    #  oci_compute_instance_actions:
    #    id: "{{setup_instance_id}}"
    #    action: "softreset"
    #  register: result
    #- name: Assert that the instance was reset, and changed is true
    #  assert:
    #    that:
    #      - result.changed == True
    #      - result.instance.lifecycle_state == "RUNNING"

    - name: Reset the instance
      oci_compute_instance_actions:
        id: "{{my_instance_ocid}}"
        action: "reset"
      register: result
    - name: Assert that the instance was reset, and changed is true
      assert:
        that:
          - result.changed == True
          - result.instance.lifecycle_state == "RUNNING"

    ## Delete/Terminate
    - name: Delete the instance
      oci_compute_instance:
        id: "{{my_instance_ocid}}"
        state: 'absent'
      register: result
    - name: Assert that the instance was terminated, and changed is true
      assert:
        that:
        - result.changed == True

  rescue:

    - name: Delete the instance
      oci_compute_instance:
        id: "{{my_instance_ocid}}"
        state: 'absent'
      register: result
      ignore_errors: yes

    - fail:
        msg: "{{ ansible_failed_result }}"

# ===========================================================================================

# Additional Idempotency tests
- block:

    - name: Create new compute instance with some optional attributes specified
      oci_compute_instance:
        name: "{{test_instance_name}}"
        image_id: "{{image_ocid}}"
        shape: "{{test_instance_shape}}"
        compartment_id: "{{test_compartment_ocid}}"
        availability_domain: "{{test_availability_domain}}"
        create_vnic_details:
          hostname_label: "{{test_instance_name}}"
          private_ip: "{{test_private_ip}}"
          subnet_id: "{{common_subnet_id}}"
        is_pv_encryption_in_transit_enabled: True
      register: result
    - set_fact:
        my_instance_ocid: "{{result.instance.id}}"
    - name: Assert that changed is true
      assert:
        that:
        - result.changed == True
        - result.instance.display_name == "{{test_instance_name}}"
        - result.instance.lifecycle_state == "RUNNING"
        - result.instance.launch_options.is_pv_encryption_in_transit_enabled == True

    - name: Create new compute instance with some optional attributes specified - idempotence test
      oci_compute_instance:
        name: "{{test_instance_name}}"
        image_id: "{{image_ocid}}"
        shape: "{{test_instance_shape}}"
        compartment_id: "{{test_compartment_ocid}}"
        availability_domain: "{{test_availability_domain}}"
        create_vnic_details:
          hostname_label: "{{test_instance_name}}"
          private_ip: "{{test_private_ip}}"
          subnet_id: "{{common_subnet_id}}"
        is_pv_encryption_in_transit_enabled: True
      register: result
    - name: Assert that changed is False, and the older instance id is returned
      assert:
        that:
        - result.changed == False
        - result.instance.display_name == "{{test_instance_name}}"
        - result.instance.lifecycle_state == "RUNNING"
        - result.instance.id == my_instance_ocid
        - result.instance.launch_options.is_pv_encryption_in_transit_enabled == True

    ## Delete/Terminate
    - name: Delete the instance
      oci_compute_instance:
        id: "{{my_instance_ocid}}"
        state: 'absent'

  rescue:

    - name: Delete the instance
      oci_compute_instance:
        id: "{{my_instance_ocid}}"
        state: 'absent'
      ignore_errors: yes

    - fail:
        msg: "{{ ansible_failed_result }}"

- block:

    - name: Create new compute instance with only required attributes
      oci_compute_instance:
        name: "{{test_instance_name}}"
        image_id: "{{image_ocid}}"
        shape: "{{test_instance_shape}}"
        compartment_id: "{{test_compartment_ocid}}"
        availability_domain: "{{test_availability_domain}}"
        create_vnic_details:
          subnet_id: "{{common_subnet_id}}"
      register: result
    - set_fact:
        my_instance_ocid: "{{result.instance.id}}"
    - name: Assert that changed is true
      assert:
        that:
        - result.changed == True
        - result.instance.lifecycle_state == "RUNNING"

    - name: Create new compute instance with only required attributes - idempotence test
      oci_compute_instance:
        name: "{{test_instance_name}}"
        image_id: "{{image_ocid}}"
        shape: "{{test_instance_shape}}"
        compartment_id: "{{test_compartment_ocid}}"
        availability_domain: "{{test_availability_domain}}"
        create_vnic_details:
          subnet_id: "{{common_subnet_id}}"
      register: result
    - name: Assert that changed is False, and the older instance id is returned
      assert:
        that:
        - result.changed == False
        - result.instance.lifecycle_state == "RUNNING"
        - result.instance.id == my_instance_ocid

    ## Delete/Terminate
    - name: Delete the instance
      oci_compute_instance:
        id: "{{my_instance_ocid}}"
        state: 'absent'

  rescue:

    - name: Delete the instance
      oci_compute_instance:
        id: "{{my_instance_ocid}}"
        state: 'absent'
      ignore_errors: yes

    - fail:
        msg: "{{ ansible_failed_result }}"

- block:

    - name: Create new compute instance with required attributes and metadata
      oci_compute_instance:
        name: "{{test_instance_name}}"
        image_id: "{{image_ocid}}"
        shape: "{{test_instance_shape}}"
        compartment_id: "{{test_compartment_ocid}}"
        availability_domain: "{{test_availability_domain}}"
        create_vnic_details:
          subnet_id: "{{common_subnet_id}}"
        metadata:
          foo: bar
          baz: quux
      register: result
    - set_fact:
        my_instance_ocid: "{{result.instance.id}}"
    - name: Assert that changed is true
      assert:
        that:
        - result.changed == True
        - result.instance.lifecycle_state == "RUNNING"

    - name: Create a new compute instance with only required attributes and different metadata
      oci_compute_instance:
        name: "{{test_instance_name}}"
        image_id: "{{image_ocid}}"
        shape: "{{test_instance_shape}}"
        compartment_id: "{{test_compartment_ocid}}"
        availability_domain: "{{test_availability_domain}}"
        create_vnic_details:
          subnet_id: "{{common_subnet_id}}"
        metadata:
          foo: notbar
          baz: notquux
      register: result
    - set_fact:
        my_instance_diff_metadata_ocid: "{{result.instance.id}}"
    - name: Assert that changed is True, and the instance id is not the older instance
      assert:
        that:
        - result.changed == True
        - result.instance.lifecycle_state == "RUNNING"
        - result.instance.id != my_instance_ocid

    ## Delete/Terminate
    - name: Delete the instance
      oci_compute_instance:
        id: "{{ my_instance_ocid }}"
        state: 'absent'

    - name: Delete the instance
      oci_compute_instance:
        id: "{{ my_instance_diff_metadata_ocid }}"
        state: 'absent'


  rescue:

    - name: Delete the instance
      oci_compute_instance:
        id: "{{ my_instance_ocid }}"
        state: 'absent'
      ignore_errors: yes

    - name: Delete the instance
      oci_compute_instance:
        id: "{{ my_instance_diff_metadata_ocid }}"
        state: 'absent'
      ignore_errors: yes

    - fail:
        msg: "{{ ansible_failed_result }}"

- block:

    - name: Create new compute instance with required attributes and no metadata attached
      oci_compute_instance:
        image_id: "{{image_ocid}}"
        shape: "{{test_instance_shape}}"
        compartment_id: "{{test_compartment_ocid}}"
        availability_domain: "{{test_availability_domain}}"
        create_vnic_details:
          subnet_id: "{{common_subnet_id}}"
        display_name: "{{test_instance_name}}"
      register: result
    - debug: msg="Created {{result}}"
    - set_fact:
        my_instance_ocid: "{{result.instance.id}}"
    - name: Assert that changed is true
      assert:
        that:
        - result.changed == True
        - result.instance.lifecycle_state == "RUNNING"

    - name: Create a new compute instance with only required attributes and different metadata
      oci_compute_instance:
        image_id: "{{image_ocid}}"
        shape: "{{test_instance_shape}}"
        compartment_id: "{{test_compartment_ocid}}"
        availability_domain: "{{test_availability_domain}}"
        create_vnic_details:
          subnet_id: "{{common_subnet_id}}"
        metadata:
          foo: notbar
          baz: notquux
      register: result
    - debug:
        msg: "{{result}}"
    - set_fact:
        my_instance_diff_metadata_ocid: "{{result.instance.id}}"
    - name: Assert that changed is True, and the instance id is not the older instance
      assert:
        that:
        - result.changed == True
        - result.instance.lifecycle_state == "RUNNING"
        - result.instance.id != my_instance_ocid

    ## Delete/Terminate
    - name: Delete the instances
      oci_compute_instance:
        id: "{{ my_instance_ocid }}"
        state: 'absent'

    - name: Delete the instances
      oci_compute_instance:
        id: "{{ my_instance_diff_metadata_ocid }}"
        state: 'absent'

  rescue:

    - name: Delete the instances
      oci_compute_instance:
        id: "{{ my_instance_ocid }}"
        state: 'absent'
      ignore_errors: yes

    - name: Delete the instances
      oci_compute_instance:
        id: "{{ my_instance_diff_metadata_ocid }}"
        state: 'absent'
      ignore_errors: yes

    - fail:
        msg: "{{ ansible_failed_result }}"

- block:

    ## Create/Launch
    - name: Create new compute instance from an image using source_details
      oci_compute_instance:
        name: "{{test_instance_name}}"
        shape: "{{test_instance_shape}}"
        compartment_id: "{{test_compartment_ocid}}"
        availability_domain: "{{test_availability_domain}}"
        source_details:
          source_type: "image"
          image_id: "{{image_ocid}}"
        create_vnic_details:
          subnet_id: "{{common_subnet_id}}"
      register: result
    # name: Set variable to current instance id
    - set_fact:
        my_instance_ocid: "{{result.instance.id}}"
    - debug:
        msg: "{{ result }}"
    - name: Assert that changed is true
      assert:
        that:
        - result.changed == True
        - result.instance.display_name == "{{test_instance_name}}"
        - result.instance.lifecycle_state == "RUNNING"
        - result.instance.image_id == "{{image_ocid}}"

    - name: Create new compute instance from an image using source_details - idempotency test
      oci_compute_instance:
        name: "{{test_instance_name}}"
        shape: "{{test_instance_shape}}"
        compartment_id: "{{test_compartment_ocid}}"
        availability_domain: "{{test_availability_domain}}"
        source_details:
          source_type: "image"
          image_id: "{{image_ocid}}"
        create_vnic_details:
          subnet_id: "{{common_subnet_id}}"
      register: result
    - debug:
        msg: "{{ result }}"
    - name: Assert that changed is false
      assert:
        that:
        - result.changed == False
        - result.instance.id == "{{my_instance_ocid}}"
        - result.instance.display_name == "{{test_instance_name}}"
        - result.instance.lifecycle_state == "RUNNING"
        - result.instance.image_id == "{{image_ocid}}"

    ## Delete/Terminate
    - name: Delete the instance
      oci_compute_instance:
        id: "{{my_instance_ocid}}"
        state: 'absent'
      register: result
    - name: Assert that the instance was terminated, and changed is true
      assert:
        that:
        - result.changed == True

  rescue:

    - name: Delete the instance
      oci_compute_instance:
        id: "{{my_instance_ocid}}"
        state: 'absent'
      register: result
      ignore_errors: yes

    - fail:
        msg: "{{ ansible_failed_result }}"

- block:

    # Test 409-conflict scenarios
    - name: Create new compute instance with only required attributes for testing 409-conflict scenarios
      oci_compute_instance:
        name: "{{test_instance_name}}"
        image_id: "{{image_ocid}}"
        shape: "{{test_instance_shape}}"
        compartment_id: "{{test_compartment_ocid}}"
        availability_domain: "{{test_availability_domain}}"
        create_vnic_details:
          subnet_id: "{{common_subnet_id}}"
      register: result
    - set_fact:
        my_instance_ocid: "{{result.instance.id}}"
    - name: Assert that changed is true
      assert:
        that:
        - result.changed == True
        - result.instance.lifecycle_state == "RUNNING"

    - name: Update an instance's tags in a loop multiple times to force a 409-conflict
      # this test ensures that we can safely handle 409-Conflicts that are thrown occasionally by `UpdateInstance` API

      # Run a set a tasks as a block multiple times - Ansible's block doesn't support loop today
      # So using idea from https://shasawas.wordpress.com/2016/05/23/how-to-loop-over-a-set-of-tasks-in-ansible/
      include_tasks: oci_compute_instance_update_freeform_defined_tags.yaml
      vars:
        instance_id: "{{ result.instance.id }}"
      loop: "{{range(0, 30)|list}}" # I constantly got a 409-Conflict within the first 30 runs. So capping the loop at 30.

    - name: Get instance tags
      oci_compute_instance_facts:
        instance_id: "{{result.instance.id}}"
      register: my_instance_facts
    - debug: msg="{{my_instance_facts}}"
    - name: Ensure instance tags are up to date
      assert:
        that:
        - my_instance_facts.instances[0].freeform_tags.{{test_default_freeform_tag_key}} == "{{ test_default_freeform_tag_value }}"

    ## Delete/Terminate
    - name: Delete the instance
      oci_compute_instance:
        id: "{{my_instance_ocid}}"
        state: 'absent'

  rescue:

    - name: Delete the instance
      oci_compute_instance:
        id: "{{my_instance_ocid}}"
        state: 'absent'
      ignore_errors: yes

    - fail:
        msg: "{{ ansible_failed_result }}"


- block:

    ###### Test windows instance initial credential user scenarios
    - name: Create new Windows compute instance
      oci_compute_instance:
        name: "{{test_windows_instance_name}}"
        image_id: "{{windows_image_ocid}}"
        shape: "{{test_windows_instance_shape}}"
        compartment_id: "{{test_compartment_ocid}}"
        availability_domain: "{{test_availability_domain}}"
        metadata:
          foo: bar
          baz: quux
        create_vnic_details:
          hostname_label: "{{test_windows_instance_name}}"
          subnet_id: "{{common_subnet_id}}"
      register: result
    - debug:
        msg: "{{ result }}"
    - set_fact:
        windows_instance_ocid: "{{result.instance.id}}"
    - name: Assert that changed is true and check that initial username and credentials are defined
      assert:
        that:
        - result.changed == True
        - result.instance.display_name == "{{test_windows_instance_name}}"

    - name: Get windows instance initial credentials
      oci_compute_instance_credentials_facts:
        id: "{{windows_instance_ocid}}"
      register: result
    - set_fact:
        curr_windows_initial_pass: "{{result.instance_credentials.password}}"
        curr_windows_initial_username: "{{result.instance_credentials.username}}"
    - name: Assert that windows initial credentials were defined
      assert:
        that:
        - result.changed == False
        - (curr_windows_initial_pass is defined) and (curr_windows_initial_pass is not none) and (curr_windows_initial_pass | trim != "")
        - (curr_windows_initial_username is defined) and (curr_windows_initial_username is not none) and (curr_windows_initial_username | trim != "")

    - name: Create new Windows compute instance - idempotency test
      oci_compute_instance:
        name: "{{test_windows_instance_name}}"
        image_id: "{{windows_image_ocid}}"
        shape: "{{test_windows_instance_shape}}"
        compartment_id: "{{test_compartment_ocid}}"
        availability_domain: "{{test_availability_domain}}"
        metadata:
          foo: bar
          baz: quux
        create_vnic_details:
          hostname_label: "{{test_windows_instance_name}}"
          subnet_id: "{{common_subnet_id}}"
      register: result
    - name: Assert that changed is false
      assert:
        that:
        - result.changed == False
        - result.instance.display_name == "{{test_windows_instance_name}}"
        - result.instance.id == windows_instance_ocid
    - name: Get windows instance initial credentials again
      oci_compute_instance_credentials_facts:
        id: "{{result.instance.id}}"
      register: result
    - name: Assert that windows initial credentials were the same as the earlier attempt
      assert:
        that:
        - result.instance_credentials.username == curr_windows_initial_username
        - result.instance_credentials.password == curr_windows_initial_pass

    - name: Terminate the windows instance
      oci_compute_instance:
        id: "{{windows_instance_ocid}}"
        state: 'absent'


  rescue:

    - name: Terminate the windows instance
      oci_compute_instance:
        id: "{{windows_instance_ocid}}"
        state: 'absent'
      ignore_errors: yes

    - fail:
        msg: "{{ ansible_failed_result }}"

- block:

    - name: Create new compute instance with is_pv_encryption_in_transit_enabled true
      oci_compute_instance:
        name: "{{test_instance_name}}"
        image_id: "{{image_ocid}}"
        shape: "{{test_instance_shape}}"
        compartment_id: "{{test_compartment_ocid}}"
        availability_domain: "{{test_availability_domain}}"
        create_vnic_details:
          hostname_label: "{{test_instance_name}}"
          private_ip: "{{test_private_ip}}"
          subnet_id: "{{common_subnet_id}}"
        is_pv_encryption_in_transit_enabled: True
      register: result
    - set_fact:
        my_instance_ocid: "{{result.instance.id}}"
    - name: Assert that changed is true and is_pv_encryption_in_transit_enabled
      assert:
        that:
        - result.changed == True
        - result.instance.display_name == "{{test_instance_name}}"
        - result.instance.lifecycle_state == "RUNNING"
        - result.instance.launch_options.is_pv_encryption_in_transit_enabled == True

    # the default value for is_pv_encryption_in_transit_enabled is false, but if the user does not explicitly specify
    # the param we do not consider it for idempotence check. We have taken a different route here from the old repo
    # where some of the modules handle default values, but not consistently across. There is very less benefit of
    # doing it at the cost of maintainability and also potentially many issues. If is_pv_encryption_in_transit_enabled
    # is a decider (in most of the cases, it may not be), the user can simply specify the value when creating the instance.
    - name: Create new compute instance with default value for is_pv_encryption_in_transit_enabled and confirm match
      oci_compute_instance:
        name: "{{test_instance_name}}"
        image_id: "{{image_ocid}}"
        shape: "{{test_instance_shape}}"
        compartment_id: "{{test_compartment_ocid}}"
        availability_domain: "{{test_availability_domain}}"
        create_vnic_details:
          subnet_id: "{{common_subnet_id}}"
      register: result

    - name: Assert that changed is false
      assert:
        that:
        - result.changed == False
        - result.instance.display_name == "{{test_instance_name}}"
        - result.instance.lifecycle_state == "RUNNING"

    ## Delete/Terminate
    - name: Delete the instance
      oci_compute_instance:
        id: "{{my_instance_ocid}}"
        state: 'absent'

  rescue:

    - name: Delete the instance
      oci_compute_instance:
        id: "{{my_instance_ocid}}"
        state: 'absent'
      ignore_errors: yes

    - fail:
        msg: "{{ ansible_failed_result }}"

- block:

    - name: Create new compute instance with is_pv_encryption_in_transit_enabled false
      oci_compute_instance:
        name: "{{test_instance_name}}"
        image_id: "{{image_ocid}}"
        shape: "{{test_instance_shape}}"
        compartment_id: "{{test_compartment_ocid}}"
        availability_domain: "{{test_availability_domain}}"
        create_vnic_details:
          hostname_label: "{{test_instance_name}}"
          private_ip: "{{test_private_ip}}"
          subnet_id: "{{common_subnet_id}}"
        is_pv_encryption_in_transit_enabled: False
      register: result
    - set_fact:
        my_instance_ocid: "{{result.instance.id}}"
    - name: Assert that changed is true
      assert:
        that:
        - result.changed == True
        - result.instance.display_name == "{{test_instance_name}}"
        - result.instance.lifecycle_state == "RUNNING"
        - result.instance.launch_options.is_pv_encryption_in_transit_enabled == False

    - name: Create new compute instance with default value for is_pv_encryption_in_transit_enabled and confirm match
      oci_compute_instance:
        name: "{{test_instance_name}}"
        image_id: "{{image_ocid}}"
        shape: "{{test_instance_shape}}"
        compartment_id: "{{test_compartment_ocid}}"
        availability_domain: "{{test_availability_domain}}"
        create_vnic_details:
          subnet_id: "{{common_subnet_id}}"
      register: result
    - name: Assert that changed is true
      assert:
        that:
        - result.changed == False
        - result.instance.launch_options.is_pv_encryption_in_transit_enabled == False

    ## Delete/Terminate
    - name: Delete the instance
      oci_compute_instance:
        id: "{{my_instance_ocid}}"
        state: 'absent'

  rescue:

    - name: Delete the instance
      oci_compute_instance:
        id: "{{my_instance_ocid}}"
        state: 'absent'
      ignore_errors: yes

    - fail:
        msg: "{{ ansible_failed_result }}"