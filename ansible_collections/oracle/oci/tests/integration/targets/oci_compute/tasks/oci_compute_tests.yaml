---
# tests for `oci_instance` and `oci_instance_facts`

## Cleanup before test run
- name: Get facts about all compute instances in compartment
  oci_compute_instance_facts:
    compartment_id: "{{test_compartment_ocid}}"
    availability_domain: "{{test_availability_domain}}"
  register: currinstances

- set_fact:
    todeleteinstance_id: "{{item.id}}"
  when: (item.display_name == test_mod_instance_name or item.display_name == test_instance_name) and (item.lifecycle_state != "TERMINATED")
  with_items: "{{currinstances.instances}}"
  ignore_errors: yes

- debug:
    msg: "Instance to delete: {{todeleteinstance_id}}"
  ignore_errors: yes

- name: Delete the instance
  oci_compute_instance:
        id: "{{todeleteinstance_id}}"
        state: 'absent'
  ignore_errors: yes

- block:
    - name: Create network_security_group
      oci_network_security_group:
        compartment_id: "{{ test_compartment_ocid }}"
        display_name: "my_nsg_{{random_suffix_1024}}"
        vcn_id: "{{ common_vcn_id }}"
      register: result

    - set_fact:
        my_nsg_id: "{{result.network_security_group.id}}"

    ## Create/Launch
    - name: Create new compute instance
      oci_compute_instance:
        name: "{{test_instance_name}}"
        shape: "{{test_instance_shape}}"
        compartment_id: "{{test_compartment_ocid}}"
        availability_domain: "{{test_availability_domain}}"
        metadata:
            foo: bar
            baz: quux
        source_details:
          source_type: "image"
          image_id: "{{image_ocid}}"
        create_vnic_details:
            hostname_label: "{{test_instance_name}}"
            subnet_id: "{{common_subnet_id}}"
            nsg_ids:
              - "{{ my_nsg_id }}"
        freeform_tags: "{{ test_default_freeform_tags }}"
        defined_tags: "{{ test_default_defined_tags }}"
      register: result
    # name: Set variable to current instance id
    - set_fact:
        my_instance_ocid: "{{result.instance.id}}"
    - debug:
        msg: "{{ result }}"
    - name: Assert that changed is true
      assert:
        that:
          - result.changed == True
          - result.instance.display_name == "{{test_instance_name}}"
          - result.instance.lifecycle_state == "RUNNING"
          - result.instance.freeform_tags.{{test_default_freeform_tag_key}} == "{{ test_default_freeform_tag_value }}"
          - result.instance.defined_tags.{{test_tag_namespace_name}}.{{test_tag_name}} == "{{ test_default_defined_tag_value }}"
          # TODO: Enable when this customisation is added to the instance module
#          - result.instance.primary_private_ip is defined
#          - result.instance.primary_private_ip != ""
#          - result.instance.primary_public_ip is defined
#          - result.instance.primary_public_ip != ""

    - name: Create new compute instance - idempotence test
      oci_compute_instance:
        name: "{{test_instance_name}}"
        shape: "{{test_instance_shape}}"
        compartment_id: "{{test_compartment_ocid}}"
        availability_domain: "{{test_availability_domain}}"
        metadata:
            foo: bar
            baz: quux
        source_details:
          source_type: "image"
          image_id: "{{image_ocid}}"
        create_vnic_details:
            hostname_label: "{{test_instance_name}}"
            subnet_id: "{{common_subnet_id}}"
            nsg_ids:
              - "{{ my_nsg_id }}"
        freeform_tags: "{{ test_default_freeform_tags }}"
        defined_tags: "{{ test_default_defined_tags }}"
      register: result
    - debug:
        msg: "{{ result }}"
    - name: Assert that changed is False, and the older instance id is returned
      assert:
        that:
          - result.changed == False
          - result.instance.display_name == "{{test_instance_name}}"
          - result.instance.lifecycle_state == "RUNNING"
          - result.instance.freeform_tags.{{test_default_freeform_tag_key}} == "{{ test_default_freeform_tag_value }}"
          - result.instance.id == my_instance_ocid
          - result.instance.defined_tags.{{test_tag_namespace_name}}.{{test_tag_name}} == "{{ test_default_defined_tag_value }}"
          # TODO: Enable when this customisation is added to the instance module
#          - result.instance.primary_private_ip is defined
#          - result.instance.primary_private_ip != ""
#          - result.instance.primary_public_ip is defined
#          - result.instance.primary_public_ip != ""

    # Update the defined tag's value
    - name: Update defined tag
      oci_compute_instance:
        id: "{{ my_instance_ocid }}"
        defined_tags: "{{ test_default_updated_defined_tags }}"
      register: result
    - debug:
        msg: "{{ result }}"
    - name: Assert that changed is true and the defined tag's value was updated
      assert:
        that:
          - result.changed == True
          - result.instance.id == "{{ my_instance_ocid }}"
          - result.instance.display_name == "{{test_instance_name}}"
          - result.instance.lifecycle_state == "RUNNING"
          - result.instance.freeform_tags.{{test_default_freeform_tag_key}} == "{{ test_default_freeform_tag_value }}"
          - result.instance.defined_tags.{{test_tag_namespace_name}}.{{test_tag_name}} == "{{ test_default_defined_tag_updated_value }}"

    # Remove free-formed tags associated with the instance
    - name: Remove free-formed tags associated with the instance
      oci_compute_instance:
        id: "{{ my_instance_ocid }}"
        freeform_tags: {}
      register: result
    - debug:
        msg: "{{ result }}"
    - name: Assert that changed is true and there are no free-form tags associated with the instance
      assert:
        that:
          - result.changed == True
          - result.instance.id == "{{ my_instance_ocid }}"
          - result.instance.display_name == "{{test_instance_name}}"
          - result.instance.lifecycle_state == "RUNNING"
          - result.instance.freeform_tags == {}
          - result.instance.defined_tags.{{test_tag_namespace_name}}.{{test_tag_name}} == "{{ test_default_defined_tag_updated_value }}"

    # ====================================================================================================

# TODO: Enable when all necessary modules are available
#    - name: Create a block volume
#      oci_volume:
#        availability_domain: "{{ test_availability_domain }}"
#        compartment_id: "{{test_compartment_ocid}}"
#        display_name: "test_{{random_suffix_1024}}"
#        size_in_gbs: 50
#        wait: true
#      register: result
#
#    - set_fact:
#        test_volume_ocid: "{{ result.volume.id }}"
#
#    # Test attaching a volume to a created instance with oci_volume_attachment
#    - name: Attach a test volume to instance using oci_volume_attachment
#      oci_volume_attachment:
#        instance_id: "{{my_instance_ocid}}"
#        volume_id: "{{test_volume_ocid}}"
#        type: iscsi
#        device: "{{test_device_path}}"
#      register: result
#
#    - set_fact:
#        volume_attachment_ocid: "{{result.volume_attachment.id}}"
#
#    - name: Assert that changed is true
#      assert:
#        that:
#          - result.changed == True
#          - result.volume_attachment.instance_id == my_instance_ocid
#          - result.volume_attachment.volume_id == test_volume_ocid
#          - result.volume_attachment.iscsi_attach_commands | length == 3
#          - result.volume_attachment.iscsi_detach_commands | length == 2
#          - result.volume_attachment.device == test_device_path
#
#    # ====================================================================================================
#
#    - name: Reattempt attaching a test volume to instance using oci_volume_attachment to check idempotence
#      oci_volume_attachment:
#        instance_id: "{{my_instance_ocid}}"
#        volume_id: "{{test_volume_ocid}}"
#        type: iscsi
#        device: "{{test_device_path}}"
#      register: result
#
#    - name: Assert that changed is false
#      assert:
#        that:
#          - result.changed == False
#          - result.volume_attachment.id == volume_attachment_ocid
#          - result.volume_attachment.iscsi_attach_commands | length == 3
#          - result.volume_attachment.iscsi_detach_commands | length == 2
#          - result.volume_attachment.device == test_device_path
#
#    # ====================================================================================================
#
#    - name: Get information of all volume attachments
#      oci_volume_attachment_facts:
#        compartment_id: "{{test_compartment_ocid}}"
#      register: result
#
#    - set_fact:
#        facts_of_test_attachment: "{{item}}"
#      with_items: "{{result.volume_attachments}}"
#      when: item.id == volume_attachment_ocid
#
#    - name: Assert the number of volume_attachments in compartment is non-zero and that test attachment is in the list
#      assert:
#        that:
#          - result.volume_attachments | length > 0
#          - facts_of_test_attachment is defined
#
#    # ====================================================================================================
#
#    - name: Get information of a volume attachment
#      oci_volume_attachment_facts:
#        volume_attachment_id: "{{volume_attachment_ocid}}"
#      register: result
#
#    - name: Assert that facts of test attachment are retrieved
#      assert:
#        that:
#          - result.volume_attachments | length == 1
#          - result.volume_attachments[0].id == volume_attachment_ocid
#          - result.volume_attachments[0].iscsi_attach_commands | length == 3
#          - result.volume_attachments[0].iscsi_detach_commands | length == 2
#
#    # ====================================================================================================
#
#    - name: Get information of volume attachments with instance_id
#      oci_volume_attachment_facts:
#        compartment_id: "{{test_compartment_ocid}}"
#        instance_id: "{{my_instance_ocid}}"
#      register: result
#
#    - set_fact:
#        facts_of_test_attachment: "{{item}}"
#      with_items: "{{result.volume_attachments}}"
#      when: item.id == volume_attachment_ocid
#
#    - name: Assert the number of volume_attachments is non-zero and that test attachment is in the list
#      assert:
#        that:
#          - result.volume_attachments | length > 0
#          - facts_of_test_attachment is defined
#
#    # ====================================================================================================
#
#    - name: Get information of volume attachments with volume_id
#      oci_volume_attachment_facts:
#        compartment_id: "{{test_compartment_ocid}}"
#        volume_id: "{{test_volume_ocid}}"
#      register: result
#
#    - set_fact:
#        facts_of_test_attachment: "{{item}}"
#      with_items: "{{result.volume_attachments}}"
#      when: item.id == volume_attachment_ocid
#
#    - name: Assert the number of volume_attachments is non-zero and that test attachment is in the list
#      assert:
#        that:
#          - result.volume_attachments | length > 0
#          - facts_of_test_attachment is defined
#
#    # ====================================================================================================
#
#    - name: Get information of volume attachments with both instance_id & volume_id
#      oci_volume_attachment_facts:
#        compartment_id: "{{test_compartment_ocid}}"
#        instance_id: "{{my_instance_ocid}}"
#        volume_id: "{{test_volume_ocid}}"
#      register: result
#
#    - name: Assert that facts of test attachment are retrieved
#      assert:
#        that:
#          - result.volume_attachments | length == 1
#          - result.volume_attachments[0].id == volume_attachment_ocid
#
#    # ====================================================================================================
#
#    - name: Get volume information by updating name to assert attachment information is present in the returned value
#      oci_volume:
#        volume_id: "{{test_volume_ocid}}"
#        name: 'integration_test_volume_{{random_suffix_1024}}'
#      environment:
#        OCI_ANSIBLE_EXPERIMENTAL: True
#      register: result
#
#    - name: Assert attachment information is present in the returned value
#      assert:
#        that:
#          - result.volume.attached_instance_information[0].id == volume_attachment_ocid
#
#    # ====================================================================================================
#
#    - name: Get volume facts to assert attachment information is present in the returned value
#      oci_volume_facts:
#        volume_id: "{{test_volume_ocid}}"
#      environment:
#        OCI_ANSIBLE_EXPERIMENTAL: True
#      register: result
#
#    - name: Assert attachment information is present in the returned volume facts
#      assert:
#        that:
#          - result.volumes[0].attached_instance_information[0].id == volume_attachment_ocid
#
#    - name: Get volume facts to assert attachment information is present in the returned value, with lookup_all_attached_instances set to true
#      oci_volume_facts:
#        volume_id: "{{test_volume_ocid}}"
#        # in this test we don't have an attachment in a different compartment
#        # add it later, and test that an attachment in a different compartment is listed
#        # too in the return value.
#        lookup_all_attached_instances: yes
#      environment:
#        OCI_ANSIBLE_EXPERIMENTAL: True
#      register: result
#
#    - name: Assert attachment information is present in the returned volume facts
#      assert:
#        that:
#          - result.volumes[0].attached_instance_information[0].id == volume_attachment_ocid
#    # ====================================================================================================
#
#    - name: Detach a block volume
#      oci_volume_attachment:
#        volume_attachment_id: "{{volume_attachment_ocid}}"
#        state: absent
#      register: result
#
#    - name: Assert that changed is true
#      assert:
#        that:
#          - result.changed == True
#
#    # ====================================================================================================
#
#    - name: Check idempotency of block volume detach operation
#      oci_volume_attachment:
#        volume_attachment_id: "{{volume_attachment_ocid}}"
#        state: absent
#      register: result
#
#    - name: Assert that changed is false
#      assert:
#        that:
#          - result.changed == False
#
#    # ====================================================================================================
#
#    # Test attaching a volume(with chap enabled) to a created instance with oci_volume_attachment
#    - name: Attach a test volume to instance using oci_volume_attachment
#      oci_volume_attachment:
#        instance_id: "{{my_instance_ocid}}"
#        volume_id: "{{test_volume_ocid}}"
#        type: iscsi
#        use_chap: yes
#      register: chap_result
#
#    - set_fact:
#        chap_volume_attachment_ocid: "{{chap_result.volume_attachment.id}}"
#
#    - name: Assert that changed is true
#      assert:
#        that:
#        - chap_result.changed == True
#        - chap_result.volume_attachment.instance_id == my_instance_ocid
#        - chap_result.volume_attachment.volume_id == test_volume_ocid
#        - chap_result.volume_attachment.iscsi_attach_commands | length == 6
#        - chap_result.volume_attachment.iscsi_detach_commands | length == 2
#
#    - name: Get information of a volume attachment
#      oci_volume_attachment_facts:
#        volume_attachment_id: "{{chap_volume_attachment_ocid}}"
#      register: result
#
#    - name: Assert that facts of test attachment are retrieved
#      assert:
#        that:
#        - result.volume_attachments | length == 1
#        - result.volume_attachments[0].id == chap_volume_attachment_ocid
#        - result.volume_attachments[0].iscsi_attach_commands | length == 6
#        - result.volume_attachments[0].iscsi_detach_commands | length == 2
#
#    - name: Detach a block volume
#      oci_volume_attachment:
#        volume_attachment_id: "{{chap_volume_attachment_ocid}}"
#        state: absent
#      register: result
#
#    - name: Assert that changed is true
#      assert:
#        that:
#        - result.changed == True
#
#    # ====================================================================================================

    - name: Get facts about all compute instances in compartment and availability domain
      oci_compute_instance_facts:
        compartment_id: "{{test_compartment_ocid}}"
        availability_domain: "{{test_availability_domain}}"
      register: my_oci_instances

    - set_fact:
        facts_of_latest_instance: "{{ item }}"
      with_items: "{{my_oci_instances.instances}}"
      when: item.id == my_instance_ocid

    - name: Assert the number of instances in compartment is non-zero and that we can retrieve facts about the newly created instance
      assert:
        that:
            - my_oci_instances.instances | length > 0
            - facts_of_latest_instance is defined

    - name: Get facts about all compute instances in compartment and filter by lifecycle_state
      oci_compute_instance_facts:
        compartment_id: "{{test_compartment_ocid}}"
        lifecycle_state: "RUNNING"
      register: my_running_oci_instances

    - set_fact:
        facts_of_latest_instance: "{{ item }}"
      with_items: "{{my_running_oci_instances.instances}}"
      when: item.id == my_instance_ocid

    - name: Assert the number of instances in compartment is non-zero and that we can retrieve facts about the newly created instance
      assert:
        that:
          - my_oci_instances.instances | length > 0
          - facts_of_latest_instance is defined
          - facts_of_latest_instance.lifecycle_state == "RUNNING"

    # ====================================================================================================

    - name: Get facts about all compute instances in a compartment
      oci_compute_instance_facts:
        compartment_id: "{{test_compartment_ocid}}"
      register: my_oci_instances

    - set_fact:
        facts_of_latest_instance: "{{ item }}"
      with_items: "{{my_oci_instances.instances}}"
      when: item.id == my_instance_ocid

    - name: Assert the number of instances in compartment is non-zero and that we can retrieve facts about the newly created instance
      assert:
        that:
          - my_oci_instances.instances | length > 0
          - facts_of_latest_instance is defined

    # ====================================================================================================

    ## Update
    - name: Change the name of the newly created instance
      oci_compute_instance:
        name: "{{test_mod_instance_name}}"
        id: "{{my_instance_ocid}}"
      register: result
    - name: Assert that changed is true and the name is the modified name
      assert:
        that:
          - result.changed == True
          - result.instance.display_name == "{{test_mod_instance_name}}"
          - result.instance.lifecycle_state == "RUNNING"

    # ====================================================================================================

    # TODO: Enable these when this customisation is added to instance module
    ## Get IPs
#    - name: Get private and public IPs
#      oci_compute_instance_facts:
#          id: "{{my_instance_ocid}}"
#      register: result
#    - name: Assert that IPs are returned and not empty
#      assert:
#        that:
#          - "'primary_private_ip' in result.instances[0]"
#          - result.instances[0].primary_private_ip != ""
#          - "'primary_public_ip' in result.instances[0]"
#          - result.instances[0].primary_public_ip != ""

    - name: Delete the instance
      oci_compute_instance:
        id: "{{my_instance_ocid}}"
        state: 'absent'
      register: delete_instance_result

    - name: Assert that the instance was terminated, and changed is true
      assert:
        that:
        - delete_instance_result.changed == True

#    - name: Delete the test volume
#      oci_volume:
#        id: "{{ test_volume_ocid }}"
#        state: absent
#      register: delete_vol_result
#
#    - name: Assert that changed is true
#      assert:
#        that:
#        - delete_vol_result.changed == True

    - name: Delete the network security group
      oci_network_security_group:
        id: "{{my_nsg_id}}"
        state: 'absent'
      register: delete_nsg_result

    - name: Assert that the network security group was terminated, and changed is true
      assert:
        that:
        - delete_nsg_result.changed == True
        - delete_nsg_result.network_security_group.lifecycle_state == "DELETED"

  rescue:

    - name: Delete the instance
      oci_compute_instance:
        id: "{{my_instance_ocid}}"
        state: 'absent'
      register: delete_instance_result
      ignore_errors: yes

#    - name: Delete the test volume
#      oci_volume:
#        id: "{{ test_volume_ocid }}"
#        state: absent
#      register: delete_vol_result
#      ignore_errors: yes

    - name: Delete the network security group
      oci_network_security_group:
        id: "{{my_nsg_id}}"
        state: 'absent'
      ignore_errors: yes

    - fail:
        msg: "{{ ansible_failed_result }}"

# Test for custom boot volume size

# TODO: Enable when all necessary modules are available
#- block:
#    # ===========================================================================================
#    ## Create/Launch
#    - name: Create new compute instance for testing custom bool volume size
#      oci_compute_instance:
#        name: "custom-boot-vol-{{test_instance_name}}"
#        shape: "{{test_instance_shape}}"
#        compartment_id: "{{test_compartment_ocid}}"
#        availability_domain: "{{test_availability_domain}}"
#        source_details:
#          source_type: "image"
#          image_id: "{{image_ocid}}"
#          boot_volume_size_in_gbs: "{{test_instance_boot_volume_size_in_gbs}}"
#        vnic:
#            hostname_label: "custombootvol{{test_instance_name}}"
#            subnet_id: "{{common_subnet_id}}"
#      register: result
#    # name: Set variable to current instance id
#    - set_fact:
#        my_custom_boot_vol_instance_ocid: "{{result.instance.id}}"
#    - debug:
#        msg: "{{ result }}"
#    - name: Assert that changed is true
#      assert:
#          that:
#              - result.changed == True
#              - result.instance.display_name == "custom-boot-vol-{{test_instance_name}}"
#              - result.instance.lifecycle_state == "RUNNING"
#
#    - name: Get the boot volume attachment details for the instance
#      oci_boot_volume_attachment_facts:
#        availability_domain: "{{ test_availability_domain }}"
#        compartment_id: "{{ test_compartment_ocid }}"
#        instance_id: "{{ my_custom_boot_vol_instance_ocid }}"
#      register: boot_volume_attachment_result
#
#    - set_fact:
#        boot_volume_id: "{{ boot_volume_attachment_result.boot_volume_attachments[0].boot_volume_id }}"
#
#    - name: Get the boot volume details
#      oci_boot_volume_facts:
#        boot_volume_id: "{{ boot_volume_id }}"
#      register: boot_volume_result
#
#    - set_fact:
#        boot_volume: "{{ boot_volume_result.boot_volumes[0] }}"
#
#    - name: Check that the boot volume has the custom size specified
#      assert:
#        that:
#          - boot_volume.id == boot_volume_id
#          - boot_volume.size_in_gbs == test_instance_boot_volume_size_in_gbs
#
#    ## Delete/Terminate
#    - name: Delete the instance
#      oci_compute_instance:
#        id: "{{my_custom_boot_vol_instance_ocid}}"
#        state: 'absent'
#      register: result
#
#    - name: Assert that the instance was terminated, and changed is true
#      assert:
#        that:
#        - result.changed == True
#        - result.instance.lifecycle_state == "TERMINATED"
#
#
#  rescue:
#
#    - name: Delete the instance
#      oci_compute_instance:
#        id: "{{my_custom_boot_vol_instance_ocid}}"
#        state: 'absent'
#      register: result
#      ignore_errors: yes
#
#    - fail:
#        msg: "{{ ansible_failed_result }}"
