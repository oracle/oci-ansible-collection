---
## Cleanup any test app catalog instances before test run
- name: Get facts about all compute instances in compartment
  oci_compute_instance_facts:
    compartment_id: "{{ test_compartment_ocid }}"
    availability_domain: "{{ test_availability_domain }}"
  register: currinstances

- set_fact:
    todeleteinstance_id: "{{ item.id }}"
  when: (item.display_name == test_app_catalog_instance_name) and (item.lifecycle_state != "TERMINATED")
  with_items: "{{ currinstances.instances }}"
  ignore_errors: yes

- debug:
    msg: "Instance to delete: {{ todeleteinstance_id }}"
  ignore_errors: yes

- name: Delete the instance
  oci_compute_instance:
    id: "{{ todeleteinstance_id }}"
    state: absent
  ignore_errors: yes

- name: Get all the resource versions of the test listing
  oci_compute_app_catalog_listing_resource_version_facts:
    listing_id: "{{ test_app_catalog_listing_id }}"
  register: delete_all_resource_versions_result
  ignore_errors: yes

- debug:
    msg: "{{ delete_all_resource_versions_result }}"
  ignore_errors: yes

- set_fact:
    delete_latest_resource_version: "{{ delete_all_resource_versions_result.app_catalog_listing_resource_versions[0].listing_resource_version }}"
  ignore_errors: yes

- name: Delete the subscription
  oci_compute_app_catalog_subscription:
    compartment_id: "{{ test_compartment_ocid }}"
    listing_id: "{{ test_app_catalog_listing_id }}"
    listing_resource_version: "{{ delete_latest_resource_version }}"
    state: absent
  register: pre_delete_subscription_result
  ignore_errors: yes

- debug:
    msg: "{{ pre_delete_subscription_result }}"
  ignore_errors: yes

# ====================================================================================================

- block:

    # tests for `oci_compute_app_catalog_listing_facts`
    - name: Get all app catalog listings
      oci_compute_app_catalog_listing_facts:
      register: all_app_catalog_listings_result

    - set_fact:
        all_app_catalog_listings: "{{ all_app_catalog_listings_result.app_catalog_listings }}"

    - debug:
        msg: "{{ all_app_catalog_listings_result }}"

    - name: Get all app catalog listings published by oracle
      oci_compute_app_catalog_listing_facts:
        publisher_type: ORACLE
      register: oracle_app_catalog_listings_result

    - set_fact:
        oracle_app_catalog_listings: "{{ oracle_app_catalog_listings_result.app_catalog_listings }}"

    - debug:
        msg: "{{ oracle_app_catalog_listings_result }}"

    - set_fact:
        all_app_catalog_listings_length: "{{ all_app_catalog_listings | length }}"
        oracle_app_catalog_listings_length: "{{ oracle_app_catalog_listings | length }}"

    - name: Assert that number of all listings greater than equal to filtered (published by oracle) listings
      assert:
        that:
        - all_app_catalog_listings_length | int > 0
        - oracle_app_catalog_listings_length | int > 0
        - all_app_catalog_listings_length | int >= oracle_app_catalog_listings_length | int

    # ====================================================================================================

    # tests for `oci_compute_app_catalog_listing_resource_version_facts`
    - name: Get all the resource versions of the test listing
      oci_compute_app_catalog_listing_resource_version_facts:
        listing_id: "{{ test_app_catalog_listing_id }}"
      register: all_resource_versions_result

    - debug:
        msg: "{{ all_resource_versions_result }}"

    - set_fact:
        resource_versions: "{{ all_resource_versions_result.app_catalog_listing_resource_versions }}"
        latest_resource_version: "{{ all_resource_versions_result.app_catalog_listing_resource_versions[0].listing_resource_version }}"

    - name: Get details of a specific version of a listing
      oci_compute_app_catalog_listing_resource_version_facts:
        listing_id: "{{ test_app_catalog_listing_id }}"
        resource_version: "{{ latest_resource_version }}"
      register: specific_version_result

    - debug:
        msg: "{{ specific_version_result }}"

    - name: Assert that there are 1 or more versions and we can retrieve details about a specific version
      assert:
        that:
        - resource_versions | length >= 1
        - specific_version_result.app_catalog_listing_resource_versions[0].listing_id == test_app_catalog_listing_id
        - specific_version_result.app_catalog_listing_resource_versions[0].listing_resource_version == latest_resource_version

    - set_fact:
        test_app_catalog_image_id: "{{ specific_version_result.app_catalog_listing_resource_versions[0].listing_resource_id }}"

    # ====================================================================================================      -

    # tests for `oci_compute_app_catalog_listing_resource_version_agreement_facts`
    - name: Create an agreement for the listing
      oci_compute_app_catalog_listing_resource_version_agreement_facts:
        listing_id: "{{ test_app_catalog_listing_id }}"
        resource_version: "{{ latest_resource_version }}"
      register: agreement_result

    - name: Assert that the agreement for the test listing is retrieved
      assert:
        that:
        - agreement_result.app_catalog_listing_resource_version_agreement.listing_id == test_app_catalog_listing_id
        - agreement_result.app_catalog_listing_resource_version_agreement.listing_resource_version == latest_resource_version

    # ====================================================================================================      -

    # tests for `oci_compute_app_catalog_subscription` and `oci_compute_app_catalog_subscription_facts`
    - name: Get all the app catalog subscriptions
      oci_compute_app_catalog_subscription_facts:
        compartment_id: "{{ test_compartment_ocid }}"
        listing_id: "{{ test_app_catalog_listing_id }}"
      register: subscription_result

    - debug:
        msg: "{{ subscription_result }}"

    - set_fact:
        subscriptions: "{{ subscription_result.app_catalog_subscriptions }}"

    - set_fact:
        test_subscription_exists: yes
      with_items: "{{ subscriptions }}"
      when: item.listing_resource_version == latest_resource_version

    - fail:
        msg: "The app catalog subscription already exists. Failing gracefully to avoid any failures due to race conditions."
      when: test_subscription_exists is defined

    - name: Create an agreement for the listing
      oci_compute_app_catalog_listing_resource_version_agreement_facts:
        listing_id: "{{ test_app_catalog_listing_id }}"
        resource_version: "{{ latest_resource_version }}"
      register: agreement_result

    - set_fact:
        agreement: "{{ agreement_result.app_catalog_listing_resource_version_agreement }}"

    - name: Create subscription if it does not exist
      oci_compute_app_catalog_subscription:
        compartment_id: "{{ test_compartment_ocid }}"
        eula_link: "{{ agreement.eula_link }}"
        listing_id: "{{ test_app_catalog_listing_id }}"
        listing_resource_version: "{{ latest_resource_version }}"
        oracle_terms_of_use_link: "{{ agreement.oracle_terms_of_use_link }}"
        signature: "{{ agreement.signature }}"
        time_retrieved: "{{ agreement.time_retrieved }}"
      register: create_subscription_result

    - debug:
        msg: "{{ create_subscription_result }}"

    - name: Check if the subscription is created
      assert:
        that:
        - create_subscription_result is defined
        - create_subscription_result.changed == True
        - create_subscription_result.app_catalog_subscription.compartment_id == test_compartment_ocid
        - create_subscription_result.app_catalog_subscription.listing_id == test_app_catalog_listing_id
        - create_subscription_result.app_catalog_subscription.listing_resource_version == latest_resource_version

    - name: Create the subscription again
      oci_compute_app_catalog_subscription:
        compartment_id: "{{ test_compartment_ocid }}"
        eula_link: "{{ agreement.eula_link }}"
        listing_id: "{{ test_app_catalog_listing_id }}"
        listing_resource_version: "{{ latest_resource_version }}"
        oracle_terms_of_use_link: "{{ agreement.oracle_terms_of_use_link }}"
        signature: "{{ agreement.signature }}"
        time_retrieved: "{{ agreement.time_retrieved }}"
      register: duplicate_create_subscription_result

    - debug:
        msg: "{{ duplicate_create_subscription_result }}"

    - name: Idempotency check for the duplicate create subscription call
      assert:
        that:
        - duplicate_create_subscription_result.changed == False
        - duplicate_create_subscription_result.app_catalog_subscription.compartment_id == test_compartment_ocid
        - duplicate_create_subscription_result.app_catalog_subscription.listing_id == test_app_catalog_listing_id
        - duplicate_create_subscription_result.app_catalog_subscription.listing_resource_version == latest_resource_version

    - name: Delete the subscription
      oci_compute_app_catalog_subscription:
        compartment_id: "{{ test_compartment_ocid }}"
        listing_id: "{{ test_app_catalog_listing_id }}"
        listing_resource_version: "{{ latest_resource_version }}"
        state: absent
      register: delete_subscription_result

    - name: Check if the subscription is deleted
      assert:
        that:
        - delete_subscription_result.changed == True
        - delete_subscription_result.app_catalog_subscription.compartment_id == test_compartment_ocid
        - delete_subscription_result.app_catalog_subscription.listing_id == test_app_catalog_listing_id
        - delete_subscription_result.app_catalog_subscription.listing_resource_version == latest_resource_version

    - name: Delete the subscription again
      oci_compute_app_catalog_subscription:
        compartment_id: "{{ test_compartment_ocid }}"
        listing_id: "{{ test_app_catalog_listing_id }}"
        listing_resource_version: "{{ latest_resource_version }}"
        state: absent
      register: duplicate_delete_subscription_result

    - name: Idempotency check for the duplicate delete subscription call
      assert:
        that:
        - duplicate_delete_subscription_result.changed == False

    # ====================================================================================================      -

    - name: Create an agreement for the listing
      oci_compute_app_catalog_listing_resource_version_agreement_facts:
        listing_id: "{{ test_app_catalog_listing_id }}"
        resource_version: "{{ latest_resource_version }}"
      register: agreement_result

    - set_fact:
        agreement: "{{ agreement_result.app_catalog_listing_resource_version_agreement }}"

    - name: Create subscription before launching instance
      oci_compute_app_catalog_subscription:
        compartment_id: "{{ test_compartment_ocid }}"
        eula_link: "{{ agreement.eula_link }}"
        listing_id: "{{ test_app_catalog_listing_id }}"
        listing_resource_version: "{{ latest_resource_version }}"
        oracle_terms_of_use_link: "{{ agreement.oracle_terms_of_use_link }}"
        signature: "{{ agreement.signature }}"
        time_retrieved: "{{ agreement.time_retrieved }}"
      register: create_subscription_result

    # launch an instance using an image from app catalog
    - name: Launch an instance using an image from app catalog
      oci_compute_instance:
        name: "{{ test_app_catalog_instance_name }}"
        image_id: "{{ test_app_catalog_image_id }}"
        shape: "{{ test_app_catalog_instance_shape }}"
        compartment_id: "{{ test_compartment_ocid }}"
        availability_domain: "{{ test_availability_domain }}"
        create_vnic_details:
          hostname_label: "{{ test_app_catalog_instance_name }}"
          subnet_id: "{{ common_subnet_id }}"
      register: instance_launch_result

    - debug:
        msg: "{{ instance_launch_result }}"

    - set_fact:
        app_catalog_instance_id: "{{ instance_launch_result.instance.id }}"

    - debug:
        msg: "App catalog instance id: {{ app_catalog_instance_id }}"

    - name: Assert that instance is created successfully
      assert:
        that:
        - instance_launch_result.changed == True
        - instance_launch_result.instance.display_name == "{{ test_app_catalog_instance_name }}"
        - instance_launch_result.instance.image_id == "{{ test_app_catalog_image_id }}"
        - instance_launch_result.instance.lifecycle_state == "RUNNING"

    # Cleanup
    - name: Delete the instance
      oci_compute_instance:
        id: "{{ app_catalog_instance_id }}"
        state: absent
      register: terminate_instance_result

    - debug:
        msg: "{{ terminate_instance_result }}"

    - name: Assert that the instance was terminated, and changed is true
      assert:
        that:
        - terminate_instance_result.changed == True

    - name: Delete the subscription
      oci_compute_app_catalog_subscription:
        compartment_id: "{{ test_compartment_ocid }}"
        listing_id: "{{ test_app_catalog_listing_id }}"
        listing_resource_version: "{{ latest_resource_version }}"
        state: absent
      register: post_delete_subscription_result

    - debug:
        msg: "{{ post_delete_subscription_result }}"


  rescue:

    - name: Delete the instance
      oci_compute_instance:
        id: "{{ app_catalog_instance_id }}"
        state: absent
      register: terminate_instance_result
      ignore_errors: yes

    - name: Delete the subscription
      oci_compute_app_catalog_subscription:
        compartment_id: "{{ test_compartment_ocid }}"
        listing_id: "{{ test_app_catalog_listing_id }}"
        listing_resource_version: "{{ latest_resource_version }}"
        state: absent
      register: post_delete_subscription_result
      ignore_errors: yes

    - fail:
        msg: "{{ ansible_failed_result }}"
