---

- name: Cleanup instances before running test
  oci_compute_instance_facts:
    compartment_id: "{{test_compartment_ocid}}"
    availability_domain: "{{test_availability_domain_3}}"
  register: result

- oci_compute_instance:
      id: "{{ item['id'] }}"
      state: absent
  with_items: "{{ result.instances }}"
  when: item.display_name == instance_name
  ignore_errors: yes

- name: Cleanup private IPs before running test
  oci_network_private_ip_facts:
    subnet_id: "{{common_subnet_id}}"
  register: result

- oci_network_private_ip:
    id: "{{ item['id'] }}"
    state: absent
  with_items: "{{ result.private_ips }}"
  when: item.display_name == updated_private_ip_name or item.display_name == private_ip_name
  ignore_errors: yes

- name: Cleanup public IPs before running test
  oci_network_public_ip_facts:
    scope: REGION
    compartment_id: "{{test_compartment_ocid}}"
  register: result

- oci_network_public_ip:
    id: "{{ item['id'] }}"
    state: absent
  with_items: "{{ result.public_ips }}"
  when: item.display_name == updated_public_ip_name or item.display_name == public_ip_name
  ignore_errors: yes

# =====================================================================================================

- block:
    - name: Launch an instance
      oci_compute_instance:
        compartment_id: "{{test_compartment_ocid}}"
        image_id: "{{image_ocid}}"
        availability_domain: "{{test_availability_domain}}"
        name: "{{ instance_name }}"
        shape: '{{ test_instance_shape }}'
        create_vnic_details:
          assign_public_ip: False
          subnet_id: "{{common_subnet_id}}"
      register: instance_info

    - name: Assert that changed is true
      assert:
        that:
          - instance_info.changed == True

    - name: VNIC attachments
      oci_compute_vnic_attachment_facts:
        compartment_id: "{{test_compartment_ocid}}"
        instance_id: '{{ instance_info.instance.id }}'
      register: vnic_info

    - name: Get primary VNIC
      oci_network_vnic_facts:
        id: '{{ vnic_info.vnic_attachments[0].vnic_id }}'
      register: primary_vnic

    - debug:
        msg: "{{ primary_vnic }}"

    - name: Get OCID of the private IP attached to the primary VNIC
      oci_network_private_ip_facts:
        subnet_id: "{{common_subnet_id}}"
      register: result

    - set_fact:
        primary_pvt_ip: "{{ item }}"
      with_items: "{{ result.private_ips }}"
      when: item.ip_address == primary_vnic.vnic.private_ip
    # =====================================================================================================

    - name: Create a Private IP for the instance's primary VNIC (so that it is added as a Secondary Private IP on the instance's primary VNIC)
      oci_network_private_ip:
        display_name: "{{ private_ip_name }}"
        hostname_label: "{{ hostname_label_name }}"
        vnic_id: '{{ vnic_info.vnic_attachments[0].vnic_id }}'
      register: ip_info

    - set_fact:
        pvt_ip_ocid: '{{ ip_info.private_ip.id }}'

    - name: Assert that changed is true
      assert:
        that:
          - ip_info.changed == True
          - ip_info.private_ip.display_name == private_ip_name
          - ip_info.private_ip.hostname_label == hostname_label_name
          - ip_info.private_ip.vnic_id == vnic_info.vnic_attachments[0].vnic_id

    # =====================================================================================================

    - name: Reattempt creating private IP
      oci_network_private_ip:
        display_name: "{{ private_ip_name }}"
        hostname_label: "{{ hostname_label_name }}"
        vnic_id: '{{ vnic_info.vnic_attachments[0].vnic_id }}'
      register: pvt_ip_info

    - name: Assert that changed is false & previously created private IP is returned
      assert:
        that:
          - pvt_ip_info.changed == False
          - pvt_ip_info.private_ip.id == pvt_ip_ocid

    # =====================================================================================================

    - name: Update a private IP
      oci_network_private_ip:
        display_name: "{{ updated_private_ip_name }}"
        private_ip_id: '{{ pvt_ip_ocid }}'
      register: ip_info

    - name: Assert that changed is true
      assert:
        that:
          - ip_info.changed == True
          - ip_info.private_ip.display_name == updated_private_ip_name

    # =====================================================================================================

    - name: Reattempt updating private IP
      oci_network_private_ip:
        display_name: "{{ updated_private_ip_name }}"
        private_ip_id: '{{ pvt_ip_ocid }}'
      register: pvt_ip_info

    - name: Assert that changed is false & previously created private IP is returned
      assert:
        that:
          - pvt_ip_info.changed == False
          - pvt_ip_info.private_ip.id == pvt_ip_ocid

    # =====================================================================================================

    - name: Get all private IPs
      oci_network_private_ip_facts:
        subnet_id: "{{common_subnet_id}}"
      register: result

    - set_fact:
        facts_of_test_ip: "{{item}}"
      with_items: "{{result.private_ips}}"
      when: item.id == pvt_ip_ocid

    - name: Assert that test private IP is retrieved
      assert:
        that:
          - facts_of_test_ip is defined

    - name: Get all private IPs with vnic_id filter
      oci_network_private_ip_facts:
        vnic_id: "{{vnic_info.vnic_attachments[0].vnic_id}}"
      register: result

    - set_fact:
        facts_of_test_ip: "{{item}}"
      with_items: "{{result.private_ips}}"
      when: item.id == pvt_ip_ocid

    - name: Assert that test private IP is retrieved
      assert:
        that:
          - facts_of_test_ip is defined
    # =====================================================================================================

    - name: Get a specific private IP
      oci_network_private_ip_facts:
        private_ip_id: '{{ pvt_ip_ocid }}'
      register: result

    - name: Assert that test private IP is retrieved
      assert:
        that:
          - result.private_ips[0].id == pvt_ip_ocid

    # =====================================================================================================

    - name: Create a RESERVED public IP
      oci_network_public_ip:
        compartment_id: "{{test_compartment_ocid}}"
        display_name: "{{ public_ip_name }}"
        lifetime: RESERVED
        scope: "REGION"
        defined_tags: "{{ test_default_defined_tags }}"
      register: public_ip_info

    - set_fact:
        test_public_ip_ocid: "{{ public_ip_info.public_ip.id }}"

    - name: Assert that RESERVED public IP is created and changed is true
      assert:
        that:
          - public_ip_info.changed == True
          - public_ip_info.public_ip.lifetime == "RESERVED"
          - public_ip_info.public_ip.compartment_id == test_compartment_ocid
          - public_ip_info.public_ip.display_name == public_ip_name
          - public_ip_info.public_ip.defined_tags.ansible_tag_namespace_integration_test_1.ansible_tag_1 == test_default_defined_tags.ansible_tag_namespace_integration_test_1.ansible_tag_1

    # =====================================================================================================

    - name: Reattempt creating a RESERVED public IP
      oci_network_public_ip:
        compartment_id: "{{test_compartment_ocid}}"
        display_name: "{{ public_ip_name }}"
        lifetime: RESERVED
        scope: "REGION"
        defined_tags: "{{ test_default_defined_tags }}"
      register: result

    - name: Assert that public IP create operation is idempotent and changed is false
      assert:
        that:
          - result.changed == False
          - result.public_ip.id == test_public_ip_ocid

    # =====================================================================================================

    - name: Update display name and assign RESERVED public IP to a private IP
      oci_network_public_ip:
        id: "{{ test_public_ip_ocid }}"
        private_ip_id: '{{ pvt_ip_ocid }}'
        name: '{{ updated_public_ip_name }}'
      register: result

    - name: Assert public IP display name is updated and it is assigned to a private IP
      assert:
        that:
          - result.changed == True
          - result.public_ip.display_name == updated_public_ip_name
          - result.public_ip.private_ip_id == pvt_ip_ocid

    # =====================================================================================================

    - name: Reattempt update display name and assign RESERVED public IP to a private IP
      oci_network_public_ip:
        id: "{{ test_public_ip_ocid }}"
        private_ip_id: '{{ pvt_ip_ocid }}'
        name: '{{ updated_public_ip_name }}'
      register: result

    - name: Assert public IP update operation is idempotent
      assert:
        that:
          - result.changed == False
          - result.public_ip.id == test_public_ip_ocid

    # =====================================================================================================

    - name: Update public IP by unassigning reserved public IP from a private IP
      oci_network_public_ip:
        id: "{{ test_public_ip_ocid }}"
        private_ip_id: ""
        wait: yes
      register: result

    - name: Assert public IP is unassigned
      assert:
        that:
          - result.changed == True
          - result.public_ip.lifecycle_state == "AVAILABLE"

    # =====================================================================================================

    - name: Create an EPHEMERAL public IP and assign it to primary private IP
      oci_network_public_ip:
        compartment_id: "{{ primary_pvt_ip.compartment_id }}"
        display_name: "{{ public_ip_name }}"
        lifetime: EPHEMERAL
        scope: "REGION"
        private_ip_id: '{{ primary_pvt_ip.id }}'
      register: public_ip_info

    - set_fact:
        eph_public_ip_ocid: "{{ public_ip_info.public_ip.id }}"

    - name: Assert that EPHEMERAL public IP is created and changed is true
      assert:
        that:
          - public_ip_info.changed == True
          - public_ip_info.public_ip.lifetime == "EPHEMERAL"
          - public_ip_info.public_ip.compartment_id == primary_pvt_ip.compartment_id
          - public_ip_info.public_ip.display_name == public_ip_name
          - public_ip_info.public_ip.private_ip_id == primary_pvt_ip.id

    # =====================================================================================================

    - name: Get facts of public IP using its OCID
      oci_network_public_ip_facts:
        id: "{{ eph_public_ip_ocid }}"
      register: result

    - name: Assert public IP information is retrieved using its OCID
      assert:
        that:
          - result.public_ips[0].id == eph_public_ip_ocid

    # =====================================================================================================

    # This will test ability to retrieve a resource using `display_name` when the list call by sdk doesn't support filtering based on display_name.
    - name: Get facts of public IP using display name, list_public_ips doesn't provide option to filter using display_name
      oci_network_public_ip_facts:
        scope: REGION
        compartment_id: "{{test_compartment_ocid}}"
        display_name: "{{ updated_public_ip_name }}"
      register: result

    - name: Assert that only public IPs with {{ updated_public_ip_name }} are retrieved
      assert:
        that:
          - item.display_name == updated_public_ip_name
      with_items: "{{result.public_ips}}"

    # =====================================================================================================

    - name: Get facts of public IP using OCID of private IP
      oci_network_public_ip_facts:
        private_ip_id: '{{ primary_pvt_ip.id }}'
      register: result

    - name: Assert public IP information is retrieved using OCID of private IP
      assert:
        that:
          - result.public_ips[0].id == eph_public_ip_ocid

    # =====================================================================================================

    - name: Get facts of public IP using public IP address
      oci_network_public_ip_facts:
        ip_address: "{{ public_ip_info.public_ip.ip_address }}"
      register: result

    - name: Assert public IP information is retrieved using OCID of private IP
      assert:
        that:
          - result.public_ips[0].id == eph_public_ip_ocid

    # =====================================================================================================

    - name: Get all ephemeral public IPs
      oci_network_public_ip_facts:
        scope: AVAILABILITY_DOMAIN
        compartment_id: "{{ primary_pvt_ip.compartment_id }}"
        availability_domain: "{{ primary_pvt_ip.availability_domain }}"
      register: result

    - set_fact:
        retrieved_public_ip: "{{ item }}"
      with_items: "{{ result.public_ips }}"
      when: item.id == eph_public_ip_ocid

    - name: Assert ephmeral test public IP information is present in the list of all ephemeral public IPs
      assert:
        that:
          - retrieved_public_ip.id == eph_public_ip_ocid

    # =====================================================================================================

    - name: Get all reserved public IPs
      oci_network_public_ip_facts:
        scope: REGION
        compartment_id: "{{test_compartment_ocid}}"
      register: result

    - set_fact:
        retrieved_reserved_public_ip: "{{ item }}"
      with_items: "{{ result.public_ips }}"
      when: item.id == test_public_ip_ocid

    - name: Assert reserved test public IP information is present in the list of all reserved public IPs
      assert:
        that:
          - retrieved_reserved_public_ip.id == test_public_ip_ocid

    # =====================================================================================================

    - name: Delete public IP
      oci_network_public_ip:
        id: "{{ test_public_ip_ocid }}"
        state: absent
      register: result

    - name: Assert public IP is deleted
      assert:
        that:
          - result.changed == True
          - result.public_ip.id == test_public_ip_ocid

    # =====================================================================================================

    - name: Reattempt delete public IP
      oci_network_public_ip:
        id: "{{ test_public_ip_ocid }}"
        state: absent
      register: result

    - name: Assert public IP delete operation is idempotent
      assert:
        that:
          - result.changed == False

    # =====================================================================================================

    - name: Delete ephemeral public IP
      oci_network_public_ip:
        id: "{{ eph_public_ip_ocid }}"
        state: absent
      register: result

    - name: Assert public IP is deleted
      assert:
        that:
          - result.changed == True
          - result.public_ip.id == eph_public_ip_ocid

    # =====================================================================================================

    - name: Delete a private IP
      oci_network_private_ip:
        private_ip_id: '{{ pvt_ip_ocid }}'
        state: 'absent'
      register: result

    - name: Assert that test private IP is retrieved
      assert:
        that:
          - result.changed == True
          - result.private_ip.id == pvt_ip_ocid

    # =====================================================================================================

    - name: Reattempt delete private IP
      oci_network_private_ip:
        private_ip_id: '{{ pvt_ip_ocid }}'
        state: 'absent'
      register: result

    - name: Assert that changed is false
      assert:
        that:
          - result.changed == False

    # =====================================================================================================

    - name: Terminate instance
      oci_compute_instance:
        instance_id: '{{ instance_info.instance.id }}'
        state: absent
      register: result

    - name: Assert that changed is true
      assert:
        that:
          - result.changed == True

    # =====================================================================================================
  rescue:

    - name: Delete public IP
      oci_network_public_ip:
        id: "{{ test_public_ip_ocid }}"
        state: absent
      register: result
      ignore_errors: yes

    - name: Delete ephemeral public IP
      oci_network_public_ip:
        id: "{{ eph_public_ip_ocid }}"
        state: absent
      register: result
      ignore_errors: yes

    - name: Delete a private IP
      oci_network_private_ip:
        private_ip_id: '{{ pvt_ip_ocid }}'
        state: 'absent'
      register: result
      ignore_errors: yes

    - name: Terminate instance
      oci_compute_instance:
        instance_id: '{{ instance_info.instance.id }}'
        state: absent
      register: result
      ignore_errors: yes

    - fail:
        msg: "{{ ansible_failed_result }}"
