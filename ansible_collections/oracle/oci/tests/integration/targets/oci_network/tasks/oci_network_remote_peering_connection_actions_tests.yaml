# Delete existing RPCs in default region
- oci_network_remote_peering_connection_facts:
    compartment_id: "{{ test_compartment_ocid }}"
  register: test_rpcs

- oci_network_remote_peering_connection:
    id: "{{ item.id }}"
    state: absent
  with_items: "{{ test_rpcs.remote_peering_connections }}"
  when: item.display_name.find(random_suffix_1024) != -1
  ignore_errors: yes

# Delete existing RPCs in region2: "us-phoenix-1"
- oci_network_remote_peering_connection_facts:
    compartment_id: "{{ test_compartment_ocid }}"
    region: "{{ region2_name }}"
  register: test_rpcs

- oci_network_remote_peering_connection:
    id: "{{ item.id }}"
    state: absent
    region: "{{ region2_name }}"
  with_items: "{{ test_rpcs.remote_peering_connections }}"
  when: item.display_name.find(random_suffix_1024) != -1
  ignore_errors: yes

# Delete existing DRGs in default region
- oci_network_drg_facts:
    compartment_id: "{{ test_compartment_ocid }}"
  register: test_drgs

- oci_network_drg:
    id: "{{ item['id'] }}"
    state: absent
  with_items: "{{ test_drgs.drgs }}"
  when: item.display_name.find(random_suffix_1024) != -1
  ignore_errors: yes

# Delete existing DRGs in region2: "us-phoenix-1"
- oci_network_drg_facts:
    compartment_id: "{{ test_compartment_ocid }}"
    region: "{{ region2_name }}"
  register: test_drgs

- oci_network_drg:
    id: "{{ item['id'] }}"
    state: absent
    region: "{{ region2_name }}"
  with_items: "{{ test_drgs.drgs }}"
  when: item.display_name.find(random_suffix_1024) != -1
  ignore_errors: yes

# ===========================================================================================

- block:

    - name: Create a DRG
      oci_network_drg:
        compartment_id: "{{ test_compartment_ocid }}"
        name: "{{ drg_name }}"
      register: result

    - set_fact:
        test_drg1_id: "{{ result.drg.id }}"

    - name: Assert that changed is true and DRG is created
      assert:
        that:
        - result.changed == True
        - result.drg['compartment_id'] == test_compartment_ocid

    # ===========================================================================================

    - name: Create a RPC
      oci_network_remote_peering_connection:
        compartment_id: "{{ test_compartment_ocid }}"
        display_name: "{{ rpc_name }}"
        drg_id: "{{ test_drg1_id }}"
      register: result

    - set_fact:
        test_rpc1_id: "{{ result.remote_peering_connection.id }}"

    - name: Assert that changed is true and LPG is created
      assert:
        that:
        - result.changed == True
        - result.remote_peering_connection['compartment_id'] == test_compartment_ocid
        - result.remote_peering_connection['display_name'] == rpc_name
        - result.remote_peering_connection['drg_id'] == test_drg1_id

    # ===========================================================================================

    - name: Reattempt creating the RPC
      oci_network_remote_peering_connection:
        compartment_id: "{{ test_compartment_ocid }}"
        display_name: "{{ rpc_name }}"
        drg_id: "{{ test_drg1_id }}"
      register: result

    - name: Assert that changed is false and matching RPC is returned
      assert:
        that:
        - result.changed == False
        - result.remote_peering_connection['id'] == test_rpc1_id

    # ===========================================================================================

    - name: Create second DRG in diff region
      oci_network_drg:
        compartment_id: "{{ test_compartment_ocid }}"
        region: "{{ region2_name }}"
        name: "{{ drg_name }}"
      register: result

    - set_fact:
        test_drg2_id: "{{ result.drg.id }}"

    - name: Assert that changed is true and DRG is created
      assert:
        that:
        - result.changed == True
        - result.drg['compartment_id'] == test_compartment_ocid

    # ===========================================================================================

    - name: Create second RPC
      oci_network_remote_peering_connection:
        compartment_id: "{{ test_compartment_ocid }}"
        drg_id: "{{ test_drg2_id }}"
        name: "{{ rpc_name }}"
        region: "{{ region2_name }}"
      register: result

    - set_fact:
        test_rpc2_id: "{{ result.remote_peering_connection.id }}"

    - name: Assert that changed is true and LPG is created
      assert:
        that:
        - result.changed == True
        - result.remote_peering_connection['compartment_id'] == test_compartment_ocid
        - result.remote_peering_connection['drg_id'] == test_drg2_id

    # ===========================================================================================

    - name: Connect RPCs
      oci_network_remote_peering_connection_actions:
        remote_peering_connection_id: "{{ test_rpc1_id }}"
        peer_id: "{{ test_rpc2_id }}"
        peer_region_name: "{{ region2_name }}"
        action: connect_remote_peering_connections
      register: result

    - name: Assert that changed is true and RPC is peered
      assert:
        that:
        - result.changed == True
        - result.remote_peering_connection['peering_status'] == "PEERED"
        - result.remote_peering_connection['peer_id'] == test_rpc2_id

    # ===========================================================================================

    - name: Reattempt connecting RPCs
      oci_network_remote_peering_connection_actions:
        remote_peering_connection_id: "{{ test_rpc1_id }}"
        peer_id: "{{ test_rpc2_id }}"
        peer_region_name: "{{ region2_name }}"
        action: connect_remote_peering_connections
      register: result

    - name: Assert that changed is false and RPC is peered
      assert:
        that:
        - result.changed == False
        - result.remote_peering_connection['peering_status'] == "PEERED"
        - result.remote_peering_connection['peer_id'] == test_rpc2_id

    # ===========================================================================================

    - name: Delete RPC
      oci_network_remote_peering_connection:
        id: "{{ test_rpc1_id }}"
        state: absent
      register: result

    - name: Assert RPC is deleted and RPC is retrieved
      assert:
        that:
        - result.changed == True
        - result.remote_peering_connection['id'] == test_rpc1_id

    - name: Delete second test RPC
      oci_network_remote_peering_connection:
        id: "{{ test_rpc2_id }}"
        state: absent
        region: "{{ region2_name }}"
      register: result

    - name: Assert RPC is deleted and RPC is retrieved
      assert:
        that:
        - result.changed == True
        - result.remote_peering_connection['id'] == test_rpc2_id

    # ===========================================================================================\

    - name: Delete test DRG in default region
      oci_network_drg:
        id: "{{ test_drg1_id }}"
        state: 'absent'

    - name: Assert DRG is deleted
      assert:
        that:
        - result.changed == True

    # ===========================================================================================

    - name: Delete test DRG in region2
      oci_network_drg:
        id: "{{ test_drg2_id }}"
        region: "{{ region2_name }}"
        state: 'absent'

    - name: Assert DRG is deleted
      assert:
        that:
        - result.changed == True

    # ===========================================================================================


  rescue:

    - name: Delete RPC
      oci_network_remote_peering_connection:
        id: "{{ test_rpc1_id }}"
        state: absent
      register: result
      ignore_errors: yes

    - name: Delete second test RPC
      oci_network_remote_peering_connection:
        id: "{{ test_rpc2_id }}"
        state: absent
        region: "{{ region2_name }}"
      register: result
      ignore_errors: yes

    - name: Delete test DRG in default region
      oci_network_drg:
        id: "{{ test_drg1_id }}"
        state: 'absent'
      ignore_errors: yes

    - name: Delete test DRG in region2
      oci_network_drg:
        id: "{{ test_drg2_id }}"
        region: "{{ region2_name }}"
        state: 'absent'
      ignore_errors: yes

    - fail:
        msg: "{{ ansible_failed_result }}"