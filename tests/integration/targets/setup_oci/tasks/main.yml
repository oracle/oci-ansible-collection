- pip:
    requirements: '/Users/nalsaber/.ansible/collections/ansible_collections/oracle/oci_modules/tests/runner/requirements/integration.cloud.oci.txt'
    #requirements: '{{ role_path }}/../../../../runner/requirements/integration.cloud.oci.txt'
    extra_args: "--proxy www-proxy.us.oracle.com:80"
    state: present
  # XXX: get this from the environment rather than hard-coding it
  #  http_proxy: http://www-proxy.us.oracle.com:80
  #  https_proxy: "{{http_proxy}}"
  # XXX: need to ignore errors because we aren't running in a
  # virtual-env yet in CI, and require root access for pip install
  ignore_errors: true

- debug: msg="Using random_suffix_250 {{random_suffix_250 }} and random_suffix_1024 {{random_suffix_1024}}"
# get home region of tenancy
- oci_region_subscription_facts:
    id: "{{ tenancy_ocid }}"
  register: oci_region_subscriptions
- set_fact:
    tenancy_home_region_key: "{{ item.region_key }}"
    tenancy_home_region_name: "{{ item.region_name }}"
  when: (item.is_home_region)
  with_items: "{{ oci_region_subscriptions.region_subscriptions }}"
- debug: msg="The Home region key for the tenancy {{ tenancy_ocid }} is {{ tenancy_home_region_key }}"

- oci_region_facts:
  register: oci_regions

- set_fact:
    home_region_url: "{{item.name}}"
  when: (item.key == tenancy_home_region_key)
  # Get home region name from root region of tenancy
  with_items: "{{oci_regions.regions}}"
- debug: msg="Home Region URL name {{home_region_url}}"

# Compute the AD to create compute instances in
- oci_ad_facts:
    compartment_id: "{{test_compartment_ocid}}"
  register: oci_ads
- set_fact:
    test_availability_domain: "{{oci_ads.availability_domains[0].name}}"
    test_availability_domain_2: "{{oci_ads.availability_domains[1].name}}"
    test_availability_domain_3: "{{oci_ads.availability_domains[2].name}}"
- debug: msg="First AD within the ashburn region {{test_availability_domain}}"
- debug: msg="Second AD within the ashburn region {{test_availability_domain_2}}"

# Get namespace of the tenancy
- name: Get the namespace of the tenancy
  oci_namespace_facts:
  register: namespace_result

- set_fact:
    test_namespace_name: "{{ namespace_result.namespaces[0] }}"
