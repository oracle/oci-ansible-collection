#!/usr/bin/python
# Copyright (c) 2017, 2021 Oracle and/or its affiliates.
# This software is made available to you under the terms of the GPL 3.0 license or the Apache 2.0 license.
# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)
# Apache License v2.0
# See LICENSE.TXT for details.
# GENERATED FILE - DO NOT EDIT - MANUAL CHANGES WILL BE OVERWRITTEN


from __future__ import absolute_import, division, print_function

__metaclass__ = type

ANSIBLE_METADATA = {
    "metadata_version": "1.1",
    "status": ["preview"],
    "supported_by": "community",
}

DOCUMENTATION = """
---
module: oci_vulnerability_scanning_host_scan_target_facts
short_description: Fetches details about one or multiple HostScanTarget resources in Oracle Cloud Infrastructure
description:
    - Fetches details about one or multiple HostScanTarget resources in Oracle Cloud Infrastructure
    - Retrieves a list of HostScanTargetSummary objects in a compartment. A host scan target is a collection of compute instances that you want routinely
      scanned for security vulnerabilities.
    - If I(host_scan_target_id) is specified, the details of a single HostScanTarget will be returned.
version_added: "2.9"
author: Oracle (@oracle)
options:
    host_scan_target_id:
        description:
            - unique HostScanTarget identifier
            - Required to get a specific host_scan_target.
        type: str
        aliases: ["id"]
    compartment_id:
        description:
            - The ID of the compartment in which to list resources.
            - Required to list multiple host_scan_targets.
        type: str
    lifecycle_state:
        description:
            - A filter to return only resources whose lifecycleState matches the given lifecycleState.
        type: str
        choices:
            - "CREATING"
            - "UPDATING"
            - "ACTIVE"
            - "DELETING"
            - "DELETED"
            - "FAILED"
    display_name:
        description:
            - A filter to return only resources that match the entire display name given.
        type: str
        aliases: ["name"]
    sort_order:
        description:
            - The sort order to use, either 'ASC' or 'DESC'.
        type: str
        choices:
            - "ASC"
            - "DESC"
    sort_by:
        description:
            - The field to sort by. Only one sort order may be provided. Default order for timeCreated is descending. Default order for displayName is
              ascending. If no value is specified timeCreated is default.
        type: str
        choices:
            - "timeCreated"
            - "displayName"
extends_documentation_fragment: [ oracle.oci.oracle ]
"""

EXAMPLES = """
- name: List host_scan_targets
  oci_vulnerability_scanning_host_scan_target_facts:
    compartment_id: "ocid1.compartment.oc1..xxxxxxEXAMPLExxxxxx"

- name: Get a specific host_scan_target
  oci_vulnerability_scanning_host_scan_target_facts:
    host_scan_target_id: "ocid1.hostscantarget.oc1..xxxxxxEXAMPLExxxxxx"

"""

RETURN = """
host_scan_targets:
    description:
        - List of HostScanTarget resources
    returned: on success
    type: complex
    contains:
        id:
            description:
                - Unique identifier of the config that is immutable on creation
            returned: on success
            type: string
            sample: "ocid1.resource.oc1..xxxxxxEXAMPLExxxxxx"
        display_name:
            description:
                - Target identifier, which can be renamed.
            returned: on success
            type: string
            sample: display_name_example
        description:
            description:
                - Target description.
            returned: on success
            type: string
            sample: description_example
        compartment_id:
            description:
                - Compartment ID of the object (this).
            returned: on success
            type: string
            sample: "ocid1.compartment.oc1..xxxxxxEXAMPLExxxxxx"
        target_compartment_id:
            description:
                - Compartment ID to target. If a list of hosts is provided, all hosts must be in this compartment.
            returned: on success
            type: string
            sample: "ocid1.targetcompartment.oc1..xxxxxxEXAMPLExxxxxx"
        instance_ids:
            description:
                - List of compute instance IDs to target (optional). If empty, targets the entire targetCompartmentId.
            returned: on success
            type: list
            sample: []
        host_scan_recipe_id:
            description:
                - ID of the host scan recipe this target applies.
            returned: on success
            type: string
            sample: "ocid1.hostscanrecipe.oc1..xxxxxxEXAMPLExxxxxx"
        lifecycle_state:
            description:
                - The current state of the config.
            returned: on success
            type: string
            sample: CREATING
        time_created:
            description:
                - Date and time the target was created, format as described in L(RFC 3339,https://tools.ietf.org/rfc/rfc3339)
            returned: on success
            type: string
            sample: 2013-10-20T19:20:30+01:00
        time_updated:
            description:
                - Date and time the target was last updated, format as described in L(RFC 3339,https://tools.ietf.org/rfc/rfc3339)
            returned: on success
            type: string
            sample: 2013-10-20T19:20:30+01:00
        freeform_tags:
            description:
                - "Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.
                  Example: `{\\"bar-key\\": \\"value\\"}`"
            returned: on success
            type: dict
            sample: {'Department': 'Finance'}
        defined_tags:
            description:
                - "Defined tags for this resource. Each key is predefined and scoped to a namespace.
                  Example: `{\\"foo-namespace\\": {\\"bar-key\\": \\"value\\"}}`"
            returned: on success
            type: dict
            sample: {'Operations': {'CostCenter': 'US'}}
        system_tags:
            description:
                - "Usage of system tag keys. These predefined keys are scoped to namespaces.
                  Example: `{\\"orcl-cloud\\": {\\"free-tier-retained\\": \\"true\\"}}`"
            returned: on success
            type: dict
            sample: {}
    sample: [{
        "id": "ocid1.resource.oc1..xxxxxxEXAMPLExxxxxx",
        "display_name": "display_name_example",
        "description": "description_example",
        "compartment_id": "ocid1.compartment.oc1..xxxxxxEXAMPLExxxxxx",
        "target_compartment_id": "ocid1.targetcompartment.oc1..xxxxxxEXAMPLExxxxxx",
        "instance_ids": [],
        "host_scan_recipe_id": "ocid1.hostscanrecipe.oc1..xxxxxxEXAMPLExxxxxx",
        "lifecycle_state": "CREATING",
        "time_created": "2013-10-20T19:20:30+01:00",
        "time_updated": "2013-10-20T19:20:30+01:00",
        "freeform_tags": {'Department': 'Finance'},
        "defined_tags": {'Operations': {'CostCenter': 'US'}},
        "system_tags": {}
    }]
"""

from ansible.module_utils.basic import AnsibleModule
from ansible_collections.oracle.oci.plugins.module_utils import oci_common_utils
from ansible_collections.oracle.oci.plugins.module_utils.oci_resource_utils import (
    OCIResourceFactsHelperBase,
    get_custom_class,
)

try:
    from oci.vulnerability_scanning import VulnerabilityScanningClient

    HAS_OCI_PY_SDK = True
except ImportError:
    HAS_OCI_PY_SDK = False


class HostScanTargetFactsHelperGen(OCIResourceFactsHelperBase):
    """Supported operations: get, list"""

    def get_required_params_for_get(self):
        return [
            "host_scan_target_id",
        ]

    def get_required_params_for_list(self):
        return [
            "compartment_id",
        ]

    def get_resource(self):
        return oci_common_utils.call_with_backoff(
            self.client.get_host_scan_target,
            host_scan_target_id=self.module.params.get("host_scan_target_id"),
        )

    def list_resources(self):
        optional_list_method_params = [
            "lifecycle_state",
            "display_name",
            "sort_order",
            "sort_by",
        ]
        optional_kwargs = dict(
            (param, self.module.params[param])
            for param in optional_list_method_params
            if self.module.params.get(param) is not None
        )
        return oci_common_utils.list_all_resources(
            self.client.list_host_scan_targets,
            compartment_id=self.module.params.get("compartment_id"),
            **optional_kwargs
        )


HostScanTargetFactsHelperCustom = get_custom_class("HostScanTargetFactsHelperCustom")


class ResourceFactsHelper(
    HostScanTargetFactsHelperCustom, HostScanTargetFactsHelperGen
):
    pass


def main():
    module_args = oci_common_utils.get_common_arg_spec()
    module_args.update(
        dict(
            host_scan_target_id=dict(aliases=["id"], type="str"),
            compartment_id=dict(type="str"),
            lifecycle_state=dict(
                type="str",
                choices=[
                    "CREATING",
                    "UPDATING",
                    "ACTIVE",
                    "DELETING",
                    "DELETED",
                    "FAILED",
                ],
            ),
            display_name=dict(aliases=["name"], type="str"),
            sort_order=dict(type="str", choices=["ASC", "DESC"]),
            sort_by=dict(type="str", choices=["timeCreated", "displayName"]),
        )
    )

    module = AnsibleModule(argument_spec=module_args)

    if not HAS_OCI_PY_SDK:
        module.fail_json(msg="oci python sdk required for this module.")

    resource_facts_helper = ResourceFactsHelper(
        module=module,
        resource_type="host_scan_target",
        service_client_class=VulnerabilityScanningClient,
        namespace="vulnerability_scanning",
    )

    result = []

    if resource_facts_helper.is_get():
        result = [resource_facts_helper.get()]
    elif resource_facts_helper.is_list():
        result = resource_facts_helper.list()
    else:
        resource_facts_helper.fail()

    module.exit_json(host_scan_targets=result)


if __name__ == "__main__":
    main()
