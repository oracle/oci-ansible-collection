---
- name: Instances | Gather List of images
  oci_compute_image_facts:
    compartment_id: "{{ vcn_reg.vcn.compartment_id }}"
    operating_system: "{{ instance.os }}"
    operating_system_version: "{{ instance.os_version }}"
    sort_by: "{{ instance.sort_by }}"
    sort_order: "{{ instance.sort_order }}"
    lifecycle_state: 'AVAILABLE'
  register: oci_image_reg

  # Get the most recent OS image specified in vars
- name: Instances | Set image_id fact
  set_fact:
    image_id: "{{ oci_image_reg.images
                | selectattr('display_name', 'match', '^'
                  + (instance.os | replace(' ','-'))
                  + '-'
                  + instance.os_version
                  + '-' + ansible_date_time.year)
                | first
              }}"

- name: Instances | List availability_domains
  oci_identity_availability_domain_facts:
    region: "{{ region }}"
    compartment_id: "{{ vcn_reg.vcn.compartment_id }}"
  register: oci_ads_reg

- name: Instances | Find AD which has available free tier instances
  oci_limits_limit_value_facts:
    compartment_id: "{{ vcn_reg.vcn.compartment_id }}"
    service_name: 'compute'
    scope_type: 'AD'
    name: 'vm-standard-e2-1-micro-count'
    availability_domain: "{{ ad.name }}"
  register: oci_limit_value_reg
  loop: "{{ oci_ads_reg.availability_domains }}"
  loop_control:
    loop_var: 'ad'
    label: "{{ ad.name }}"

- name: Instances | Create list of ADs with Instance limit values
  set_fact:
    ads_with_values: "{{ oci_limit_value_reg.results
                       | map(attribute='limit_values')
                       | flatten | list
                     }}"

- name: Instances | Select Availability Domain
  set_fact:
    freetier_availability_domain: "{{ ad_dict.availability_domain }}"
  loop: "{{ ads_with_values }}"
  loop_control:
    loop_var: 'ad_dict'
    label: "{{ ad_dict.availability_domain }}"
  when: ad_dict.value >= instance.count
  failed_when: freetier_availability_domain is not regex("^.*:.*-.*-.*$")

- name: Instances | Create MuShop VM Instance
  oci_compute_instance:
    display_name: "{{ env }}-{{ region }}-mushop-instance{{ idx }}"
    compartment_id: "{{ vcn_reg.vcn.compartment_id }}"
    region: "{{ region }}"
    freeform_tags: "{{ oci_ansible_free_default_tags }}"
    source_details:
      source_type: image
      image_id: "{{ image_id.id }}"
    shape: "{{ instance.shape }}"
    availability_domain: "{{ freetier_availability_domain }}"
    create_vnic_details:
        display_name: "{{ env }}-{{ region }}-mushop-primary-vnic{{ idx }}"
        assign_public_ip: True
        hostname_label: "mushop{{ idx }}"
        subnet_id: "{{ public_subnet_reg.subnet.id }}"
    metadata:
        ssh_authorized_keys: "{{ lookup('file', global_ssh_pubkey) }}"
        user_data: "{{ lookup('file', 'node.sh') | b64encode }}"
        db_name: "{{ oci_atp_reg.autonomous_database.db_name }}"
        atp_pw: "{{ atp_password }}"
        catalogue_sql_par: "{{ preauth_facts_dict['catalogue_sql_script_preauth'] }}"
        apache_conf_par: "{{ preauth_facts_dict['apache_conf_preauth'] }}"
        entrypoint_par: "{{ preauth_facts_dict['entrypoint_preauth'] }}"
        mushop_app_par: "{{ preauth_facts_dict['mushop_lite_preauth'] }}"
        wallet_par: "{{ preauth_facts_dict['mushop_wallet_preauth'] }}"
        assets_par: "{{ preauth_facts_dict['mushop_assets_preauth'] }}"
        assets_url: "https://objectstorage.{{ region }}.oraclecloud.com/\
                     n/{{ oci_tenancy_namespace.namespace }}/\
                     b/{{ env }}-{{ os.media_bucket_name }}/o/"
    key_by: display_name,freeform_tags,region,shape,compartment_id,source_details
  register: oci_instance_reg
  loop: "{{ range(0, instance.count) | list }}"
  loop_control:
    label: "{{ env }}-{{ region }}-mushop-instance{{ idx }}"
    index_var: idx
