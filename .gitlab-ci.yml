stages:
  - .pre
  - quickcheck
  - integration_tests
  - push_to_github
  - scheduled_jobs
  - .post

variables:
  # as we add more tags for periodic pipelines, add them here so they do not get
  # run during standard integration tests
  ansible_skip_tags_for_default_integ_test_job: weekly,nightly

  # tag used in test playbooks to designate non_parallel tests
  ansible_non_parallel_test_tag: non_parallel

before_script:
  - echo "Running jobs for $CI_COMMIT_REF_NAME in $(pwd)"

  - uname -a
  - export

  # Ensure oci config is setup correctly
  # extract key file from secret variable
  # see https://medium.com/@michalkalita/export-secret-file-to-gitlab-pipeline-75789eee35bd
  - env | grep CI
  - mkdir -p ~/.oci
  # user siva's private key
  - echo "$CI_OCI_API_KEY_FILE_BASE64" | base64 -di > .oci/oci_api_key.pem
  # user ansible-user's private key
  - echo "$CI_OCI_API_KEY_FILE_ANSIBLE_USER_BASE64" | base64 -di > .oci/oci_api_key_ansible_user.pem
  # all other variables in OCI SDK config is stored as Gitlab secret variables
  # and referenced in the .oci/config file
  - cat .oci/config | while read line; do echo $line | envsubst; done > ~/.oci/config
  - cat ~/.oci/config
  - cp .oci/*.pem ~/.oci/
  - source scripts/common-vars.sh
  - 'echo "PROJECT_ROOT: $CI_PROJECT_DIR" >> $CI_PROJECT_DIR/ansible_collections/oracle/oci/tests/integration/integration_config.yml'
  - export integration_test_targets=$(find "$CI_PROJECT_DIR"/ansible_collections/oracle/oci -type d -name "oci_*"  | grep -v oci_generated_core | grep -v lengthy | sort)
  - export lengthy_integration_test_targets=$(find "$CI_PROJECT_DIR"/ansible_collections/oracle/oci -type d -name "oci_*" | grep lengthy | sort)

after_script:
    # clean up all configuration artifacts so that the next run starts with a clean
    # slate
    - rm ~/.oci/config || true
    - rm ~/.oci/*.pem || true
    - rm -r ~/.oci || true


#############################################################################
# `quickcheck` stage jobs
#############################################################################

quickchecks:
  stage: quickcheck
  tags:
    - quickchecks
  except:
    - schedules
  script:
    - tox

#############################################################################
# `integration_tests` stage jobs
#############################################################################

.integration_tests_job_template: &integration_tests_job_def
  stage: integration_tests
  tags:
    - integration
  except:
    - schedules
    - tags
  script:
    - echo "All targets ${!targets}"
    - echo "Tags ${tags}"
    - echo "Set no ${set_no}"
    - echo "Total number of sets ${total_target_sets}"
    - tox -e integration_tests -- --targets "${!targets}" --set-no "$set_no" --total-target-sets "$total_target_sets" --ansible-test-skip-tags "$ansible_skip_tags_for_default_integ_test_job,$ansible_non_parallel_test_tag"

# gitlab does not support dynamic job creation. So we will have to manually divide the integration tests
# into multiple jobs so that they can be run in parallel.
integration_tests_set_1:
  <<: *integration_tests_job_def
  variables:
    set_no: 0
    targets: "integration_test_targets"
    total_target_sets: 3

integration_tests_set_2:
  <<: *integration_tests_job_def
  variables:
    set_no: 1
    targets: "integration_test_targets"
    total_target_sets: 3

integration_tests_set_3:
  <<: *integration_tests_job_def
  variables:
    set_no: 2
    targets: "integration_test_targets"
    total_target_sets: 3

lengthy_integration_tests_set_1:
  <<: *integration_tests_job_def
  variables:
    set_no: 0
    targets: "lengthy_integration_test_targets"
    total_target_sets: 2

lengthy_integration_tests_set_2:
  <<: *integration_tests_job_def
  variables:
    set_no: 1
    targets: "lengthy_integration_test_targets"
    total_target_sets: 2

.core_integration_tests_job_template: &core_integration_tests_job_def
  stage: integration_tests
  tags:
    - integration
  except:
    - schedules
    - tags
  script:
    - echo "Running core tests with tag $tag"
    - tox -e integration_tests -- --targets oci_generated_core --ansible-test-tags $tag --ansible-test-skip-tags "$ansible_skip_tags_for_default_integ_test_job,$ansible_non_parallel_test_tag"
  retry: 2

core_integration_tests_set_1:
  <<: *core_integration_tests_job_def
  variables:
    tag: "core_set_1"

core_integration_tests_set_2:
  <<: *core_integration_tests_job_def
  variables:
    tag: "core_set_2"

core_integration_tests_set_3:
  <<: *core_integration_tests_job_def
  variables:
    tag: "core_set_3"

# There are some integration tests that cannot be run in parallel due to various constraints like tests which update
# a global resource, limit issues etc. So we separate these tests and run them in a single runner so that they cannot
# run in parallel. The non parallel integration test targets should contain non_parallel in the target name.
# For ex: oci_identity_non_parallel
non_parallel_integration_tests_dev_set_1:
  stage: integration_tests
  tags:
    - non_parallel
  except:
    - schedules
    - tags
  variables:
    set_no: 0
    targets: "integration_test_targets"
    total_target_sets: 1
  script:
    - echo "All targets ${!targets}"
    - echo "Tags ${tags}"
    - echo "Set no ${set_no}"
    - echo "Total number of sets ${total_target_sets}"
    - tox -e integration_tests -- --targets "${!targets}" --set-no "$set_no" --total-target-sets "$total_target_sets" --ansible-test-tags "$ansible_non_parallel_test_tag" --ansible-test-skip-tags "$ansible_skip_tags_for_default_integ_test_job"



# release pipeline integration tests - this template runs the whitelist first and then
# installs to ensure integration tests are running on the whitelisted collections
.release_integration_tests_job_template: &release_integration_tests_job_def
  stage: integration_tests
  tags:
    - integration
  only:
    - tags
  script:
    - source scripts/common-vars.sh
    # run whitelist
    - chmod u+r+x scripts/run_whitelist.sh
    - scripts/run_whitelist.sh
    # install the whitelisted collections
    - chmod u+r+x "$TEMP_SCRIPTS"/install_collection.sh
    - $TEMP_SCRIPTS/install_collection.sh
    # setup for running the integration tests
    - echo "All targets ${!targets}"
    - echo "Tags ${tags}"
    - echo "Set no ${set_no}"
    - echo "Total number of sets ${total_target_sets}"
    - tox -e integration_tests -- --targets "${!targets}" --set-no "$set_no" --total-target-sets "$total_target_sets" --ansible-test-skip-tags "$ansible_skip_tags_for_default_integ_test_job,$ansible_non_parallel_test_tag"
    - echo "integration_test execution complete"

release_integration_tests_set_1:
  <<: *release_integration_tests_job_def
  variables:
    set_no: 0
    targets: "integration_test_targets"
    total_target_sets: 3

release_integration_tests_set_2:
  <<: *release_integration_tests_job_def
  variables:
    set_no: 1
    targets: "integration_test_targets"
    total_target_sets: 3

release_integration_tests_set_3:
  <<: *release_integration_tests_job_def
  variables:
    set_no: 2
    targets: "integration_test_targets"
    total_target_sets: 3

release_lengthy_integration_tests_set_1:
  <<: *release_integration_tests_job_def
  variables:
    set_no: 0
    targets: "lengthy_integration_test_targets"
    total_target_sets: 2

release_lengthy_integration_tests_set_2:
  <<: *release_integration_tests_job_def
  variables:
    set_no: 1
    targets: "lengthy_integration_test_targets"
    total_target_sets: 2

.release_core_integration_tests_job_template: &release_core_integration_tests_job_def
  stage: integration_tests
  tags:
    - integration
  only:
    - tags
  script:
    - source scripts/common-vars.sh
    # run whitelist
    - chmod u+r+x scripts/run_whitelist.sh
    - scripts/run_whitelist.sh
    # install the whitelisted collections
    - chmod u+r+x "$TEMP_SCRIPTS"/install_collection.sh
    - $TEMP_SCRIPTS/install_collection.sh
    # setup for running the integration tests
    - echo "Running core tests with tag $tag"
    - tox -e integration_tests -- --targets oci_generated_core --ansible-test-tags $tag --ansible-test-skip-tags "$ansible_skip_tags_for_default_integ_test_job,$ansible_non_parallel_test_tag"
  retry: 2

release_core_integration_tests_set_1:
  <<: *release_core_integration_tests_job_def
  variables:
    tag: "core_set_1"

release_core_integration_tests_set_2:
  <<: *release_core_integration_tests_job_def
  variables:
    tag: "core_set_2"

release_core_integration_tests_set_3:
  <<: *release_core_integration_tests_job_def
  variables:
    tag: "core_set_3"

# There are some integration tests that cannot be run in parallel due to various constraints like tests which update
# a global resource, limit issues etc. So we separate these tests and run them in a single runner so that they cannot
# run in parallel. The non parallel integration test targets should contain non_parallel in the target name.
# For ex: oci_identity_non_parallel
release_non_parallel_integration_tests_dev_set_1:
  stage: integration_tests
  tags:
    - non_parallel
  only:
    - tags
  variables:
    set_no: 0
    targets: "integration_test_targets"
    total_target_sets: 1
  script:
    - source scripts/common-vars.sh
    # run whitelist
    - chmod u+r+x scripts/run_whitelist.sh
    - scripts/run_whitelist.sh
    # install the whitelisted collections
    - chmod u+r+x "$TEMP_SCRIPTS"/install_collection.sh
    - $TEMP_SCRIPTS/install_collection.sh
    # setup for running the integration tests
    - echo "All targets ${!targets}"
    - echo "Tags ${tags}"
    - echo "Set no ${set_no}"
    - echo "Total number of sets ${total_target_sets}"
    - tox -e integration_tests -- --targets "${!targets}" --set-no "$set_no" --total-target-sets "$total_target_sets" --ansible-test-tags "$ansible_non_parallel_test_tag" --ansible-test-skip-tags "$ansible_skip_tags_for_default_integ_test_job"

ansible_doc_tests:
  stage: integration_tests
  tags:
    - integration
  only:
    - tags
  script:
    - source scripts/common-vars.sh
    # run whitelist
    - chmod u+r+x scripts/run_whitelist.sh
    - scripts/run_whitelist.sh
    # install the whitelisted collections
    - chmod u+r+x "$TEMP_SCRIPTS"/install_collection.sh
    - $TEMP_SCRIPTS/install_collection.sh
    # running an ansible-doc command to verify if module docs are getting picked up
    - ansible-doc oracle.oci.oci_identity_group

#############################################################################
# `push_to_github` stage jobs
#############################################################################
push_to_github:
  stage: push_to_github
  tags:
    - integration
  only:
    - tags
  script:
    - source scripts/common-vars.sh
    # run whitelist
    - chmod u+r+x scripts/run_whitelist.sh
    - scripts/run_whitelist.sh
    # push to github
    - chmod u+r+x "$TEMP_SCRIPTS"/push_to_github.sh
    - $TEMP_SCRIPTS/push_to_github.sh

#############################################################################
# `scheduled_jobs` stage jobs
#############################################################################

.scheduled_integration_tests_job_template_only: &scheduled_integration_tests_job_only_def
  refs:
    - schedules

.scheduled_integration_tests_job_template_variables: &scheduled_integration_tests_job_variables_def
  targets: "integration_test_targets"
  set_no: 0
  total_target_sets: 1

.scheduled_integration_tests_job_template: &scheduled_integration_tests_job_def
  stage: scheduled_jobs
  tags:
    - integration
  script:
    - echo "All targets ${!targets}"
    - echo "Tags ${tags}"
    - echo "Set no ${set_no}"
    - echo "Total number of sets ${total_target_sets}"
    - tox -e integration_tests -- --targets "${!targets}" --set-no "$set_no" --total-target-sets "$total_target_sets" --ansible-test-tags "${ansible_test_tags}"

nightly:
  <<: *scheduled_integration_tests_job_def
  stage: scheduled_jobs
  tags:
    - integration
  only:
    <<: *scheduled_integration_tests_job_only_def
    variables:
      - $CADENCE == "nightly"
  variables:
    <<: *scheduled_integration_tests_job_variables_def
    ansible_test_tags: "nightly"

weekly:
  <<: *scheduled_integration_tests_job_def
  stage: scheduled_jobs
  tags:
    - integration
  only:
    <<: *scheduled_integration_tests_job_only_def
    variables:
      - $CADENCE == "weekly"
  variables:
    <<: *scheduled_integration_tests_job_variables_def
    ansible_test_tags: "weekly"

cleanup_resources:
  stage: scheduled_jobs
  tags:
    - integration
  only:
    <<: *scheduled_integration_tests_job_only_def
    variables:
      - $CLEANUP_RESOURCES == "compartment_resources"
  script:
    - pip install -r requirements-dev.txt
    - pip install ansible
    - pip install -r $COLLECTION_DIR/tests/runner/requirements/integration.cloud.oci.txt
    - source scripts/install_collection.sh
    - cd $COLLECTION_DIR
    - ansible-playbook $SCRIPTS_DIR/clean-up-resources.yaml
  variables:
    ansible_test_tags: "nightly"
