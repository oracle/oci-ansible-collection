stages:
  - quickcheck
  - test


variables:
#  PROXY_HOST: "www-proxy-hqdc.us.oracle.com"
#  HTTP_PROXY: "http://www-proxy-hqdc.us.oracle.com:80"
#  HTTPS_PROXY: "http://www-proxy-hqdc.us.oracle.com:80"
#  NO_PROXY: "localhost,127.0.0.0/8,127.0.1.1,127.0.1.1*,.us.oracle.com,.oraclecorp.com,.grungy.us,.oracle.com"
#  CI_DEBUG_TRACE: "true"

# assumes python environments and tools are installed. See `setup-gitlab-runner-oel.sh` for instructions.
before_script:
  - echo "Running jobs for $CI_COMMIT_REF_NAME in $(pwd)"

  - uname -a
  - export

  # create and setup virtual environments for the various python versions
  # we must support
  - WKSP=$(pwd) scripts/setup-venvs.sh


  # Ensure oci config is setup correctly
  # extract key file from secret variable
  # see https://medium.com/@michalkalita/export-secret-file-to-gitlab-pipeline-75789eee35bd
  - env | grep CI
  - mkdir -p ~/.oci
  # user siva's private key
  - echo "$CI_OCI_API_KEY_FILE_BASE64" | base64 -di > .oci/oci_api_key.pem
  # user ansible-user's private key
  - echo "$CI_OCI_API_KEY_FILE_ANSIBLE_USER_BASE64" | base64 -di > .oci/oci_api_key_ansible_user.pem
  # all other variables in OCI SDK config is stored as Gitlab secret variables
  # and referenced in the .oci/config file
  - cat .oci/config | while read line; do echo $line | envsubst; done > ~/.oci/config
  - cat ~/.oci/config
  - cp .oci/*.pem ~/.oci/
#  - sed -i '/CI_PROJECT_DIR/d' "$CI_PROJECT_DIR"/ansible/test/integration/integration_config.yml
#  - 'echo "PROJECT_ROOT: $CI_PROJECT_DIR" >> $CI_PROJECT_DIR/ansible/test/integration/integration_config.yml'
#  - export dev_targets=$(find "$CI_PROJECT_DIR"/ansible/test/integration/targets/ -type d -name "oci_*" | grep -v non_parallel | grep -v lengthy | grep -v manual | sort)
#  - export non_parallel_targets=$(find "$CI_PROJECT_DIR"/ansible/test/integration/targets/ -type d -name "oci_*" | grep non_parallel | grep -v lengthy | grep -v manual | sort)
#  - export all_targets=$(find "$CI_PROJECT_DIR"/ansible/test/integration/targets/ -type d -name "oci_*" | grep -v lengthy | grep -v manual | grep -v waas | sort)
# - export lengthy_targets=$(find "$CI_PROJECT_DIR"/ansible/test/integration/targets/ -type d -name "oci*" | grep lengthy | grep -v manual | sort -r)



#############################################################################
# `quickcheck` stage jobs
#############################################################################

validation_tests:
  stage: quickcheck
  tags:
    - oel
    - ansible
    - oci
    - compute
  script:
    - export INSTALLDIR="/scratch/python-installs"
    - export "PATH=$INSTALLDIR/bin:$PATH"
    - export LD_LIBRARY_PATH="$INSTALLDIR/lib:$LD_LIBRARY_PATH"
    - echo "PATH = $PATH"
    - echo "LD_LIBRARY_PATH = $LD_LIBRARY_PATH"
    - export VENVDIR="/scratch/python-venvs"
    - echo "VENVDIR= $VENVDIR, CI_COMMIT_REF_NAME=$CI_COMMIT_REF_NAME"

    - env | grep CI
    # activate the 3.6 virtualenv. Changed this from 2.7 to 3.6 after error in
    # https://gitlab-odx.oracledx.com/oci/ansible-cloud-module/-/jobs/499142
    - source $VENVDIR/my-3.6-venv-$CI_COMMIT_REF_NAME/bin/activate
    - which python
    - pip install ansible
    - pip install oci 
    - pip -V
    - pip freeze
    - pwd

    # setup dev environment to run ansible-test
 #   - cd ansible; source hacking/env-setup
    - ansible --version
    #- cd ..
    #- cd ansible
    - ansible-test sanity --color -v --junit ${COVERAGE:+"$COVERAGE"} ${CHANGED:+"$CHANGED"} --docker --docker-keep-git
      --skip-test pylint --skip-test ansible-doc --skip-test docs-build --skip-test integration-aliases --skip-test botmeta
    - ansible-test sanity --color -v --junit ${COVERAGE:+"$COVERAGE"} ${CHANGED:+"$CHANGED"} --docker --docker-keep-git
      --test ansible-doc 
    - ansible-test sanity --color -v --junit ${COVERAGE:+"$COVERAGE"} ${CHANGED:+"$CHANGED"} --docker --docker-keep-git
      --test pylint --exclude test/units/
    - ansible-test sanity --color -v --junit ${COVERAGE:+"$COVERAGE"} ${CHANGED:+"$CHANGED"} --docker --docker-keep-git
      --test pylint
    # check copyright year in our python source files
    - cd -
#    - ./scripts/copyright-check.sh $(git diff --name-only origin/master | grep 'ansible/lib/ansible/modules/cloud/oracle/.*py\|ansible/lib/ansible/module_utils/oracle/.*py\|ansible/contrib/inventory/oci.*py\|ansible/test/units/modules/cloud/oracle/test.*py\|^scripts/.*py$')
    # check copyright year in our sample YAML files
#    - ./scripts/copyright-check.sh $(git diff --name-only origin/master | grep '^samples.*ya\?ml')

flake8:
  stage: quickcheck
  tags:
    - oel
    - ansible
    - oci
    - compute
  script:
    - scripts/run-flake8.sh
    - scripts/test-black-formatted.sh


#############################################################################
# `test` stage jobs
#############################################################################

unit_tests:
  stage: test
  tags:
    - oel
    - ansible
    - oci
    - compute
  artifacts:
    paths:
      - htmlcov/
    expire_in: 1 week
  script:
    - rm -rf htmlcov/ || true
    - scripts/run-unit-tests.sh

# XXX: get tox based integration test execution working
#- ansible-test integration --tox --python 2.7 -v oci_object_storage
#- ansible-test integration --tox --python 3.6 -v oci_object_storage

.integration_tests_job_template: &integration_tests_job_def
  stage: test
  tags:
    - oel
    - ansible
    - oci
    - compute
  except:
    - tags
  artifacts:
      paths:
          - ansible/test/integration/ansible.log
          - ansible/test/results/reports/coverage/
      expire_in: 1 week
  script:
    # update test executor of ITs to publish task profiling
    # information
    #- sed -i.bak "s@ANSIBLE_CALLBACK_WHITELIST='junit',@ANSIBLE_CALLBACK_WHITELIST='junit, profile_tasks', ANSIBLE_STDOUT_CALLBACK='dense',@g" ansible/test/runner/lib/executor.py
    # Replace the line above with this if you want more detailed output
    # during IT playbooks execution
    #- sed -i.bak "s@ANSIBLE_CALLBACK_WHITELIST='junit',@ANSIBLE_CALLBACK_WHITELIST='junit, profile_tasks', ANSIBLE_STDOUT_CALLBACK='debug',@g" ansible/test/runner/lib/executor.py
    # Use the value of variable whose name is stored in 'targets'.
    - echo "All targets ${!targets}"
    - echo "Set no ${set_no}"
    - echo "Total number of sets ${total_target_sets}"
    - scripts/run-integration-tests.sh "${!targets}" "$set_no" "$total_target_sets"
  retry: 2

# Run all Integration tests against a dev environment
# Run the dev jobs in sets.
integration_tests_dev_set_1:
  <<: *integration_tests_job_def
  variables:
    set_no: 0
    targets: "dev_targets"
    total_target_sets: 5

integration_tests_dev_set_2:
  <<: *integration_tests_job_def
  variables:
    set_no: 1
    targets: "dev_targets"
    total_target_sets: 5

integration_tests_dev_set_3:
  <<: *integration_tests_job_def
  variables:
    set_no: 2
    targets: "dev_targets"
    total_target_sets: 5

integration_tests_dev_set_4:
  <<: *integration_tests_job_def
  variables:
    set_no: 3
    targets: "dev_targets"
    total_target_sets: 5

integration_tests_dev_set_5:
  <<: *integration_tests_job_def
  variables:
    set_no: 4
    targets: "dev_targets"
    total_target_sets: 5

non_parallel_integration_tests_dev_set_1:
  <<: *integration_tests_job_def
  tags:
    - non_parallel_set_1
  variables:
    set_no: 0
    targets: "non_parallel_targets"
    total_target_sets: 2

non_parallel_integration_tests_dev_set_2:
  <<: *integration_tests_job_def
  tags:
    - non_parallel_set_2
  variables:
    set_no: 1
    targets: "non_parallel_targets"
    total_target_sets: 2

lengthy_integration_tests_set_1:
  <<: *integration_tests_job_def
  variables:
    set_no: 0
    targets: "lengthy_targets"
    total_target_sets: 3
  only:
    - triggers
    - schedules

lengthy_integration_tests_set_2:
  <<: *integration_tests_job_def
  variables:
    set_no: 1
    targets: "lengthy_targets"
    total_target_sets: 3
  only:
    - triggers
    - schedules

lengthy_integration_tests_set_3:
  <<: *integration_tests_job_def
  variables:
    set_no: 2
    targets: "lengthy_targets"
    total_target_sets: 3
  only:
    - triggers
    - schedules

# Run malware analysis tool against the workspace
malware_analysis:
  stage: test
  tags:
    - python
    - oel
    - ansible
  only:
      - master
      - schedules
  artifacts:
      paths:
          - report.txt
      expire_in: 1 week
  script:
    - scripts/run-malware-analysis.sh



doc_generation:
  stage: test
  tags:
    - oel
    - ansible
    - oci
    - compute
  except:
    - tags
  script:
    - export INSTALLDIR="/scratch/python-installs"
    - export VENVDIR="/scratch/python-venvs"
    - export LD_LIBRARY_PATH="$INSTALLDIR/lib:$LD_LIBRARY_PATH"

    # activate the 2.7 virtualenv
    - source $VENVDIR/my-2.7-venv-$CI_COMMIT_REF_NAME/bin/activate

    # setup dev environment to run make
    - cd ansible; source hacking/env-setup
    - ansible --version
    # install docsite requirements
    - pip install -r docsite_requirements.txt
    # Generate webdocs only for OCI modules
    - MODULES="$(python -c 'import os,re; print(",".join({re.sub(r"\..*", "", f) for f in os.listdir("lib/ansible/modules/cloud/oracle")}))')" make webdocs
    - ls docs/docsite/rst/modules/ | grep oci
    - deactivate

install_tests:
  stage: test
  tags:
  - oel
  - ansible
  - oci
  - compute
#  only:
#  - master
#  - schedules
#  - tags
  script:
  - source scripts/common-vars.sh
  - scripts/run-install-scripts.sh


# XXX run all manual ITs only when  triggered explicitly
#These tests are mostly for DBCS related modules. For DB System, the tests should be run in following order
# 1. Create DB System
# 2. Update DB System other than version
# 3. Patch Precheck
# 4. Patch Apply
# 5. Delete DB System
manual_db_system_create_integration_tests:
  stage: test
  only:
    - triggers
  tags:
    - oel
    - ansible
    - oci
    - compute
  script:
    - sed -i.bak "s@ANSIBLE_CALLBACK_WHITELIST='junit',@ANSIBLE_CALLBACK_WHITELIST='junit, profile_tasks', ANSIBLE_STDOUT_CALLBACK='debug',@g" ansible/test/runner/lib/executor.py
    - scripts/run-manual-db-system-create-integration-tests.sh

# XXX run all manual ITs only when triggered explicitly
manual_db_system_update_list_integration_tests:
  stage: test
  only:
    - triggers
  tags:
    - oel
    - ansible
    - oci
    - compute
  script:
    - sed -i.bak "s@ANSIBLE_CALLBACK_WHITELIST='junit',@ANSIBLE_CALLBACK_WHITELIST='junit, profile_tasks', ANSIBLE_STDOUT_CALLBACK='debug',@g" ansible/test/runner/lib/executor.py
    - scripts/run-manual-db-system-update-list-integration-tests.sh

manual_db_system_update_version_precheck_integration_tests:
  stage: test
  only:
    - triggers
  tags:
    - oel
    - ansible
    - oci
    - compute
  script:
    - sed -i.bak "s@ANSIBLE_CALLBACK_WHITELIST='junit',@ANSIBLE_CALLBACK_WHITELIST='junit, profile_tasks', ANSIBLE_STDOUT_CALLBACK='debug',@g" ansible/test/runner/lib/executor.py
    - scripts/run-manual-db-system-update-version-precheck-integration-tests.sh

manual_db_system_update_version_apply_integration_tests:
  stage: test
  only:
    - triggers
  tags:
    - oel
    - ansible
    - oci
    - compute
  script:
    - sed -i.bak "s@ANSIBLE_CALLBACK_WHITELIST='junit',@ANSIBLE_CALLBACK_WHITELIST='junit, profile_tasks', ANSIBLE_STDOUT_CALLBACK='debug',@g" ansible/test/runner/lib/executor.py
    - scripts/run-manual-db-system-update-version-apply-integration-tests.sh

# XXX run all length ITs only when scheduled or triggered explicitly
manual_db_system_delete_integration_tests:
  stage: test
  only:
    - triggers
  tags:
    - oel
    - ansible
    - oci
    - compute
  script:
    - sed -i.bak "s@ANSIBLE_CALLBACK_WHITELIST='junit',@ANSIBLE_CALLBACK_WHITELIST='junit, profile_tasks', ANSIBLE_STDOUT_CALLBACK='debug',@g" ansible/test/runner/lib/executor.py
    - scripts/run-manual-db-system-delete-integration-tests.sh

# XXX run all manual ITs only when  triggered explicitly
manual_db_home_create_integration_tests:
  stage: test
  only:
    - triggers
  tags:
    - oel
    - ansible
    - oci
    - compute
  script:
    - sed -i.bak "s@ANSIBLE_CALLBACK_WHITELIST='junit',@ANSIBLE_CALLBACK_WHITELIST='junit, profile_tasks', ANSIBLE_STDOUT_CALLBACK='debug',@g" ansible/test/runner/lib/executor.py
    - scripts/run-manual-db-home-create-integration-tests.sh

# XXX run all manual ITs only when  triggered explicitly
manual_db_home_create_from_backup_integration_tests:
  stage: test
  only:
    - triggers
  tags:
    - oel
    - ansible
    - oci
    - compute
  script:
    - sed -i.bak "s@ANSIBLE_CALLBACK_WHITELIST='junit',@ANSIBLE_CALLBACK_WHITELIST='junit, profile_tasks', ANSIBLE_STDOUT_CALLBACK='debug',@g" ansible/test/runner/lib/executor.py
    - scripts/run-manual-db-home-create-from-backup-integration-tests.sh

# XXX run all manual ITs only when  triggered explicitly
manual_db_home_list_delete_integration_tests:
  stage: test
  only:
    - triggers
  tags:
    - oel
    - ansible
    - oci
    - compute
  script:
    - sed -i.bak "s@ANSIBLE_CALLBACK_WHITELIST='junit',@ANSIBLE_CALLBACK_WHITELIST='junit, profile_tasks', ANSIBLE_STDOUT_CALLBACK='debug',@g" ansible/test/runner/lib/executor.py
    - scripts/run-manual-db-home-list-delete-integration-tests.sh

# XXX run all manual ITs only when  triggered explicitly
manual_db_home_patch_precheck_integration_tests:
  stage: test
  only:
    - triggers
  tags:
    - oel
    - ansible
    - oci
    - compute
  script:
    - sed -i.bak "s@ANSIBLE_CALLBACK_WHITELIST='junit',@ANSIBLE_CALLBACK_WHITELIST='junit, profile_tasks', ANSIBLE_STDOUT_CALLBACK='debug',@g" ansible/test/runner/lib/executor.py
    - scripts/run-manual-db-home-patch-precheck-integration-tests.sh

# XXX run all manual ITs only when  triggered explicitly
manual_db_home_patch_apply_integration_tests:
  stage: test
  only:
    - triggers
  tags:
    - oel
    - ansible
    - oci
    - compute
  script:
    - sed -i.bak "s@ANSIBLE_CALLBACK_WHITELIST='junit',@ANSIBLE_CALLBACK_WHITELIST='junit, profile_tasks', ANSIBLE_STDOUT_CALLBACK='debug',@g" ansible/test/runner/lib/executor.py
    - scripts/run-manual-db-home-patch-apply-integration-tests.sh

# XXX run all manual ITs only when triggered explicitly
manual_database_integration_tests:
  stage: test
  only:
    - triggers
  tags:
    - oel
    - ansible
    - oci
    - compute
  script:
    - sed -i.bak "s@ANSIBLE_CALLBACK_WHITELIST='junit',@ANSIBLE_CALLBACK_WHITELIST='junit, profile_tasks', ANSIBLE_STDOUT_CALLBACK='debug',@g" ansible/test/runner/lib/executor.py
    - scripts/run-manual-database-integration-tests.sh

manual_db_node_integration_tests:
  stage: test
  only:
    - triggers
  tags:
    - oel
    - ansible
    - oci
    - compute
  script:
    - sed -i.bak "s@ANSIBLE_CALLBACK_WHITELIST='junit',@ANSIBLE_CALLBACK_WHITELIST='junit, profile_tasks', ANSIBLE_STDOUT_CALLBACK='debug',@g" ansible/test/runner/lib/executor.py
    - scripts/run-manual-db-node-integration-tests.sh


# XXX run all manual ITs only when triggered explicitly
manual_backup_create_integration_tests:
  stage: test
  only:
    - triggers
  tags:
    - oel
    - ansible
    - oci
    - compute
  script:
    - sed -i.bak "s@ANSIBLE_CALLBACK_WHITELIST='junit',@ANSIBLE_CALLBACK_WHITELIST='junit, profile_tasks', ANSIBLE_STDOUT_CALLBACK='debug',@g" ansible/test/runner/lib/executor.py
    - scripts/run-manual-backup-create-integration-tests.sh
    
# XXX run all manual ITs only when triggered explicitly
manual_db_system_create_from_backup_integration_tests:
  stage: test
  only:
    - triggers
  tags:
    - oel
    - ansible
    - oci
    - compute
  script:
    - sed -i.bak "s@ANSIBLE_CALLBACK_WHITELIST='junit',@ANSIBLE_CALLBACK_WHITELIST='junit, profile_tasks', ANSIBLE_STDOUT_CALLBACK='debug',@g" ansible/test/runner/lib/executor.py
    - scripts/run-manual-db-system-create-from-backup-integration-tests.sh

# XXX run all manual ITs only when triggered explicitly
manual_backup_delete_list_integration_tests:
  stage: test
  only:
    - triggers
  tags:
    - oel
    - ansible
    - oci
    - compute
  script:
    - sed -i.bak "s@ANSIBLE_CALLBACK_WHITELIST='junit',@ANSIBLE_CALLBACK_WHITELIST='junit, profile_tasks', ANSIBLE_STDOUT_CALLBACK='debug',@g" ansible/test/runner/lib/executor.py
    - scripts/run-manual-backup-delete-list-integration-tests.sh

# XXX run all manual ITs only when triggered explicitly
manual_db_patch_integration_tests:
  stage: test
  only:
    - triggers
  tags:
    - oel
    - ansible
    - oci
    - compute
    - oci
    - compute
  script:
    - sed -i.bak "s@ANSIBLE_CALLBACK_WHITELIST='junit',@ANSIBLE_CALLBACK_WHITELIST='junit, profile_tasks', ANSIBLE_STDOUT_CALLBACK='debug',@g" ansible/test/runner/lib/executor.py
    - scripts/run-manual-db-patch-integration-tests.sh

# XXX run all manual ITs only when triggered explicitly
manual_db_system_shape_version_integration_tests:
  stage: test
  only:
    - triggers
  tags:
    - oel
    - ansible
    - oci
    - compute
  script:
    - sed -i.bak "s@ANSIBLE_CALLBACK_WHITELIST='junit',@ANSIBLE_CALLBACK_WHITELIST='junit, profile_tasks', ANSIBLE_STDOUT_CALLBACK='debug',@g" ansible/test/runner/lib/executor.py
    - scripts/run-manual-db-system-shape-version-integration-tests.sh

manual_db_patch_history_integration_tests:
  stage: test
  only:
    - triggers
  tags:
    - oel
    - ansible
    - oci
    - compute
  script:
    - sed -i.bak "s@ANSIBLE_CALLBACK_WHITELIST='junit',@ANSIBLE_CALLBACK_WHITELIST='junit, profile_tasks', ANSIBLE_STDOUT_CALLBACK='debug',@g" ansible/test/runner/lib/executor.py
    - scripts/run-manual-db-patch-history-integration-tests.sh

# XXX run all manual ITs only when  triggered explicitly
manual_data_guard_association_db_system_create_integration_tests:
  stage: test
  only:
    - triggers
  tags:
    - oel
    - ansible
    - oci
    - compute
  script:
    - sed -i.bak "s@ANSIBLE_CALLBACK_WHITELIST='junit',@ANSIBLE_CALLBACK_WHITELIST='junit, profile_tasks', ANSIBLE_STDOUT_CALLBACK='debug',@g" ansible/test/runner/lib/executor.py
    - scripts/run-manual-data-guard-association-db-system-create-integration-tests.sh


# XXX run all manual ITs only when  triggered explicitly
manual_data_guard_association_create_integration_tests:
  stage: test
  only:
    - triggers
  tags:
    - oel
    - ansible
    - oci
    - compute
  script:
    - sed -i.bak "s@ANSIBLE_CALLBACK_WHITELIST='junit',@ANSIBLE_CALLBACK_WHITELIST='junit, profile_tasks', ANSIBLE_STDOUT_CALLBACK='debug',@g" ansible/test/runner/lib/executor.py
    - scripts/run-manual-data-guard-association-create-integration-tests.sh

# XXX run all manual ITs only when  triggered explicitly
manual_waas_integration_tests:
  stage: test
  only:
    - triggers
  tags:
    - oel
    - ansible
    - oci
    - compute
  script:
    - sed -i.bak "s@ANSIBLE_CALLBACK_WHITELIST='junit',@ANSIBLE_CALLBACK_WHITELIST='junit, profile_tasks', ANSIBLE_STDOUT_CALLBACK='debug',@g" ansible/test/runner/lib/executor.py
    - scripts/run-manual-waas-integration-tests.sh

# XXX run all manual ITs only when  triggered explicitly
manual_data_guard_association_operations_integration_tests:
  stage: test
  only:
    - triggers
  tags:
    - oel
    - ansible
    - oci
    - compute
  script:
    - sed -i.bak "s@ANSIBLE_CALLBACK_WHITELIST='junit',@ANSIBLE_CALLBACK_WHITELIST='junit, profile_tasks', ANSIBLE_STDOUT_CALLBACK='debug',@g" ansible/test/runner/lib/executor.py
    - scripts/run-manual-data-guard-association-operations-integration-tests.sh

# XXX run all manual ITs only when  triggered explicitly
manual_idp_operations_integration_tests:
  stage: test
  only:
    - triggers
  tags:
    - oel
    - ansible
    - oci
    - compute
  script:
    - sed -i.bak "s@ANSIBLE_CALLBACK_WHITELIST='junit',@ANSIBLE_CALLBACK_WHITELIST='junit, profile_tasks', ANSIBLE_STDOUT_CALLBACK='debug',@g" ansible/test/runner/lib/executor.py
    - scripts/run-manual-idp-tests.sh

# XXX run all manual ITs only when  triggered explicitly
manual_adw_backup_operations_integration_tests:
  stage: test
  only:
    - triggers
  tags:
    - oel
    - ansible
    - oci
    - compute
  script:
    - sed -i.bak "s@ANSIBLE_CALLBACK_WHITELIST='junit',@ANSIBLE_CALLBACK_WHITELIST='junit, profile_tasks', ANSIBLE_STDOUT_CALLBACK='debug',@g" ansible/test/runner/lib/executor.py
    - scripts/run-manual-adw-backup-tests.sh
