---
# Copyright (c) 2020, 2021 Oracle and/or its affiliates.
# This software is made available to you under the terms of the GPL 3.0 license or the Apache 2.0 license.
# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)
# Apache License v2.0
# See LICENSE.TXT for details.

- name: Check pre-requisites
  fail:
    msg: "Environment variable {{item}} not set. Please declare an environment variable with an appropriate value for the sample to work."
  when: item not in ansible_env
  with_items:
    - "SAMPLE_COMPARTMENT_OCID"
    - "SAMPLE_IMAGE_OCID"
    - "SAMPLE_AD_NAME"

#==========================================================================================

- name: Create a temporary directory to house a temporary SSH keypair we will later use to connect to instance
  tempfile:
    state: directory
    suffix: cert
  register: result
- set_fact:
    temp_certificates_path: "{{ result.path }}"
- name: Generate a Private Key
  openssl_privatekey:
    path: "{{ temp_certificates_path }}/private_key.pem"
    type: RSA
    size: 2048
- set_fact:
    my_test_public_key: "{{ temp_certificates_path }}/public_key.pem"
- name: Generate a Public Key
  openssl_publickey:
    path: "{{ my_test_public_key }}"
    privatekey_path: "{{ temp_certificates_path }}/private_key.pem"
    format: OpenSSH

#==========================================================================================

- name: Create a VCN
  oci_network_vcn:
    compartment_id: "{{ instance_compartment }}"
    display_name: "{{ vcn_name }}"
    cidr_block: "{{ vcn_cidr_block }}"
    dns_label: "{{ vcn_dns_label }}"
  register: result
- set_fact:
    vcn_id: "{{ result.vcn.id }}"

#==========================================================================================

- name: Create a new Internet Gateway
  oci_network_internet_gateway:
    compartment_id: "{{ instance_compartment }}"
    vcn_id: "{{ vcn_id }}"
    name: "{{ ig_name }}"
    is_enabled: true
    state: 'present'
  register: result
- set_fact:
    ig_id: "{{ result.internet_gateway.id }}"

#==========================================================================================

- name: Create route table to connect internet gateway to the VCN
  oci_network_route_table:
    compartment_id: "{{ instance_compartment }}"
    vcn_id: "{{ vcn_id }}"
    name: "{{ route_table_name }}"
    route_rules: "{{ route_table_rules }}"
    state: 'present'
  register: result
- set_fact:
    rt_id: "{{ result.route_table.id }}"

#==========================================================================================

# Create a security list for allowing access to public instance
- name: Create a security list for allowing access to public instance
  oci_network_security_list:
    name: "{{ securitylist_name }}"
    compartment_id: "{{ instance_compartment }}"
    vcn_id: '{{ vcn_id }}'
    ingress_security_rules:
      # Allow incoming SSH connections
      - source: "{{ quad_zero_route }}"
        protocol: "{{ TCP_protocol }}"
        tcp_options:
          destination_port_range:
            min: "{{ SSH_port }}"
            max: "{{ SSH_port }}"
    egress_security_rules:
      # Allow ssh connections outside
      - destination: "{{ quad_zero_route }}"
        protocol: "{{ TCP_protocol }}"
        tcp_options:
          destination_port_range:
            min: "{{ SSH_port }}"
            max: "{{ SSH_port }}"
  register: result
- set_fact:
    instance_security_list_ocid: "{{ result.security_list.id }}"

#==========================================================================================

- name: Create a subnet to host the public instance. Link security_list and route_table.
  oci_network_subnet:
    availability_domain: "{{ instance_ad }}"
    cidr_block: "{{ subnet_cidr }}"
    compartment_id: "{{ instance_compartment }}"
    display_name: "{{ subnet_name }}"
    prohibit_public_ip_on_vnic: false
    route_table_id: "{{ rt_id }}"
    security_list_ids: [ "{{ instance_security_list_ocid }}" ]
    vcn_id: '{{ vcn_id }}'
    dns_label: "{{ subnet_dns_label }}"
  register: result
- set_fact:
    instance_subnet_id: "{{ result.subnet.id }}"

#==========================================================================================

- name: Create instance configuration required for instance pool
  oci_compute_management_instance_configuration:
    compartment_id: "{{ instance_compartment }}"
    display_name: "{{ instance_configuration_name }}"
    instance_details:
      instance_type: "compute"
      launch_details:
        compartment_id: "{{ instance_compartment }}"
        create_vnic_details:
          assign_public_ip: True
          display_name: "{{ instance_display_name }}"
        display_name: "{{ instance_display_name }}"
        shape: "{{ instance_shape }}"
        source_details:
          source_type: "image"
          image_id: "{{ instance_image }}"
        metadata:
          ssh_authorized_keys: "{{ lookup('file',  my_test_public_key ) }}"
  register: result

- name: Print instance configuration details
  debug:
    msg: "Created a new instance configuration {{ result.instance_configuration }}"

- set_fact:
    instance_configuration_id: "{{ result.instance_configuration.id }}"

#==========================================================================================

- name: Create a new instance pool for threshold based policy from this instance configuration
  oci_compute_management_instance_pool:
    name: "{{ threshold_policy_instance_pool_name }}"
    compartment_id: "{{ instance_compartment }}"
    instance_configuration_id: "{{ instance_configuration_id }}"
    # launch 1 instance when pool is created
    size: 1
    placement_configurations:
        - availability_domain: "{{ instance_ad }}"
          primary_subnet_id: "{{ instance_subnet_id }}"
  register: result

- set_fact:
    threshold_instance_pool_id: "{{ result.instance_pool.id }}"

#==========================================================================================

- name: Create a new instance pool for scheduling based policy from this instance configuration
  oci_compute_management_instance_pool:
    name: "{{ scheduled_policy_instance_pool_name }}"
    compartment_id: "{{ instance_compartment }}"
    instance_configuration_id: "{{ instance_configuration_id }}"
    # launch 1 instance when pool is created
    size: 1
    placement_configurations:
        - availability_domain: "{{ instance_ad }}"
          primary_subnet_id: "{{ instance_subnet_id }}"
  register: result

- set_fact:
    scheduled_instance_pool_id: "{{ result.instance_pool.id }}"

- name: Print instance pool details
  debug:
    msg: "Created a new instance {{ result.instance_pool }}"