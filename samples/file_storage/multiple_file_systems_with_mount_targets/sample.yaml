---
# Copyright (c) 2018, 2019, 2020 Oracle and/or its affiliates.
# This software is made available to you under the terms of the GPL 3.0 license or the Apache 2.0 license.
# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)
# Apache License v2.0
# See LICENSE.TXT for details.

- name: Create File System and Mount it through instances
  hosts: localhost
  collections:
    - oracle.oci
  vars:
    vcn_name: "multiple_file_system_vcn"
    cidr_block: "10.0.0.0/16"
    dns_label: "samplefsvcn"
    ig_name: "sample_ig"
    rt_name: "sample_rt"
    sec_list_name: "sample_sec_list"

    sample_subnet_ad2: 'subnetad2'
    subnet_cidr_block_ad2: "10.0.1.0/24"
    all_cidr_block: '0.0.0.0/0'
    all_protocol: 'all'
    tcp_protocol: '6'
    udp_protocol: '17'
    icmp_protocol: '1'

    http_port: 80
    https_port: 443

    mt1_hostname_label: 'samplemt1'
    mt1_display_name: 'samplemt1'
    mt2_hostname_label: 'samplemt2'
    mt2_display_name: 'samplemt2'
    fs1_display_name: 'samplefs1'
    fs2_display_name: 'samplefs2'
    mt1_fs1_export_path: '/mt1_fs1_path'
    mt2_fs1_export_path: '/mt2_fs1_path'
    mt1_fs2_export_path: '/mt1_fs2_path'

    instance_hostname_label: 'instancehl'
    instance_shape: "{{ lookup('env', 'SAMPLE_INSTANCE_SHAPE') | default('VM.Standard2.1', true) }}"
    instance_name: 'sample_instance'
    #########################################
    # Tenancy specific configuration
    # *Note* - Override the following variables based on your tenancy
    # or set a valid value for the corresponding environment variable
    #########################################
    compartment_id: "{{ lookup('env', 'SAMPLE_COMPARTMENT_OCID') }}"
    tenancy_ocid: "{{ lookup('env', 'SAMPLE_TENANCY_OCID') }}"

  tasks:
    - block:
      - include_tasks: setup.yaml

      # Create the First Mount Target
      - name: "Create the First Mount Target"
        oci_file_storage_mount_target:
          compartment_id: '{{ compartment_id }}'
          availability_domain: '{{ sample_availability_domain_ad2 }}'
          subnet_id: '{{ sample_subnet_id_ad2 }}'
          hostname_label: '{{ mt1_hostname_label }}'
          display_name: '{{ mt1_display_name }}'
          state: 'present'
        register: result
      - set_fact:
          mt1_id: "{{ result.mount_target.id }}"
          mt1_export_set_id: "{{ result.mount_target.export_set_id }}"
          mt1_private_ip_id: "{{ result.mount_target.private_ip_ids[0] }}"
  #==========================================================================================
  # Finding Ip Address of the First Mount Target for accessing it
      - name: "Get Ip Address of the First Mount Target"
        oci_network_private_ip_facts:
            id: '{{ mt1_private_ip_id }}'
        register: result
      - set_fact:
          mt1_ip_address: "{{ result.private_ips[0].ip_address }}"
      - debug:
           msg: "First Mount Target Ip Address: {{ mt1_ip_address }}"
  #==========================================================================================
  # Create the Second Mount Target
      - name: "Create the Second Mount Target"
        oci_file_storage_mount_target:
            compartment_id: '{{ compartment_id }}'
            availability_domain: '{{ sample_availability_domain_ad2 }}'
            subnet_id: '{{ sample_subnet_id_ad2 }}'
            hostname_label: '{{ mt2_hostname_label }}'
            display_name: '{{ mt2_display_name }}'
            state: 'present'
        register: result
      - set_fact:
          mt2_id: "{{ result.mount_target.id }}"
          mt2_export_set_id: "{{ result.mount_target.export_set_id }}"
          mt2_private_ip_id: "{{ result.mount_target.private_ip_ids[0] }}"
  #==========================================================================================
  # Finding Ip Address of the Second Mount Target for accessing it
      - name: "Get Ip Address of the Second Mount Target"
        oci_network_private_ip_facts:
            id: '{{ mt2_private_ip_id }}'
        register: result
      - set_fact:
          mt2_ip_address: "{{ result.private_ips[0].ip_address }}"
      - debug:
           msg: "Second Mount Target Ip Address: {{ mt2_ip_address }}"
  #==========================================================================================
  # Create the First File System. The Mount Targets created above will interface with this File System
      - name: "Create the First File System"
        oci_file_storage_file_system:
            compartment_id: '{{ compartment_id }}'
            availability_domain: '{{ sample_availability_domain_ad2 }}'
            display_name: '{{ fs1_display_name }}'
            state: 'present'
        register: result
      - set_fact:
          fs1_id: "{{ result.file_system.id }}"
  #==========================================================================================
  # Create the Second File System. The Mount Targets created above will interface with this File System
      - name: "Create the Second File System"
        oci_file_storage_file_system:
            compartment_id: '{{ compartment_id }}'
            availability_domain: '{{ sample_availability_domain_ad2 }}'
            display_name: '{{ fs2_display_name }}'
            state: 'present'
        register: result
      - set_fact:
          fs2_id: "{{ result.file_system.id }}"
  #==========================================================================================
  # Creating an Export to attach the First Mount Target to the First File System
      - name: "Create an Export with First Mount Target and First File System"
        oci_file_storage_export:
            export_set_id: '{{ mt1_export_set_id }}'
            file_system_id: '{{ fs1_id }}'
            export_options:
                  - source: '{{ cidr_block }}'
                    require_privileged_source_port: False
                    access: 'READ_WRITE'
                    identity_squash: 'NONE'
            path: '{{ mt1_fs1_export_path }}'
            state: 'present'
        register: result
      - set_fact:
          mt1_fs1_export_id: "{{ result.export.id }}"
  #==========================================================================================
  # Creating an Export to attach the Second Mount Target to the First File System
      - name: "Create an Export with Second Mount Target and First File System"
        oci_file_storage_export:
            export_set_id: '{{ mt2_export_set_id }}'
            file_system_id: '{{ fs1_id }}'
            export_options:
                  - source: '{{ cidr_block }}'
                    require_privileged_source_port: False
                    access: 'READ_WRITE'
                    identity_squash: 'NONE'
            path: '{{ mt2_fs1_export_path }}'
            state: 'present'
        register: result
      - set_fact:
          mt2_fs1_export_id: "{{ result.export.id }}"
  #==========================================================================================
  # Creating an Export to attach the First Mount Target to the Second File System
      - name: "Create an Export with First Mount Target and Second File System"
        oci_file_storage_export:
            export_set_id: '{{ mt1_export_set_id }}'
            file_system_id: '{{ fs2_id }}'
            export_options:
                  - source: '{{ cidr_block }}'
                    require_privileged_source_port: False
                    access: 'READ_WRITE'
                    identity_squash: 'NONE'
            path: '{{ mt1_fs2_export_path }}'
            state: 'present'
        register: result
      - set_fact:
          mt1_fs2_export_id: "{{ result.export.id }}"
  #==========================================================================================
  # Find appropriate image to launch compute instance.
      - name: Get images list
        oci_compute_image_facts:
          compartment_id: "{{ tenancy_ocid }}"
          operating_system: "Oracle Linux"
          operating_system_version: "7.8"
          sort_by: "TIMECREATED"
        register: output

      - set_fact:
          instance_image: "{{ item.id }}"
        loop: "{{ output.images }}"
        when: item.display_name.find("GPU") == -1
  #==========================================================================================
      - name: Launch the instance to mount filesystem
        oci_compute_instance:
          availability_domain: "{{ sample_availability_domain_ad2 }}"
          compartment_id: "{{ compartment_id }}"
          name: "{{ instance_name }}"
          image_id: "{{ instance_image }}"
          shape: "{{ instance_shape }}"
          create_vnic_details:
              assign_public_ip: True
              hostname_label: "{{ instance_hostname_label }}"
              subnet_id: "{{ sample_subnet_id_ad2 }}"
          metadata:
              ssh_authorized_keys: "{{ lookup('file',  my_test_public_key ) }}"
        register: result
  #==========================================================================================
      - name: Print instance details
        debug:
          msg: "Launched instance {{ result }}"
      - set_fact:
          instance_id: "{{result.instance.id }}"
  #==========================================================================================
      - name: Get the VNIC attachment details of instance
        oci_compute_vnic_attachment_facts:
          compartment_id: "{{ compartment_id }}"
          instance_id: "{{ instance_id }}"
        register: result
  #==========================================================================================
      - name: Get details of the VNIC
        oci_network_vnic_facts:
          id: "{{ result.vnic_attachments[0].vnic_id }}"
        register: result
      - set_fact:
          instance_public_ip: "{{result.vnic.public_ip}}"
      - name: Print the public ip of the launched instance
        debug:
          msg: "Public IP of launched instance {{ instance_public_ip }}"
  #==========================================================================================
      - name: Wait (upto 5 minutes) for port 22 to become open
        wait_for:
          port: 22
          host: '{{ instance_public_ip }}'
          state: started
          delay: 10
        vars:
          ansible_connection: local
  #==========================================================================================
      - name: Mount the filesystem in the instance and create a directory
        # Use "opc" user as this is an OL image
        # Disable SSH's strict host key checking just for this one command invocation
        # Installs nfs-utils to mount the File System and create a directory in the File System
        command: ssh -o "UserKnownHostsFile=/dev/null" -o "StrictHostKeyChecking=no" -i {{ temp_certificates_path }}/private_key.pem opc@{{ instance_public_ip }} "sudo yum -y install nfs-utils > nfs-utils-install.log;sudo mkdir -p /mnt{{ mt1_fs1_export_path }};sudo mount {{ mt1_ip_address }}:{{ mt1_fs1_export_path }} /mnt{{ mt1_fs1_export_path }};cd /mnt{{ mt1_fs1_export_path }};sudo mkdir filesystem_test"
        retries: 3
        delay: 5
        register: result
        until: result.rc == 0
  #==========================================================================================
  # Example of creating a snapshot of the current state of the First File System
      - name: "Create a Snapshot of the First File System"
        oci_file_storage_snapshot:
            file_system_id: '{{ fs1_id }}'
            name: 'ansible_snapshot'
            state: 'present'
  #==========================================================================================
  # Example of listing all snapshots of the First File System
      - name: "List all Snapshots of the First File System"
        oci_file_storage_snapshot_facts:
            file_system_id: '{{ fs1_id }}'
        register: result
      - debug:
          msg: "Details of the Snapshot: {{ result.snapshots | string }}"
  #==========================================================================================
      - include_tasks: teardown.yaml

      rescue:
        - include_tasks: teardown.yaml
          ignore_errors: yes

        - fail:
            msg: "{{ ansible_failed_result }}"