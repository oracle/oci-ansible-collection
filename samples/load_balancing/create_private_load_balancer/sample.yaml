---
# Copyright (c) 2020, 2021 Oracle and/or its affiliates.
# This software is made available to you under the terms of the GPL 3.0 license or the Apache 2.0 license.
# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)
# Apache License v2.0
# See LICENSE.TXT for details.

- name: Create a private load balancer instance and print the details
  hosts: localhost
  collections:
    - oracle.oci
  vars:
    vcn_name: "sample_load_balancer_vcn"
    cidr_block: "10.1.0.0/16"
    dns_label: "samplelbvcn"
    ig_name: "sample_ig"
    rt_name: "sample_rt"
    sec_list_name: "sample_sec_list"

    sample_subnet_ad1: 'subnetad1'
    subnet_cidr_block_ad1: "10.1.20.0/24"
    all_cidr_block: '0.0.0.0/0'
    all_protocol: 'all'
    tcp_protocol: '6'

    sample_app_server_instance_one_name: 'AS-1'
    sample_app_server_instance_two_name: 'AS-2'
    sample_app_server_shape: "{{ lookup('env', 'SAMPLE_INSTANCE_SHAPE') | default('VM.Standard2.1', true) }}"

    lb_name: "sample_load_balancer"
    sample_shape: "100Mbps"
    sample_backend_set_name: 'sample_backend_set'
    sample_backend_set_policy: 'ROUND_ROBIN'

    # Initialize values for listeners
    http_listener_name: 'http_listener'
    http_port: 80

    #########################################
    # Tenancy specific configuration
    # *Note* - 
    #   Set a valid value for the corresponding environment variable.
    #########################################
    compartment_id: "{{ lookup('env', 'SAMPLE_COMPARTMENT_OCID') }}"

# Create a private load balancer with the variables initialized in the beginning
  tasks:
    - block:
      - include_tasks: setup.yaml
      - name: Create private Load Balancer
        oci_loadbalancer_load_balancer:
          is_private: yes
          compartment_id: "{{ compartment_id }}"
          name: "{{ lb_name }}"
          shape_name: "{{ sample_shape }}"
          subnet_ids:
            - "{{ sample_subnet_id_ad1 }}"
          state: 'present'
        register: result
      - debug:
         msg: "Load balancer details: {{ result.load_balancer}}"
      - set_fact:
          private_load_balancer_id: "{{ result.load_balancer.id }}"
          private_load_balancer_ip_addresses: "{{ result.load_balancer.ip_addresses }}"
  #==========================================================================================
      - name: Create Backend Set
        oci_loadbalancer_backend_set:
           load_balancer_id: "{{ private_load_balancer_id }}"
           name: '{{ sample_backend_set_name }}'
           policy: '{{ sample_backend_set_policy }}'
           health_checker:
              interval_in_millis: 30000
              port: '{{ http_port }}'
              protocol: "HTTP"
              response_body_regex: ".*"
              retries: 3
              timeout_in_millis: 10000
              return_code: 200
              url_path: "/"
           state: 'present'
   #==========================================================================================
      - name: Create Listener for HTTP traffic
        oci_loadbalancer_listener:
           load_balancer_id: "{{ private_load_balancer_id }}"
           name: '{{ http_listener_name }}'
           default_backend_set_name: '{{ sample_backend_set_name }}'
           port: '{{ http_port }}'
           protocol: "HTTP"
           connection_configuration:
                idle_timeout: 300
           state: 'present'
  #==========================================================================================
      - name: Create First Backend
        oci_loadbalancer_backend:
           load_balancer_id: "{{ private_load_balancer_id }}"
           backend_set_name: "{{ sample_backend_set_name }}"
           ip_address: "{{ sample_app_server_instance_one_private_ip }}"
           port: '{{ http_port }}'
           backup: False
           drain: False
           offline: False
           weight: 1
           state: 'present'
  #==========================================================================================
      - name: Create Second Backend
        oci_loadbalancer_backend:
           load_balancer_id: "{{ private_load_balancer_id }}"
           backend_set_name: "{{ sample_backend_set_name }}"
           ip_address: "{{ sample_app_server_instance_two_private_ip }}"
           port: '{{ http_port }}'
           backup: False
           drain: False
           offline: False
           weight: 1
           state: 'present'
  #==========================================================================================
      - debug:
          msg: "Load balancer Ip addresses details : {{ private_load_balancer_ip_addresses }}"
  #==========================================================================================
      - include_tasks: teardown.yaml

      rescue:
        - include_tasks: teardown.yaml
          ignore_errors: yes

        - fail:
            msg: "{{ ansible_failed_result }}"