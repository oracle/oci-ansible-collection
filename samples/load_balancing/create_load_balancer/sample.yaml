---
# Copyright (c) 2020, 2021 Oracle and/or its affiliates.
# This software is made available to you under the terms of the GPL 3.0 license or the Apache 2.0 license.
# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)
# Apache License v2.0
# See LICENSE.TXT for details.

- name: Create a public load balancer instance and print the details
  hosts: localhost
  collections:
    - oracle.oci
  vars:
    vcn_name: "ansible-sample-create-lb-vcn"
    cidr_block: "10.0.0.0/16"
    dns_label: "samplelbvcn"
    ig_name: "ansible-sample-create-lb-ig"
    rt_name: "ansible-sample-create-lb-rt"
    sec_list_name: "ansible-sample-create-lb-sec-list"

    sample_subnet_ad1: 'ansible-sample-create-lb-subnetad1'
    sample_subnet_ad1_dnslabel: 'subnetad1'
    sample_subnet_ad2: 'ansible-sample-create-lb-subnetad2'
    sample_subnet_ad2_dnslabel: 'subnetad2'
    subnet_cidr_block_ad1: "10.0.20.0/24"
    subnet_cidr_block_ad2: "10.0.21.0/24"
    all_cidr_block: '0.0.0.0/0'
    all_protocol: 'all'
    tcp_protocol: '6'

    sample_app_server_instance_one_name: 'ansible-sample-create-lb-AS-1'
    sample_app_server_instance_two_name: 'ansible-sample-create-lb-AS-2'
    sample_app_server_shape: "{{ lookup('env', 'SAMPLE_INSTANCE_SHAPE') | default('VM.Standard2.1', true) }}"

    lb_name: "ansible-sample-create-lb-lb"
    sample_shape: "100Mbps"
    sample_backend_set_name: 'ansible-sample-create-lb-bs'
    sample_backend_set_policy: 'ROUND_ROBIN'

    # Initialize values for certificates
    sample_ca_certificate: |
      -----BEGIN CERTIFICATE-----
      MIIDXTCCAkSgAwIBAgIBADANBgkqhkiG9w0BAQsFADBIMQswCQYDVQQGEwJ1czET
      MBEGA1UECAwKV2FzaGluZ3RvbjEPMA0GA1UECgwGT3JhY2xlMRMwEQYDVQQDDApv
      cmFjbGUuY29tMB4XDTIxMDQwOTE0NDAwMloXDTI0MDEwNDE0NDAwMlowSDELMAkG
      A1UEBhMCdXMxEzARBgNVBAgMCldhc2hpbmd0b24xDzANBgNVBAoMBk9yYWNsZTET
      MBEGA1UEAwwKb3JhY2xlLmNvbTCCASMwDQYJKoZIhvcNAQEBBQADggEQADCCAQsC
      ggECANcO5DmrbGzM6w5pjIrtfYvZAfQrutyx3epiFlY2DaomIHY/y0+U3wKcTPHi
      1rvrxyAR0+8RAG1IkqwVc8ldpXFdEM+2sF2/xjP2v930LVJZhkEaZimbL527hrvP
      2RD+K1nk5s8Bl/YZ9YddlSBt9x/eAKS2eZI5lmuAplRokHw4AzOlFCpXn/U0LpQW
      ufLyL67fP+DtQxszPNTYHumWTt+omFiqtjJIcGoiVdq50gRnZooO9hXfR8OcAjJv
      5mozVdkRfGNoZlfZCo7eMOLoMa/LRvpLsdzcKNrOcjBvpL2RquznoXiloLWEWg9R
      NjPNY7Kddy26QiuQDzLTo+FPwYjxAgMBAAGjUDBOMB0GA1UdDgQWBBS9T37Vt7Ye
      h74A2O9ouwXtPYY2LzAfBgNVHSMEGDAWgBS9T37Vt7Yeh74A2O9ouwXtPYY2LzAM
      BgNVHRMEBTADAQH/MA0GCSqGSIb3DQEBCwUAA4IBAgCkreQvVhRTtJD4XKcL8Ewo
      4SikLEBnpMCkw3o2rrhFXy0j5uPH9oAl+JQNlYtSjjp//dfCAdbEKTCBt3k+2c1h
      ov9oyCSymFvNrjIwru+0OmNhiLZ/pJS1fs4twOpqSszF1LqqkM8q2+JpnuDdMk3q
      LaRewvaH9iY5on2QrMnZ1iMe1JUAMB3HyfZE5SRhJz4J9Co0nI8Jk//0jV2QqNHM
      6MhuJxkL6D6VmZw0ia/OpJQXkyJqFl67QJUO5q2nyo8b2/mUbB0GyIISUGmnoAvb
      g8pGy2iy7C3kZM5iH7rkLjQ2nEu+WlIviBTrCrWv+ayaITfP/F/vyaxyxmclp5+j
      fw==
      -----END CERTIFICATE-----


    sample_private_key: |
      -----BEGIN PRIVATE KEY-----
      MIIEwQIBADANBgkqhkiG9w0BAQEFAASCBKswggSnAgEAAoIBAgDXDuQ5q2xszOsO
      aYyK7X2L2QH0K7rcsd3qYhZWNg2qJiB2P8tPlN8CnEzx4ta768cgEdPvEQBtSJKs
      FXPJXaVxXRDPtrBdv8Yz9r/d9C1SWYZBGmYpmy+du4a7z9kQ/itZ5ObPAZf2GfWH
      XZUgbfcf3gCktnmSOZZrgKZUaJB8OAMzpRQqV5/1NC6UFrny8i+u3z/g7UMbMzzU
      2B7plk7fqJhYqrYySHBqIlXaudIEZ2aKDvYV30fDnAIyb+ZqM1XZEXxjaGZX2QqO
      3jDi6DGvy0b6S7Hc3CjaznIwb6S9kars56F4paC1hFoPUTYzzWOynXctukIrkA8y
      06PhT8GI8QIDAQABAoIBAgCxZmJTRBo7ocogaGb7zy5qJweakFwjY0HI70K3uP0K
      p0rN4I/oxMg1khNS0SkLeVIYHTyzD1ZHz77V3xhVOj+YRQnyHiRcIS7xfJEHGT4t
      mRXLLGir14yu05sv4COSBehizhSrHAhrhTxpfoPebXeWPP5Q4Qll2sU/Rq9uH5dY
      MJAZ0qmOoGnHxKPgq6Myv/RGm+XoIbfMr5HxJ1Vifn0Ksa4oSKJvF1wbU1rq0Ibs
      J5RQcM9bYUL6ZdmINhIOGpH8omeqyriY4hf6P7o2w1cs7c2f1X+bz7vkqUm39VBn
      bfyd78ut6vG+JOY/IsSUKwQcmPVdwG6mvwZQZqIgAVvM1QKBgQ6y2ZfEaJyu2xB1
      BI8P3x801XwHAR1V1crlQhMCm0hjISfXLpf4suNTjDjqO18fQM4gBCEW+YzQnA8k
      rSm2yn13n2Mkjtznl85J8Uqvq3M6rx3Xq329V4M5IkELvAKyK81kGNEV0fXpymU0
      hNSkZhcihPKrnzmexoFLc3jUrYCu9wKBgQ6hlEAiXBhochgC4PU86KsUcILZMLO+
      3JBM7v+O074jZWb1nKC7zvUUM8lGExbZn1h7SvIIPzG/YoWMK0sVcExeTK7P2a/C
      WCQkC1JpNqBKr4wQZNpUQ5krvKGmfm8S8IWraYL37o+iGDLIseSFv/3blkj4tYwc
      y/4lEFiNri7FVwKBgCyN9wYUVwabAW7hRvBhK/VsMbPDh51kkqp0RdVaEVlbIyWh
      H5uKQrbSijn7yfyMv+QRKHMlMU2nC2bbxgqsCyBHet0L9AGqAn9NpBzAYvTm7euH
      1E1Ro/QhO7Pv3fhOHHh68r7XZZoHE3uztvDbZJq8CEOP9xayMwW5sEyUYVmxAoGB
      AZZLY42WmdsyjSI6zr9VqcEk1zzCCK1qdYiy4CvZEiX6yOlZnSHiODmByJJ+XZsr
      qshs/8YfPME66aujwphHvzD3dnr7bRJSx1DVnZHmKAsR8cqRdhFv57yT0KEj096l
      EorefiNw0EnQACo/Cb/sbJgWPEImR1WUVzQkCscLnu0vAoGBB2lTw7uUDKkNGJS7
      PAcLxKuDYdOA5Mlm9h7QqBngvFTLGy6eep8vpEFU9fO559tylvyMe8NmQcAzKAj0
      MUeMcIP2gWtMdBjV+U/jkwoljYxisdFXssy7nnRPuEMGw/W9Bnjthnqrl3zkC/K0
      5pgNHzj5L6f1gri5SPhVGFHlO4hK
      -----END PRIVATE KEY-----

    sample_public_certificate: |
      -----BEGIN CERTIFICATE-----
      MIIDXTCCAkSgAwIBAgIBADANBgkqhkiG9w0BAQsFADBIMQswCQYDVQQGEwJ1czET
      MBEGA1UECAwKV2FzaGluZ3RvbjEPMA0GA1UECgwGT3JhY2xlMRMwEQYDVQQDDApv
      cmFjbGUuY29tMB4XDTIxMDQwOTE0NDAwMloXDTI0MDEwNDE0NDAwMlowSDELMAkG
      A1UEBhMCdXMxEzARBgNVBAgMCldhc2hpbmd0b24xDzANBgNVBAoMBk9yYWNsZTET
      MBEGA1UEAwwKb3JhY2xlLmNvbTCCASMwDQYJKoZIhvcNAQEBBQADggEQADCCAQsC
      ggECANcO5DmrbGzM6w5pjIrtfYvZAfQrutyx3epiFlY2DaomIHY/y0+U3wKcTPHi
      1rvrxyAR0+8RAG1IkqwVc8ldpXFdEM+2sF2/xjP2v930LVJZhkEaZimbL527hrvP
      2RD+K1nk5s8Bl/YZ9YddlSBt9x/eAKS2eZI5lmuAplRokHw4AzOlFCpXn/U0LpQW
      ufLyL67fP+DtQxszPNTYHumWTt+omFiqtjJIcGoiVdq50gRnZooO9hXfR8OcAjJv
      5mozVdkRfGNoZlfZCo7eMOLoMa/LRvpLsdzcKNrOcjBvpL2RquznoXiloLWEWg9R
      NjPNY7Kddy26QiuQDzLTo+FPwYjxAgMBAAGjUDBOMB0GA1UdDgQWBBS9T37Vt7Ye
      h74A2O9ouwXtPYY2LzAfBgNVHSMEGDAWgBS9T37Vt7Yeh74A2O9ouwXtPYY2LzAM
      BgNVHRMEBTADAQH/MA0GCSqGSIb3DQEBCwUAA4IBAgCkreQvVhRTtJD4XKcL8Ewo
      4SikLEBnpMCkw3o2rrhFXy0j5uPH9oAl+JQNlYtSjjp//dfCAdbEKTCBt3k+2c1h
      ov9oyCSymFvNrjIwru+0OmNhiLZ/pJS1fs4twOpqSszF1LqqkM8q2+JpnuDdMk3q
      LaRewvaH9iY5on2QrMnZ1iMe1JUAMB3HyfZE5SRhJz4J9Co0nI8Jk//0jV2QqNHM
      6MhuJxkL6D6VmZw0ia/OpJQXkyJqFl67QJUO5q2nyo8b2/mUbB0GyIISUGmnoAvb
      g8pGy2iy7C3kZM5iH7rkLjQ2nEu+WlIviBTrCrWv+ayaITfP/F/vyaxyxmclp5+j
      fw==
      -----END CERTIFICATE-----

    sample_certificate_name: "ansible-sample-create-lb-cert"

    # Initialize values for listeners
    http_listener_name: 'ansible-sample-create-lb-http-listener'
    https_listener_name: 'ansible-sample-create-lb-https-listener'
    http_port: 80
    https_port: 443

    #########################################
    # Tenancy specific configuration
    # *Note* - Override the following variables based on your tenancy
    # or set a valid value for the corresponding environment variable
    #########################################
  
    compartment_id: "{{ lookup('env', 'SAMPLE_COMPARTMENT_OCID') }}"
    tenancy_ocid: "{{ lookup('env', 'SAMPLE_TENANCY_OCID') }}"

# Create a public load balancer with the variables initialized in the beginning
  tasks:
    - block:
      - import_tasks: setup.yaml
      - name: Create Public Load Balancer
        oci_loadbalancer_load_balancer:
          compartment_id: "{{ compartment_id }}"
          name: "{{ lb_name }}"
          shape_name: "{{ sample_shape }}"
          #A public load balancer is regional in scope and requires two subnets, each
          #in a separate availability domain. One subnet hosts the primary load balancer
          #and the other hosts a standby load balancer to ensure accessibility even during
          #an availability domain outage.
          subnet_ids:
            - "{{ sample_subnet_id_ad1 }}"
            - "{{ sample_subnet_id_ad2 }}"
          state: 'present'
        register: result
      - debug:
         msg: "Load balancer details: {{ result.load_balancer}}"
      - set_fact:
          public_load_balancer_id: "{{ result.load_balancer.id }}"
          public_load_balancer_ip_addresses: "{{ result.load_balancer.ip_addresses }}"
  #==========================================================================================
      - name: Create Backend Set
        oci_loadbalancer_backend_set:
           load_balancer_id: "{{ public_load_balancer_id }}"
           name: '{{ sample_backend_set_name }}'
           policy: '{{ sample_backend_set_policy }}'
           health_checker:
              interval_in_millis: 30000
              port: '{{ http_port }}'
              protocol: "HTTP"
              response_body_regex: ".*"
              retries: 3
              timeout_in_millis: 10000
              return_code: 200
              url_path: "/"
           state: 'present'
  #==========================================================================================
      - name: Create Certificate for Listener
        oci_loadbalancer_certificate:
           load_balancer_id: "{{ public_load_balancer_id }}"
           name: '{{ sample_certificate_name }}'
           ca_certificate: '{{ sample_ca_certificate }}'
           private_key: '{{ sample_private_key }}'
           public_certificate: '{{ sample_public_certificate }}'
           state: 'present'
   #==========================================================================================
      - name: Create Listener for HTTP traffic
        oci_loadbalancer_listener:
           load_balancer_id: "{{ public_load_balancer_id }}"
           name: '{{ http_listener_name }}'
           default_backend_set_name: '{{ sample_backend_set_name }}'
           port: '{{ http_port }}'
           protocol: "HTTP"
           connection_configuration:
                idle_timeout: 300
           state: 'present'
  #==========================================================================================
      - name: Create Listener for HTTPS traffic
        oci_loadbalancer_listener:
           load_balancer_id: "{{ public_load_balancer_id }}"
           name: '{{ https_listener_name }}'
           default_backend_set_name: '{{ sample_backend_set_name }}'
           port: '{{ https_port }}'
           protocol: "HTTP"
           ssl_configuration:
              certificate_name: '{{ sample_certificate_name }}'
              verify_peer_certificate: False
           state: 'present'
  #==========================================================================================
      - name: Create First Backend
        oci_loadbalancer_backend:
           load_balancer_id: "{{ public_load_balancer_id }}"
           backend_set_name: "{{ sample_backend_set_name }}"
           ip_address: "{{ sample_app_server_instance_one_private_ip }}"
           port: '{{ http_port }}'
           backup: False
           drain: False
           offline: False
           weight: 1
           state: 'present'
  #==========================================================================================
      - name: Create Second Backend
        oci_loadbalancer_backend:
           load_balancer_id: "{{ public_load_balancer_id }}"
           backend_set_name: "{{ sample_backend_set_name }}"
           ip_address: "{{ sample_app_server_instance_two_private_ip }}"
           port: '{{ http_port }}'
           backup: False
           drain: False
           offline: False
           weight: 1
           state: 'present'
  #==========================================================================================
      - name: Check whether the Load Balancer able to access Backends
        uri:
           url: 'http://{{public_load_balancer_ip_addresses[0].ip_address}}/'
           body_format: json
           timeout: 600
        register: result
        retries: 10
        delay: 60
        until: result['status']|default(0) == 200
      - debug:
          msg: "{{ result.status }} "
      - assert:
          that:  "200 == {{ result.status }}"
  #==========================================================================================
      - debug:
          msg: "Load balancer Ip addresses details : {{ public_load_balancer_ip_addresses }}"

  #==========================================================================================
      - import_tasks: teardown.yaml

      rescue:
        - import_tasks: teardown.yaml
          ignore_errors: yes

        - fail:
            msg: "{{ ansible_failed_result }}"