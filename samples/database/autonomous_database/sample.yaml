---
# Copyright (c) 2020, 2021 Oracle and/or its affiliates.
# This software is made available to you under the terms of the GPL 3.0 license or the Apache 2.0 license.
# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)
# Apache License v2.0
# See LICENSE.TXT for details.

- name: Autonomous Database usage example
  hosts: localhost
  collections:
    - oracle.oci
  connection: local
  vars:
    #########################################
    # *Note* - Override the following variables based on your tenancy
    # or set a valid value for the corresponding environment variable
    # Please refer to module documentation for sample values for
    # variables
    #########################################
    compartment_ocid: "{{ lookup('env', 'SAMPLE_COMPARTMENT_OCID') }}"
    cpu_core_count: "{{ lookup('env', 'SAMPLE_CPU_CORE_COUNT') | default(1, true) }}" # sample value, cpu_core_count: 1
    display_name: "{{ lookup('env', 'SAMPLE_DB_DISPLAY_NAME') | default('sample_autonomous_db', true) }}" # sample value, display_name: 'sample_autonomous_db'
    admin_password: "{{ lookup('env', 'SAMPLE_ADMIN_PASSWORD') | default('BEstr0ng_#11', true) }}" # sample value, admin_password: 'BEstr0ng_#11'
    db_name: "{{ lookup('env', 'SAMPLE_DB_NAME') | default('autonomousdb', true) }}" # sample value, db_name: 'autonomousdb' (Maximum 14 alphanumeric characters)
    data_storage_size_in_tbs: "{{ lookup('env', 'SAMPLE_DATA_STORAGE_SIZE_IN_TBS') | default(1, true) }}" # sample value, data_storage_size_in_tbs: 1
    license_model: "{{ lookup('env', 'SAMPLE_LICENSE_MODEL') | default('LICENSE_INCLUDED', true) }}" #sample value, license_model: 'LICENSE_INCLUDED'

  tasks:
    - block:

        - name: Check pre-requisites
          fail:
            msg: "Environment variable {{item}} not set. Please declare an environment variable with an appropriate value for the sample to work."
          when: item not in ansible_env
          with_items:
            - "SAMPLE_COMPARTMENT_OCID"

        - name: Create a new Autonomous Database
          oci_database_autonomous_database:
              compartment_id: "{{ compartment_ocid }}"
              cpu_core_count: "{{ cpu_core_count }}"
              display_name: "{{ display_name }}"
              admin_password: "{{ admin_password }}"
              db_name: "{{ db_name }}"
              data_storage_size_in_tbs: "{{ data_storage_size_in_tbs }}"
              license_model: "{{ license_model }}"
              state: 'present'
          register: result

        - set_fact:
             autonomous_database_id: "{{ result.autonomous_database.id }}"

        - assert:
            that:
              - result.autonomous_database.lifecycle_state == "AVAILABLE"

    # List Autonomous Databases filtered by Display Name
        - name: List All Autonomous Databases in a compartment, filtered by Display Name
          oci_database_autonomous_database_facts:
             compartment_id: "{{ compartment_ocid }}"
             display_name: '{{ display_name }}'
          register: result

        - name: Assert that specified Autonomous Database is listed
          assert:
             that:
                - result.autonomous_databases[0].display_name == display_name

    # Stop Autonomous Databases
        - name: Stop an Autonomous Database
          oci_database_autonomous_database_actions:
             autonomous_database_id: "{{ autonomous_database_id }}"
             action: 'stop'
          register: result

        - name: Assert that specified Autonomous Database is stopped
          assert:
             that:
                - result.autonomous_database.lifecycle_state == 'STOPPED'

    # Start Autonomous Databases
        - name: Start Autonomous Database
          oci_database_autonomous_database_actions:
             autonomous_database_id: "{{ autonomous_database_id }}"
             action: 'start'
          register: result

        - name: Assert that specified Autonomous Database is started and available
          assert:
             that:
                - result.autonomous_database.lifecycle_state == 'AVAILABLE'

    # Get a specific Autonomous Database
        - name: Get a specific Autonomous Database's facts
          oci_database_autonomous_database_facts:
             autonomous_database_id: "{{ autonomous_database_id }}"
          register: result
        - debug: # print facts retrieved about the Autonomous Database
              msg: "{{result}}"
        - name: Assert that specified Autonomous Database is listed
          assert:
             that:
                - result.autonomous_databases[0].display_name == display_name

        - import_tasks: teardown.yaml

      rescue:

        - import_tasks: teardown.yaml
          ignore_errors: yes

        - fail:
            msg: "The sample execution failed."
