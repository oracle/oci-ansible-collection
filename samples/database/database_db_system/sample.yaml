---
# Copyright (c) 2020, 2021 Oracle and/or its affiliates.
# This software is made available to you under the terms of the GPL 3.0 license or the Apache 2.0 license.
# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)
# Apache License v2.0
# See LICENSE.TXT for details.

- name: Autonomous Database usage example
  hosts: localhost
  collections:
    - oracle.oci
  connection: local
  vars:
    # common networking definitions
    quad_zero_route: "0.0.0.0/0"
    TCP_protocol: "6"
    SSH_port: "22"

    vcn_name: "sample-test-vcn"
    vcn_cidr_block: "10.0.0.0/16"
    vcn_dns_label: "sampletestdns"

    subnet_cidr: "10.0.0.48/28"
    subnet_name: "sample-subnet-name"
    subnet_dns_label: "subnetdns"
    securitylist_name: "mysecuritylist"

    ig_name: "internetgatewayformytestvcn"
    route_table_name: "myroutetable"
    # route all internet access to our Internet Gateway
    route_table_rules:
      - cidr_block: "{{ quad_zero_route }}"
        network_entity_id: "{{ ig_id }}"
    #########################################
    # *Note* - Override the following variables based on your tenancy
    # or set a valid value for the corresponding environment variable
    # Please refer to module documentation for sample values for
    # variables
    #########################################
    cpu_core_count: "{{ lookup('env', 'SAMPLE_CPU_CORE_COUNT') | default(1, true) }}" # sample value, cpu_core_count: 1
    data_storage_percentage: 80
    database_edition: 'ENTERPRISE_EDITION'
    disk_redundancy: 'NORMAL'
    db_system_display_name: 'sampledbdisplayname'
    hostname: 'db-system-hostname'
    initial_data_storage_size_in_gb: 256
    license_model: 'LICENSE_INCLUDED'
    node_count: 1
    shape: 'VM.Standard2.1'
    ssh_public_key_full_path: '{{ ssh_public_key_path }}/public_key.pem'
    ssh_public_keys:
      - "{{ lookup('file', ssh_public_key_full_path) }}"
    db_system_freeform_tags:
      system_license: 'trial'
    db_home:
      database:
        admin_password: 'BEstr0ng_#1'
        character_set: 'AL32UTF8'
        db_backup_config:
          auto_backup_enabled: False
        freeform_tags:
          database_type: 'attendance'
        db_name: 'sampledb'
        db_workload: 'OLTP'
        ncharacter_set: 'AL16UTF16'
      db_version: '12.2.0.1'
      display_name: 'dbdisplayname'
    cluster_name: 'dbcluster'
    backup_db_name: 'dbfrombkp'
    database_admin_password: 'BEstr0ng_#1'
    backup_tde_password: 'backup_tde_password_example'
    updated_freeform_tags:
      Department: 'updated'
    backup_display_name: 'bkpdisplayname'
    #########################################
    # Tenancy specific configuration
    # *Note* - Override the following variables based on your tenancy
    # or set a valid value for the corresponding environment variable
    #########################################
    compartment_ocid: "{{ lookup('env', 'SAMPLE_COMPARTMENT_OCID') }}"
    availability_domain: "{{ lookup('env', 'SAMPLE_AD_NAME') }}"

  tasks:
    - block:

        - name: Check pre-requisites
          fail:
            msg: "Environment variable {{item}} not set. Please declare an environment variable with an appropriate value for the sample to work."
          when: item not in ansible_env
          with_items:
            - "SAMPLE_COMPARTMENT_OCID"
            - "SAMPLE_AD_NAME"

        - import_tasks: setup.yaml

        - name: Create DB System
          oci_database_db_system:
            compartment_id: "{{ compartment_ocid }}"
            availability_domain: "{{ availability_domain }}"
            cluster_name: "{{ cluster_name }}"
            cpu_core_count: "{{ cpu_core_count }}"
            data_storage_percentage: "{{ data_storage_percentage }}"
            database_edition: "{{ database_edition }}"
            db_home: "{{ db_home }}"
            disk_redundancy: "{{ disk_redundancy }}"
            display_name: "{{ db_system_display_name }}"
            hostname: "{{ hostname }}"
            data_storage_size_in_gbs: "{{ initial_data_storage_size_in_gb }}"
            license_model: "{{ license_model }}"
            node_count: "{{ node_count }}"
            shape: "{{ shape }}"
            ssh_public_keys: "{{ ssh_public_keys }}"
            subnet_id: "{{ subnet_id }}"
            freeform_tags: "{{ db_system_freeform_tags }}"
            state: 'present'
          register: result

        - set_fact:
            db_system_id: "{{ result.db_system.id }}"

        - name: List the specific Db System
          oci_database_db_system_facts:
            db_system_id: '{{ db_system_id }}'
          register: result

        - name: Assert that specified Db System was listed
          assert:
            that:
              - result.db_systems[0].id == db_system_id

        - name: Get the DB Home Id
          oci_database_db_home_facts:
            compartment_id: "{{ compartment_ocid }}"
            db_system_id: "{{ db_system_id }}"
          register: result

        - set_fact:
            db_home_id: "{{ result.db_homes[0].id }}"

        - name: Get DB Node information of the DB System
          oci_database_db_node_facts:
            compartment_id: '{{ compartment_ocid }}'
            db_system_id: '{{ db_system_id }}'
          register: result

        # Get the Vnic Id of DB Node filtered by hostname. hostname is same for DB System, which one can collect from oci_db_system_facts module
        - set_fact:
            db_node_vnic_id: "{{ item.vnic_id }}"
          with_items: "{{ result.db_nodes }}"
          when: item.hostname == hostname and item.vnic_id != None

        - name: Get Vnic Details for DB Node of DB System
          oci_network_vnic_facts:
            id: '{{ db_node_vnic_id }}'
          register: result
          when: db_node_vnic_id is defined

        # Printing Public and Private Ip. It could be used by storing in variables.
        - debug:
            msg: "DB Node Public Ip {{ result.vnic.public_ip }} and Private Ip {{ result.vnic.private_ip }}"
          when: db_node_vnic_id is defined

        - name: Get the intial database
          oci_database_database_facts:
            compartment_id: "{{ compartment_ocid }}"
            db_home_id: "{{ db_home_id }}"
          register: result

        - set_fact:
            database_id: "{{ result.databases[0].id }}"

        - name: Create backup from intial database
          oci_database_backup:
            database_id: '{{ database_id }}'
            display_name: '{{ backup_display_name }}'
            state: present
          register: result

        - set_fact:
            backup_id: "{{result.backup.id}}"

        - name: Restore Database from latest backup
          oci_database_database_actions:
            database_id: '{{ database_id }}'
            latest: True
            action: restore
          register: result

        - name: Create database from backup
          oci_database_database:
            db_home_id: "{{ db_home_id }}"
            source: "NONE"
            database:
              db_name: "{{ backup_db_name }}"
              admin_password: "{{ database_admin_password }}"
              backup_id: "{{ backup_id }}"
              backup_tde_password: "{{ backup_tde_password }}"
            compartment_id: "{{ compartment_ocid }}"
          register: result

        - set_fact:
            database_from_backup_id: "{{ result.database.id }}"

        - name: Update freeform tags of database
          oci_database_database:
            database_id: "{{ database_from_backup_id }}"
            freeform_tags: "{{ updated_freeform_tags }}"
          register: result

        - name: Assert that defined tag is updated
          assert:
            that:
              - result.database.freeform_tags == updated_freeform_tags

        - name: List databases
          oci_database_database_facts:
            compartment_id: "{{ compartment_ocid }}"
            db_home_id: "{{ db_home_id }}"
          register: result

        - name: Assert resource was listed
          assert:
            that:
              - result['databases'] | length > 0

        - name: Get database
          oci_database_database_facts:
            database_id: "{{ database_from_backup_id }}"
          register: result

        - name: Assert resource was listed
          assert:
            that:
              - result['databases'] | length == 1

        - import_tasks: teardown.yaml

      rescue:

        - import_tasks: teardown.yaml
          ignore_errors: yes

        - fail:
            msg: "The sample execution failed."