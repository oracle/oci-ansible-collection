---
# Copyright (c) 2020, 2021 Oracle and/or its affiliates.
# This software is made available to you under the terms of the GPL 3.0 license or the Apache 2.0 license.
# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)
# Apache License v2.0
# See LICENSE.TXT for details.

- name: Launch a private compute instance and connect to internet via NAT Gateway
  hosts: localhost
  collections:
    - oracle.oci
  vars:
    # common networking definitions
    quad_zero_route: "0.0.0.0/0"
    TCP_protocol: "6"
    SSH_port: "22"

    vcn_name: "mytest_nat_gateway_vcn"
    vcn_cidr_block: "10.0.0.0/16"

    ng_name: "mynatgateway_for_{{vcn_name}}"
    ig_name: "myinternetgateway_for_{{vcn_name}}"

    private_subnet_cidr: "10.0.1.0/24"
    public_subnet_cidr: "10.0.0.0/24"

    private_subnet_name: "myprivatesubnet_in_{{vcn_name}}"
    public_subnet_name: "mypublicsubnet_in_{{vcn_name}}"

    public_subnet_securitylist_name: "mysecuritylist_for_{{public_subnet_name}}"
    private_subnet_securitylist_name: "mysecuritylist_for_{{private_subnet_name}}"

    public_subnet_route_table_name: "myroutetable_for_{{public_subnet_name}}"
    # route all internet access from the public subnet to the Internet Gateway
    public_subnet_route_table_rules:
        - cidr_block: "{{ quad_zero_route }}"
          network_entity_id: "{{ ig_id }}"

    private_subnet_route_table_name: "myroutetable_for_{{private_subnet_name}}"
    # route all internet access from the private subnet to the NAT Gateway
    private_subnet_route_table_rules:
        - cidr_block: "{{ quad_zero_route }}"
          network_entity_id: "{{ ng_id }}"

    public_subnet_instance_name: "my_bastion_instance_for_{{vcn_name}}"
    private_subnet_instance_name: "my_private_instance_in_{{private_subnet_name}}"

    instance_shape: "{{ lookup('env', 'SAMPLE_INSTANCE_SHAPE') | default('VM.Standard2.1', true) }}"
    public_subnet_instance_hostname: "mypublicinstance"
    private_subnet_instance_hostname: "myprivateinstance"

    # Use "opc" as the user, as this is an OL image
    ssh_user: "opc"
    ssh_disable_strict_host_key_checking_args: '-o "UserKnownHostsFile=/dev/null" -o "StrictHostKeyChecking=no"'
    ssh_credentials_arg: "-i {{ temp_certificates_path }}/private_key.pem"

    #########################################
    # Tenancy specific configuration
    # *Note* - Override the following variables based on your tenancy
    # or set a valid value for the corresponding environment variable
    #########################################
    instance_ad: "{{ lookup('env', 'SAMPLE_AD_NAME') }}"
    instance_compartment: "{{ lookup('env', 'SAMPLE_COMPARTMENT_OCID') }}"
    # provide an OL image
    instance_image: "{{ lookup('env', 'SAMPLE_OL_IMAGE_OCID') }}"

  tasks:
    - block:
      - import_tasks: setup.yaml

      - name: Wait (upto 10 minutes) for ssh to start in public instance
        wait_for:
          port: 22
          host: '{{ public_instance_public_ip }}'
          state: started
          delay: 10
          timeout: 600
        vars:
          ansible_connection: local

      - name: Wait (upto 5 minutes) for ssh to start in private instance
        command: 'ssh {{ ssh_disable_strict_host_key_checking_args }} {{ ssh_credentials_arg }} -o ProxyCommand="ssh {{ ssh_disable_strict_host_key_checking_args }} {{ ssh_credentials_arg }} -W %h:%p -q {{ ssh_user }}@{{ public_instance_public_ip }}" {{ ssh_user }}@{{ private_instance_private_ip }} uname -a'
        register: result
        until: result.rc == 0
        retries: 10
        delay: 30

      - name: Print sample SSH invocation to test if internet access is available in the private instance
        debug:
          msg: 'ssh {{ ssh_disable_strict_host_key_checking_args }} {{ ssh_credentials_arg }} -o ProxyCommand="ssh {{ ssh_disable_strict_host_key_checking_args }} {{ ssh_credentials_arg }} -W %h:%p -q {{ ssh_user }}@{{ public_instance_public_ip }}" {{ ssh_user }}@{{ private_instance_private_ip }} ping -c2 oracle.com'

      - name: Check internet access from private instance
        command: 'ssh {{ ssh_disable_strict_host_key_checking_args }} {{ ssh_credentials_arg }} -o ProxyCommand="ssh {{ ssh_disable_strict_host_key_checking_args }} {{ ssh_credentials_arg }} -W %h:%p -q {{ ssh_user }}@{{ public_instance_public_ip }}" {{ ssh_user }}@{{ private_instance_private_ip }} ping -c2 oracle.com'
        register: result

      - name: Print ping response from the private instance
        debug:
          msg: "{{ result.stdout_lines }}"

      always:
        - import_tasks: teardown.yaml
          ignore_errors: yes
