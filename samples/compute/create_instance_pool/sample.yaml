---
# Copyright (c) 2020, 2021 Oracle and/or its affiliates.
# This software is made available to you under the terms of the GPL 3.0 license or the Apache 2.0 license.
# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)
# Apache License v2.0
# See LICENSE.TXT for details.

- name: Create a compute instance pool and launch instances
  hosts: localhost
  collections:
    - oracle.oci
  vars:
    # common networking definitions
    quad_zero_route: "0.0.0.0/0"
    TCP_protocol: "6"
    SSH_port: "22"

    vcn_name: "mytestvcn"
    vcn_cidr_block: "10.0.0.0/16"
    vcn_dns_label: "mytestvcn"

    ig_name: "myinternetgatewayformytestvcn"

    route_table_name: "myroutetable"
    # route all internet access to our Internet Gateway
    route_table_rules:
        - cidr_block: "{{ quad_zero_route }}"
          network_entity_id: "{{ ig_id }}"


    subnet_cidr: "10.0.0.48/28"
    subnet_name: "mytestsubnet"
    subnet_dns_label: "mytestsubnet"

    securitylist_name: "mysecuritylist"

    instance_shape: "{{ lookup('env', 'SAMPLE_INSTANCE_SHAPE') | default('VM.Standard2.1', true) }}"
    instance_display_name: "mytestinstance"

    #########################################
    # Tenancy specific configuration
    # *Note* - Override the following variables based on your tenancy
    # or set a valid value for the corresponding environment variable
    #########################################
    instance_ad: "{{ lookup('env', 'SAMPLE_AD_NAME') }}"
    instance_compartment: "{{ lookup('env', 'SAMPLE_COMPARTMENT_OCID') }}"
    # provide an "OL" image
    instance_image: "{{ lookup('env', 'SAMPLE_IMAGE_OCID') }}"

  tasks:
    - block:
      - import_tasks: setup.yaml

      - name: Create a new basic compute instance configuration that has launch_details and VNIC configuration
        oci_compute_management_instance_configuration:
              compartment_id: "{{instance_compartment}}"
              name: "my_test_instance_configuration"
              instance_details:
                  instance_type: "compute"
                  launch_details:
                      compartment_id: "{{instance_compartment}}"
                      create_vnic_details:
                          assign_public_ip: True
                          display_name: "{{instance_display_name}}"
                      display_name: "{{instance_display_name}}"
                      shape: "{{instance_shape}}"
                      source_details:
                          source_type: "image"
                          image_id: "{{instance_image}}"
                      metadata:
                          ssh_authorized_keys: "{{ lookup('file',  my_test_public_key ) }}"
        register: result

      - name: Print instance configuration details
        debug:
          msg: "Created a new instance configuration {{ result.instance_configuration }}"

      - set_fact:
          instance_configuration_id: "{{result.instance_configuration.id }}"


      - name: Create a new instance pool from this instance configuration
        oci_compute_management_instance_pool:
          name: "my_test_instance_pool"
          compartment_id: "{{instance_compartment}}"
          instance_configuration_id: "{{instance_configuration_id}}"
          # launch 2 instances when pool is created
          size: 2
          placement_configurations:
              - availability_domain: "{{instance_ad}}"
                primary_subnet_id: "{{instance_subnet_id}}"
        register: result

      - set_fact:
          instance_pool_id: "{{result.instance_pool.id}}"

      - name: Print instance pool details
        debug:
          msg: "Created a new instance {{ result.instance_pool }}"

      - name: Get instance details of instances in the instance pool
        oci_compute_management_instance_pool_instance_facts:
          compartment_id: "{{instance_compartment}}"
          id: "{{instance_pool_id}}"
        register: result
      - name: Print details of instances in the new instance pool
        debug:
          msg: "Instances in instance pool {{instance_pool_id}} are {{ result.instance_pool_instances }}"

      - name: Get the first instance from the pool
        set_fact:
          instance_id: "{{result.instance_pool_instances[0].id}}"

      - name: Get the VNIC attachment details of that instance
        oci_compute_vnic_attachment_facts:
          compartment_id: "{{ instance_compartment }}"
          instance_id: "{{ instance_id }}"
        register: result

      - name: Get details of the VNIC of that VNIC attachment
        oci_network_vnic_facts:
          id: "{{ result.vnic_attachments[0].vnic_id }}"
        register: result
      - set_fact:
          instance_public_ip: "{{result.vnic.public_ip}}"

      - name: Print the public ip of the newly launched instance
        debug:
          msg: "Public IP of launched instance {{ instance_public_ip }}"

      - name: Wait (upto 10 minutes) for port 22 to become open
        wait_for:
          port: 22
          host: '{{ instance_public_ip }}'
          state: started
          delay: 10
          timeout: 600
        vars:
          ansible_connection: local

      - name: Attempt a ssh connection to the newly launced instance
        # Use "opc" user as this is an OL image
        # Disable SSH's strict host key checking just for this one command invocation
        command: ssh -o "UserKnownHostsFile=/dev/null" -o "StrictHostKeyChecking=no" -i {{ temp_certificates_path }}/private_key.pem opc@{{ instance_public_ip }} uname -a
        retries: 3
        delay: 5
        register: result
        until: result.rc == 0

      - name: Print SSH response from launched instance
        debug:
          msg: "SSH response from instance -> {{ result.stdout_lines }}"

      always:
        - import_tasks: teardown.yaml
          ignore_errors: yes
