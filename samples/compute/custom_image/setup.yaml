---
# Copyright (c) 2020, 2021 Oracle and/or its affiliates.
# This software is made available to you under the terms of the GPL 3.0 license or the Apache 2.0 license.
# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)
# Apache License v2.0
# See LICENSE.TXT for details.

- name: Check pre-requisites
  fail:
    msg: "Environment variable {{item}} not set. Please declare an environment variable with an appropriate value for the sample to work."
  when: item not in ansible_env
  with_items:
    - "SAMPLE_COMPARTMENT_OCID"
    - "SAMPLE_IMAGE_OCID"
    - "SAMPLE_AD_NAME"

- name: Create a temporary directory to house a temporary SSH keypair we will later use to connect to instance
  tempfile:
    state: directory
    suffix: cert
  register: result
- set_fact:
    temp_certificates_path: "{{ result.path }}"

- name: Generate a Private Key
  openssl_privatekey:
    path: "{{ temp_certificates_path }}/private_key.pem"
    type: RSA
    size: 2048
- set_fact:
    my_test_public_key: "{{ temp_certificates_path }}/public_key.pem"

- name: Generate a Public Key
  openssl_publickey:
    path: "{{ my_test_public_key }}"
    privatekey_path: "{{ temp_certificates_path }}/private_key.pem"
    format: OpenSSH

- name: Create a VCN
  oci_network_vcn:
    compartment_id: "{{ instance_compartment }}"
    display_name: "{{ vcn_name }}"
    cidr_block: "{{ vcn_cidr_block }}"
    dns_label: "{{ vcn_dns_label }}"
  register: result
- set_fact:
    vcn_id: "{{ result.vcn.id }}"

- name: Create a new Internet Gateway
  oci_network_internet_gateway:
    compartment_id: "{{ instance_compartment }}"
    vcn_id: "{{ vcn_id }}"
    name: "{{ ig_name }}"
    is_enabled: 'yes'
    state: 'present'
  register: result
- set_fact:
    ig_id: "{{ result.internet_gateway.id }}"

- name: Create route table to connect internet gateway to the VCN
  oci_network_route_table:
    compartment_id: "{{ instance_compartment }}"
    vcn_id: "{{ vcn_id }}"
    name: "{{ route_table_name }}"
    route_rules: "{{ route_table_rules }}"
    state: 'present'
  register: result
- set_fact:
    rt_id: "{{ result.route_table.id }}"

- name: Create a security list for allowing access to public instance
  oci_network_security_list:
    name: "{{ securitylist_name }}"
    compartment_id: "{{ instance_compartment }}"
    vcn_id: '{{ vcn_id }}'
    ingress_security_rules: "{{ public_instance_ingress_security_rules }}"
    egress_security_rules: "{{ public_instance_egress_security_rules }}"
  register: result
- set_fact:
    instance_security_list_ocid: "{{ result.security_list.id }}"

- name: Create a subnet to host the public instance. Link security_list and route_table.
  oci_network_subnet:
    availability_domain: "{{ instance_ad }}"
    cidr_block: "{{ subnet_cidr }}"
    compartment_id: "{{ instance_compartment }}"
    display_name: "{{ subnet_name }}"
    prohibit_public_ip_on_vnic: false
    route_table_id: "{{ rt_id }}"
    security_list_ids: [ "{{ instance_security_list_ocid }}" ]
    vcn_id: '{{ vcn_id }}'
    dns_label: "{{ subnet_dns_label }}"
  register: result
- set_fact:
    instance_subnet_id: "{{ result.subnet.id }}"