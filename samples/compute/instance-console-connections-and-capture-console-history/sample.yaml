---
# Copyright (c) 2018, 2020 Oracle and/or its affiliates.
# This software is made available to you under the terms of the GPL 3.0 license or the Apache 2.0 license.
# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)
# Apache License v2.0
# See LICENSE.TXT for details.

- name: Launch a compute instance and connect to its serial console
  hosts: localhost
  collections:
    - oracle.oci
  vars:
    # common networking definitions
    quad_zero_route: "0.0.0.0/0"
    TCP_protocol: "6"
    SSH_port: "22"

    vcn_name: "mytestvcn"
    vcn_cidr_block: "10.0.0.0/16"
    vcn_dns_label: "mytestvcn"

    ig_name: "myinternetgatewayformytestvcn"

    route_table_name: "myroutetable"
    # route all internet access to our Internet Gateway
    route_table_rules:
        - cidr_block: "{{ quad_zero_route }}"
          network_entity_id: "{{ ig_id }}"


    subnet_cidr: "10.0.0.48/28"
    subnet_name: "mytestsubnet"
    subnet_dns_label: "mytestsubnet"

    securitylist_name: "mysecuritylist"

    instance_shape: "{{ lookup('env', 'SAMPLE_INSTANCE_SHAPE') | default('VM.Standard2.1', true) }}"
    instance_hostname: "mytestinstance"

    #########################################
    # Tenancy specific configuration
    # *Note* - Override the following variables based on your tenancy
    # or set a valid value for the corresponding environment variable
    #########################################
    instance_ad: "{{ lookup('env', 'SAMPLE_AD_NAME') }}"
    instance_compartment: "{{ lookup('env', 'SAMPLE_COMPARTMENT_OCID') }}"
    # provide an "OL" image
    instance_image: "{{ lookup('env', 'SAMPLE_IMAGE_OCID') }}"

  tasks:
    - block:
      - import_tasks: setup.yaml

      - name: Launch an instance
        oci_compute_instance:
          availability_domain: "{{ instance_ad }}"
          compartment_id: "{{ instance_compartment }}"
          name: "my_test_instance"
          image_id: "{{ instance_image }}"
          shape: "{{ instance_shape }}"
          create_vnic_details:
              assign_public_ip: True
              hostname_label: "{{ instance_hostname }}"
              subnet_id: "{{ instance_subnet_id }}"
        register: result

      - name: Print instance details
        debug:
          msg: "Launched a new instance {{ result }}"
      - set_fact:
          instance_id: "{{result.instance.id }}"

      - name: Get the VNIC attachment details of instance
        oci_compute_vnic_attachment_facts:
          compartment_id: "{{ instance_compartment }}"
          instance_id: "{{ instance_id }}"
        register: result

      - name: Get details of the VNIC
        oci_network_vnic_facts:
          id: "{{ result.vnic_attachments[0].vnic_id }}"
        register: result
      - set_fact:
          instance_public_ip: "{{result.vnic.public_ip}}"

      - name: Print the public ip of the newly launched instance
        debug:
          msg: "Public IP of launched instance {{ instance_public_ip }}"

      - name: Wait (upto 5 minutes) for port 22 to become open
        wait_for:
          port: 22
          host: '{{ instance_public_ip }}'
          state: started
          delay: 10
        vars:
          ansible_connection: local

      - name: Create a new console connection to the instance
        oci_compute_instance_console_connection:
          instance_id: "{{ instance_id }}"
          public_key: "{{ lookup('file', my_test_public_key) }}"
          compartment_id: "{{ instance_compartment }}"
        register: result
      - set_fact:
          instance_console_connection_id: "{{result.instance_console_connection.id}}"
      - debug:
          msg: "Instance console connection string - {{result.instance_console_connection.connection_string}} "

      - set_fact:
          # Since this sample uses a custom private key that is not in the default locations where ssh looks for identify files for PK auth,
          # append the custom private key to the proxy portion of the SSH invocation string returned by oci_instance_console_connection
          # (Note - this step is not needed if you use your default SSH public key as the `public_key` while creating the instance console connection
          # using oci_instance_console_connection)
          append_pk_to_proxy_portion_connection_string: "{{result.instance_console_connection.connection_string | replace('.oraclecloud.com', '.oraclecloud.com -i ' + temp_certificates_path + '/private_key.pem')}}"
      - set_fact:
          # also append the custom private key to the outer SSH invocation string, and disable strict host key checking
          # to get the final connection string that can be used to connect to the serial console of the instance
          final_connection_string: "{{append_pk_to_proxy_portion_connection_string}} -i {{ temp_certificates_path }}/private_key.pem -o 'UserKnownHostsFile=/dev/null' -o 'StrictHostKeyChecking=no'"
      - debug:
          msg: "SSH Instance console connection string to use to connect to the serial console of the new instance {{final_connection_string}}"

      - name: Capture instance console history
        oci_compute_instance_console_history:
          instance_id: "{{ instance_id }}"
          compartment_id: "{{ instance_compartment }}"
        register: result
      - set_fact:
          console_history_id: "{{result.instance_console_history.id}}"

      - name: create temporary directory to write instance console history content to
        tempfile:
          state: directory
          suffix: data
        register: result
      - set_fact:
          instance_console_history_content_dir: "{{ result.path }}"
      - set_fact:
          instance_console_history_content_file: "{{instance_console_history_content_dir}}/console_history-{{instance_id}}.txt"

      - name: Get instance console history data of the new instance and write the data to a file
        oci_compute_instance_console_history_content_facts:
          id: "{{ console_history_id }}"
        register: result

      - name: Copy the console history data into a file
        copy:
          content: "{{ result.instance_console_history_content }}"
          dest: "{{ instance_console_history_content_file }}"
      - debug:
          msg: "Instance console history data for {{ instance_id }} is now available at {{ instance_console_history_content_file }}"

      - name: Check that the instance console history content was written to the file
        stat:
          path: "{{instance_console_history_content_file}}"
        register: stat_result
      - assert:
          that:
            - stat_result.stat.exists == True

      always:
        - import_tasks: teardown.yaml
          ignore_errors: true
