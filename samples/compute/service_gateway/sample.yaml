---
# Copyright (c) 2020, 2021 Oracle and/or its affiliates.
# This software is made available to you under the terms of the GPL 3.0 license or the Apache 2.0 license.
# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)
# Apache License v2.0
# See LICENSE.TXT for details.

- name: Launch a private compute instance and connect to object storage via storage gateway
  hosts: localhost
  collections:
    - oracle.oci

  vars:
    # common networking definitions
    quad_zero_route: "0.0.0.0/0"
    TCP_protocol: "6"
    SSH_port: 22

    #########################################
    # Tenancy specific configuration
    # *Note* - Override the following variables based on your tenancy
    # or set a valid value for the corresponding environment variable
    #########################################

    tenancy_ocid: "{{ lookup('env', 'SAMPLE_TENANCY_OCID') }}"
    instance_ad: "{{ lookup('env', 'SAMPLE_AD_NAME') }}"
    instance_compartment: "{{ lookup('env', 'SAMPLE_COMPARTMENT_OCID') }}"
    # provide an OL image
    instance_image: "{{ lookup('env', 'SAMPLE_OL_IMAGE_OCID') }}"
    namespace_name: "{{ lookup('env', 'SAMPLE_OBJECT_NS_NAME') }}"
    region: "{{ lookup('env', 'SAMPLE_REGION') }}"

    vcn_name: "ansible-sample-service-gateway-vcn"
    vcn_cidr_block: "10.0.0.0/16"

    sg_name: "ansible-sample-service-gateway-sg"
    ng_name: "ansible-sample-service-gateway-ng"
    ig_name: "ansible-sample-service-gateway-ig"

    private_subnet_cidr: "10.0.1.0/24"
    public_subnet_cidr: "10.0.0.0/24"

    private_subnet_name: "ansible-sample-service-gateway-private-subnet"
    public_subnet_name: "ansible-sample-service-gateway-public-subnet"

    public_subnet_securitylist_name: "ansible-sample-service-gateway-public-ssl"
    private_subnet_securitylist_name: "ansible-sample-service-gateway-private-ssl"

    public_subnet_route_table_name: "ansible-sample-service-gateway-public-rt"
    # route all internet access from the public subnet to the Internet Gateway
    public_subnet_route_table_rules:
        - cidr_block: "{{ quad_zero_route }}"
          network_entity_id: "{{ ig_id }}"

    public_instance_egress_security_rules:
      # Allow all connections outside
      - destination: "{{ quad_zero_route }}"
        protocol: "all"

    public_instance_ingress_security_rules:
      # Allow incoming SSH connections
      - source: "{{ quad_zero_route }}"
        protocol: "{{ TCP_protocol }}"
        tcp_options:
          destination_port_range:
            min: "{{ SSH_port }}"
            max: "{{ SSH_port }}"

    private_subnet_route_table_name: "ansible-sample-service-gateway-private-rt"

    # temporary rule which allows private instance to install oci cli
    quad_zero_nat_gateway_route_rule:
      destination: "{{ quad_zero_route }}"
      network_entity_id: "{{ ng_id }}"

    private_subnet_route_table_rules_temp:
      - "{{ quad_zero_nat_gateway_route_rule }}"

    object_storage_destination_type: "SERVICE_CIDR_BLOCK"
    object_service_route_rule:
      destination: "{{ object_storage_destination }}"
      destination_type: "{{ object_storage_destination_type }}"
      network_entity_id: "{{ sg_id }}"

    # route rule to allow private object storage access via Service Gateway
    private_subnet_route_table_rules:
      - "{{ object_service_route_rule }}"

    private_instance_egress_security_rules:
      # Allow all connections outside
      - destination: "{{ quad_zero_route }}"
        protocol: "all"

    private_instance_ingress_security_rules:
      # Allow all traffic from the public subnet
      - source: "{{ public_subnet_cidr }}"
        protocol: "{{ TCP_protocol }}"
        tcp_options:
          destination_port_range:
            min: "{{ SSH_port }}"
            max: "{{ SSH_port }}"

    public_subnet_instance_name: "ansible-sample-service-gateway-public-instance"
    private_subnet_instance_name: "ansible-sample-service-gateway-private-instance"

    instance_shape: "{{ lookup('env', 'SAMPLE_INSTANCE_SHAPE') | default('VM.Standard2.1', true) }}"
    public_subnet_instance_hostname: "mybastioninstance"
    private_subnet_instance_hostname: "myprivateinstance"

    # Use "opc" as the user, as this is an OL image
    ssh_user: "opc"
    ssh_disable_strict_host_key_checking_args: '-o "UserKnownHostsFile=/dev/null" -o "StrictHostKeyChecking=no"'
    ssh_credentials_arg: "-i {{ temp_certificates_path }}/private_key.pem"

    # user and group configuration
    test_user_name: "mytestservicegatewayuser"
    test_user_description: "Test user for verifying service gateway"
    test_group_name: "mytestservicegatewaygroup"
    test_group_description: "A group that are allows to manage buckets"
    test_policy_name: "mytestservicegatewaypolicy"
    test_policy_description: "policy to allow {{ test_group_name }} to manage buckets"
    test_policy_statement: "Allow group {{ test_group_name }} to manage bucket in compartment id {{ instance_compartment }}"
    test_user_api_private_key_path: "~/.oci/oci_api_key.pem"
    api_key_passphrase: "testuserpassphrase"

    # this bucket will be created from the private instance using oci cli
    test_bucket_name: "ansible-sample-service-gateway-bucket"

  tasks:
    - block:
      - import_tasks: setup.yaml

      #==========================================================================================

      - name: Create bucket in private instance
        oci_object_storage_bucket:
          namespace_name: "{{ namespace_name }}"
          name: "{{ test_bucket_name }}"
          compartment_id: "{{ instance_compartment }}"
        register: result

      - name: Print bucket create response
        debug:
          msg: "Create bucket response -> {{ result.bucket }}"

      #==========================================================================================

      - name: get the bucket details
        oci_object_storage_bucket_facts:
          namespace_name: "{{ namespace_name }}"
          bucket_name: "{{ test_bucket_name }}"
        register: result

      - debug:
          msg: "{{ result.buckets }}"

      - name: verify that the bucket is created
        assert:
          that:
            - result.buckets[0].name == "{{ test_bucket_name }}"

      #==========================================================================================

      - import_tasks: teardown.yaml

      rescue:
        - import_tasks: teardown.yaml
          ignore_errors: yes

        - fail:
            msg: "{{ ansible_failed_result }}"
