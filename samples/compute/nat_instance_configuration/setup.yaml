---
# Copyright (c) 2018, 2020 Oracle and/or its affiliates.
# This software is made available to you under the terms of the GPL 3.0 license or the Apache 2.0 license.
# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)
# Apache License v2.0
# See LICENSE.TXT for details.

- name: Check pre-requisites
  fail:
    msg: "Environment variable {{item}} not set. Please declare an environment variable with an appropriate value for the sample to work."
  when: item not in ansible_env
  with_items:
    - "SAMPLE_COMPARTMENT_OCID"
    - "SAMPLE_IMAGE_OCID"
    - "SAMPLE_AD_NAME"

- name: Create a temporary directory to house a temporary SSH keypair we will later use to connect to instance
  tempfile:
    state: directory
    suffix: cert
  register: result
- set_fact:
    temp_certificates_path: "{{ result.path }}"
- name: Generate a Private Key
  openssl_privatekey:
    path: "{{ temp_certificates_path }}/private_key.pem"
    type: RSA
    size: 2048
- set_fact:
    my_test_public_key: "{{ temp_certificates_path }}/public_key.pem"
- name: Generate a Public Key
  openssl_publickey:
    path: "{{ my_test_public_key }}"
    privatekey_path: "{{ temp_certificates_path }}/private_key.pem"
    format: OpenSSH

- name: Create a VCN
  oci_network_vcn:
    compartment_id: "{{ instance_compartment }}"
    display_name: "{{ vcn_name }}"
    cidr_block: "{{ vcn_cidr_block }}"
  register: result
- set_fact:
    vcn_id: "{{ result.vcn.id }}"


#########################################
# Public subnet
#########################################


# Create a security list for the public subnet
# Use a jinja2 template of the ingress and egress security rules to generate
# a templated version of the final rules.
- name: create ingress rules yaml body
  template: src=./templates/public_subnet_ingress_security_rules.yaml.j2 dest=/tmp/public_subnet_ingress_security_rules.yaml
- name: create egress yaml body
  template: src=./templates/public_subnet_egress_security_rules.yaml.j2 dest=/tmp/public_subnet_egress_security_rules.yaml

# Load the variables defined in the generated files
- name: load the variables defined in the ingress rules yaml body
  include_vars:
    file: /tmp/public_subnet_ingress_security_rules.yaml
    name: loaded_ingress
- name: print loaded_ingress
  debug:
    msg: "loaded ingress is {{loaded_ingress}}"
- name: load the variables defined in the egress rules yaml body
  include_vars:
    file: /tmp/public_subnet_egress_security_rules.yaml
    name: loaded_egress
- name: print loaded_egress
  debug:
    msg: "loaded egress is {{loaded_egress}}"
- name: Create a security list for the public subnet
  oci_network_security_list:
    name: "{{ public_subnet_securitylist_name }}"
    compartment_id: "{{ instance_compartment }}"
    vcn_id: '{{ vcn_id }}'
    ingress_security_rules: "{{ loaded_ingress.instance_ingress_security_rules }}"
    egress_security_rules:  "{{ loaded_egress.instance_egress_security_rules }}"
  register: result
- set_fact:
    public_subnet_security_list_ocid: "{{ result.security_list.id }}"


- name: Create a new Internet Gateway
  oci_network_internet_gateway:
    compartment_id: "{{ instance_compartment }}"
    vcn_id: "{{ vcn_id }}"
    name: "{{ ig_name }}"
    is_enabled: 'yes'
    state: 'present'
  register: result
- set_fact:
    ig_id: "{{ result.internet_gateway.id }}"

- name: Create a route table to connect internet gateway to the VCN
  oci_network_route_table:
    compartment_id: "{{ instance_compartment }}"
    vcn_id: "{{ vcn_id }}"
    name: "{{ public_subnet_route_table_name }}"
    route_rules: "{{ public_subnet_route_table_rules }}"
    state: 'present'
  register: result
- set_fact:
    public_subnet_rt_id: "{{ result.route_table.id }}"


- name: Create the public subnet to host the public instance. Link security_list and route_table.
  oci_network_subnet:
    availability_domain: "{{ instance_ad }}"
    cidr_block: "{{ public_subnet_cidr }}"
    compartment_id: "{{ instance_compartment }}"
    display_name: "{{ public_subnet_name }}"
    prohibit_public_ip_on_vnic: false
    route_table_id: "{{ public_subnet_rt_id }}"
    security_list_ids: [ "{{ public_subnet_security_list_ocid }}" ]
    vcn_id: '{{ vcn_id }}'
  register: result
- set_fact:
    public_subnet_id: "{{ result.subnet.id }}"


- name: Launch an instance in the public subnet to act as the NAT instance
  oci_compute_instance:
    availability_domain: "{{ instance_ad }}"
    compartment_id: "{{ instance_compartment }}"
    name: "{{ public_subnet_instance_name }}"
    image_id: "{{ instance_image }}"
    shape: "{{ instance_shape }}"
    create_vnic_details:
        assign_public_ip: True
        subnet_id: "{{ public_subnet_id }}"
        skip_source_dest_check: True
    metadata:
        ssh_authorized_keys: "{{ lookup('file',  my_test_public_key ) }}"
        # Provide a cloud-init script. This script configures the server firewall
        # and the kernel to provide NAT and routing service for other hosts on the
        # network
        user_data: "{{ lookup('file',  'user_data.tpl' ) | b64encode }}"
  register: result

- name: Print instance details
  debug:
    msg: "Launched a new NAT instance in the public subnet {{ result }}"
- set_fact:
    public_subnet_instance_id: "{{result.instance.id }}"

- name: Get the VNIC attachment details of instance
  oci_compute_vnic_attachment_facts:
    compartment_id: "{{ instance_compartment }}"
    instance_id: "{{ public_subnet_instance_id }}"
  register: result
- name: Get details of the VNIC
  oci_network_vnic_facts:
    id: "{{ result.vnic_attachments[0].vnic_id }}"
  register: result
- set_fact:
    public_instance_public_ip: "{{result.vnic.public_ip}}"

- name: Print the public ip of the newly launched instance
  debug:
    msg: "Public IP of the instance launched in the public subnet {{ public_instance_public_ip }}"

- name: Get VNIC attachment of the launched NAT instance
  oci_compute_vnic_attachment_facts:
    compartment_id: "{{instance_compartment}}"
    instance_id: '{{ public_subnet_instance_id }}'
  register: vnic_info

- name: List private IPs in the subnet
  oci_network_private_ip_facts:
    subnet_id: "{{ public_subnet_id }}"
  register: result

- name: Get OCID of primary private IP of the instance
  set_fact:
    private_ip_id_of_nat_instance: "{{ item.id }}"
  with_items: "{{ result.private_ips }}"
  when: item.vnic_id == vnic_info.vnic_attachments[0].vnic_id


#########################################
# Private subnet
#########################################

# Create a security list for the private subnet
- name: create ingress rules yaml body
  template: src=./templates/private_subnet_ingress_security_rules.yaml.j2 dest=/tmp/private_subnet_ingress_security_rules.yaml
- name: create egress yaml body
  template: src=./templates/private_subnet_egress_security_rules.yaml.j2 dest=/tmp/private_subnet_egress_security_rules.yaml

# Load the variables defined in the generated files
- name: load the variables defined in the ingress rules yaml body
  include_vars:
    file: /tmp/private_subnet_ingress_security_rules.yaml
    name: loaded_ingress
- name: print loaded_ingress
  debug:
    msg: "loaded ingress is {{loaded_ingress}}"
- name: load the variables defined in the egress rules yaml body
  include_vars:
    file: /tmp/private_subnet_egress_security_rules.yaml
    name: loaded_egress
- name: print loaded_egress
  debug:
    msg: "loaded egress is {{loaded_egress}}"
- name: Create a security list for the private subnet
  oci_network_security_list:
    name: "{{ private_subnet_securitylist_name }}"
    compartment_id: "{{ instance_compartment }}"
    vcn_id: '{{ vcn_id }}'
    ingress_security_rules: "{{ loaded_ingress.instance_ingress_security_rules }}"
    egress_security_rules:  "{{ loaded_egress.instance_egress_security_rules }}"
  register: result
- set_fact:
    private_subnet_security_list_ocid: "{{ result.security_list.id }}"


- name: Create a route table to connect all access from the private subnet to the NAT instance's private IP
  oci_network_route_table:
    compartment_id: "{{ instance_compartment }}"
    vcn_id: "{{ vcn_id }}"
    name: "{{ private_subnet_route_table_name }}"
    route_rules: "{{ private_subnet_route_table_rules }}"
    state: 'present'
  register: result
- set_fact:
    private_subnet_rt_id: "{{ result.route_table.id }}"

- name: Create the private subnet to host the private instance. Link security_list and route_table.
  oci_network_subnet:
    availability_domain: "{{ instance_ad }}"
    cidr_block: "{{ private_subnet_cidr }}"
    compartment_id: "{{ instance_compartment }}"
    display_name: "{{ private_subnet_name }}"
    prohibit_public_ip_on_vnic: True
    route_table_id: "{{ private_subnet_rt_id }}"
    security_list_ids: [ "{{ private_subnet_security_list_ocid }}" ]
    vcn_id: '{{ vcn_id }}'
  register: result
- set_fact:
    private_subnet_id: "{{ result.subnet.id }}"

- name: Launch an instance in the private subnet from which internet access would go through the NAT instance
  oci_compute_instance:
    availability_domain: "{{ instance_ad }}"
    compartment_id: "{{ instance_compartment }}"
    name: "{{ private_subnet_instance_name }}"
    image_id: "{{ instance_image }}"
    shape: "{{ instance_shape }}"
    create_vnic_details:
        assign_public_ip: False
        subnet_id: "{{ private_subnet_id }}"
    metadata:
        ssh_authorized_keys: "{{ lookup('file',  my_test_public_key ) }}"
  register: result
- set_fact:
    private_subnet_instance_id: "{{ result.instance.id }}"

- name: Get the VNIC attachment details of instance
  oci_compute_vnic_attachment_facts:
    compartment_id: "{{ instance_compartment }}"
    instance_id: "{{ private_subnet_instance_id }}"
  register: result

- name: Get details of the VNIC
  oci_network_vnic_facts:
    id: "{{ result.vnic_attachments[0].vnic_id }}"
  register: result
- set_fact:
    private_instance_private_ip: "{{result.vnic.private_ip}}"

- name: Print the private ip of the newly launched instance
  debug:
    msg: "Private IP of the instance launched in the private subnet {{ private_instance_private_ip }}"
